
SDCard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  00003bc4  00003c58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003bc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800300  00800300  00003e58  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  00003e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000065a  00000000  00000000  00003f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000059ae  00000000  00000000  000045b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000017e3  00000000  00000000  00009f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002803  00000000  00000000  0000b743  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000580  00000000  00000000  0000df48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f23  00000000  00000000  0000e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020f4  00000000  00000000  0000f3eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  000114df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 01 	jmp	0x396	; 0x396 <__ctors_end>
       4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
       8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
       c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      10:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      14:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      18:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      1c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      20:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      24:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      28:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      2c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      30:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      34:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      38:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      3c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      40:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      44:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      48:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      4c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      50:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      54:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      58:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      5c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      60:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      64:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      68:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      6c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      70:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      74:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__vector_29>
      78:	0c 94 35 12 	jmp	0x246a	; 0x246a <__vector_30>

0000007c <ascii_6x8>:
      7c:	02 00 00 00 00 00 00 01 22 20 20 20 00 00 20 01     ........"   .. .
      8c:	52 50 50 00 00 00 00 01 52 50 f8 50 f8 50 50 01     RPP.....RP.P.PP.
      9c:	22 78 a0 70 28 f0 20 01 c2 c8 10 20 40 98 18 01     "x.p(. .... @...
      ac:	62 90 a0 40 a8 90 68 01 62 20 40 00 00 00 00 01     b..@..h.b @.....
      bc:	12 20 40 40 40 20 10 01 42 20 10 10 10 20 40 01     . @@@ ..B ... @.
      cc:	02 20 a8 70 a8 20 00 01 02 20 20 f8 20 20 00 01     . .p. ...  .  ..
      dc:	02 00 00 00 00 60 20 41 02 00 00 f8 00 00 00 01     .....` A........
      ec:	02 00 00 00 00 60 60 01 02 08 10 20 40 80 00 01     .....``.... @...
      fc:	72 88 98 a8 c8 88 70 01 22 60 20 20 20 20 70 01     r.....p."`    p.
     10c:	72 88 08 10 20 40 f8 01 fa 10 20 10 08 88 70 01     r... @.... ...p.
     11c:	12 30 50 90 f8 10 10 01 fa 80 f0 08 08 88 70 01     .0P...........p.
     12c:	32 40 80 f0 88 88 70 01 fa 08 10 20 40 40 40 01     2@....p.... @@@.
     13c:	72 88 88 70 88 88 70 01 72 88 88 78 08 10 60 01     r..p..p.r..x..`.
     14c:	02 60 60 00 60 60 00 01 02 60 60 00 60 20 40 01     .``.``...``.` @.
     15c:	12 20 40 80 40 20 10 01 02 00 f8 00 f8 00 00 01     . @.@ ..........
     16c:	42 20 10 08 10 20 40 01 72 88 08 10 20 00 20 01     B ... @.r... . .
     17c:	72 88 08 68 a8 a8 70 01 72 88 88 88 f8 88 88 01     r..h..p.r.......
     18c:	f2 88 88 f0 88 88 f0 01 72 88 80 80 80 88 70 01     ........r.....p.
     19c:	e2 90 88 88 88 90 e0 01 fa 80 80 f0 80 80 f8 01     ................
     1ac:	fa 80 80 f0 80 80 80 01 72 88 80 b8 88 88 78 01     ........r.....x.
     1bc:	8a 88 88 f8 88 88 88 01 72 20 20 20 20 20 70 01     ........r     p.
     1cc:	3a 10 10 10 10 90 60 01 8a 90 a0 c0 a0 90 88 01     :.....`.........
     1dc:	82 80 80 80 80 80 f8 01 8a d8 a8 a8 88 88 88 01     ................
     1ec:	8a 88 c8 a8 98 88 88 01 72 88 88 88 88 88 70 01     ........r.....p.
     1fc:	f2 88 88 f0 80 80 80 01 72 88 88 88 a8 90 68 01     ........r.....h.
     20c:	f2 88 88 f0 a0 90 88 01 7a 80 80 70 08 08 f0 01     ........z..p....
     21c:	fa 20 20 20 20 20 20 01 8a 88 88 88 88 88 70 01     .      .......p.
     22c:	8a 88 88 88 88 50 20 01 8a 88 88 a8 a8 a8 50 01     .....P .......P.
     23c:	8a 88 50 20 50 88 88 01 8a 88 88 50 20 20 20 01     ..P P......P   .
     24c:	fa 08 10 20 40 80 f8 01 72 40 40 40 40 40 70 01     ... @...r@@@@@p.
     25c:	02 80 40 20 10 08 00 01 72 10 10 10 10 10 70 01     ..@ ....r.....p.
     26c:	22 50 88 00 00 00 00 01 02 00 00 00 00 00 f8 01     "P..............
     27c:	42 20 10 00 00 00 00 01 02 00 70 08 78 88 78 01     B ........p.x.x.
     28c:	82 80 b0 c8 88 88 f0 01 02 00 70 80 80 88 70 01     ..........p...p.
     29c:	0a 08 68 98 88 88 78 01 02 00 70 88 f8 80 70 01     ..h...x...p...p.
     2ac:	32 48 40 e0 40 40 40 01 02 78 88 88 78 08 70 01     2H@.@@@..x..x.p.
     2bc:	82 80 b0 c8 88 88 88 01 22 00 60 20 20 20 70 01     ........".`   p.
     2cc:	12 00 30 10 10 90 60 01 82 80 90 a0 c0 a0 90 01     ..0...`.........
     2dc:	62 20 20 20 20 20 70 01 02 00 d0 a8 a8 a8 a8 01     b     p.........
     2ec:	02 00 b0 c8 88 88 88 01 02 00 70 88 88 88 70 01     ..........p...p.
     2fc:	02 00 f0 88 f0 80 80 01 02 00 68 98 78 08 08 01     ..........h.x...
     30c:	02 00 b0 c8 80 80 80 01 02 00 70 80 70 08 f0 01     ..........p.p...
     31c:	42 40 e0 40 40 48 30 01 02 00 88 88 88 98 68 01     B@.@@H0.......h.
     32c:	02 00 88 88 88 50 20 01 02 00 88 88 a8 a8 50 01     .....P .......P.
     33c:	02 00 88 50 20 50 88 01 02 00 88 88 78 08 70 01     ...P P......x.p.
     34c:	02 00 f8 10 20 40 f8 01 12 20 20 40 20 20 10 01     .... @...  @  ..
     35c:	22 20 20 20 20 20 20 01 42 20 20 10 20 20 40 01     "      .B  .  @.
     36c:	02 00 68 90 00 00 00 01 02 00 00 00 00 00 00 01     ..h.............
     37c:	00 50 50 00 00 88 70 00 00 50 50 00 00 70 88 00     .PP...p..PP..p..
     38c:	00 50 50 00 88 a8 50 00                             .PP...P.

00000394 <__ctors_start>:
     394:	a5 0c       	add	r10, r5

00000396 <__ctors_end>:
     396:	11 24       	eor	r1, r1
     398:	1f be       	out	0x3f, r1	; 63
     39a:	cf ef       	ldi	r28, 0xFF	; 255
     39c:	d0 e1       	ldi	r29, 0x10	; 16
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	cd bf       	out	0x3d, r28	; 61

000003a2 <__do_copy_data>:
     3a2:	13 e0       	ldi	r17, 0x03	; 3
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b1 e0       	ldi	r27, 0x01	; 1
     3a8:	e4 ec       	ldi	r30, 0xC4	; 196
     3aa:	fb e3       	ldi	r31, 0x3B	; 59
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <.do_copy_data_start>

000003ae <.do_copy_data_loop>:
     3ae:	05 90       	lpm	r0, Z+
     3b0:	0d 92       	st	X+, r0

000003b2 <.do_copy_data_start>:
     3b2:	a0 30       	cpi	r26, 0x00	; 0
     3b4:	b1 07       	cpc	r27, r17
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <.do_copy_data_loop>

000003b8 <__do_clear_bss>:
     3b8:	13 e0       	ldi	r17, 0x03	; 3
     3ba:	a0 e0       	ldi	r26, 0x00	; 0
     3bc:	b3 e0       	ldi	r27, 0x03	; 3
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <.do_clear_bss_start>

000003c0 <.do_clear_bss_loop>:
     3c0:	1d 92       	st	X+, r1

000003c2 <.do_clear_bss_start>:
     3c2:	a0 34       	cpi	r26, 0x40	; 64
     3c4:	b1 07       	cpc	r27, r17
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <.do_clear_bss_loop>

000003c8 <__do_global_ctors>:
     3c8:	13 e0       	ldi	r17, 0x03	; 3
     3ca:	c6 e9       	ldi	r28, 0x96	; 150
     3cc:	d3 e0       	ldi	r29, 0x03	; 3
     3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <.do_global_ctors_start>

000003d0 <.do_global_ctors_loop>:
     3d0:	22 97       	sbiw	r28, 0x02	; 2
     3d2:	fe 01       	movw	r30, r28
     3d4:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__tablejump__>

000003d8 <.do_global_ctors_start>:
     3d8:	c4 39       	cpi	r28, 0x94	; 148
     3da:	d1 07       	cpc	r29, r17
     3dc:	c9 f7       	brne	.-14     	; 0x3d0 <.do_global_ctors_loop>
     3de:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <main>
     3e2:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <_exit>

000003e6 <__bad_interrupt>:
     3e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ea <_ZN2op5setfsEP4fs_t>:
	uint32_t __current_dir__ = 0;
	uint8_t __allocated_dir__ = 0;
	class fs_t *fs;
}

void op::setfs(class fs_t *filesys)
     3ea:	fc 01       	movw	r30, r24
{
	fs = filesys;
     3ec:	90 93 0e 03 	sts	0x030E, r25
     3f0:	80 93 0d 03 	sts	0x030D, r24
	__current_dir__ = fs->rootAddr();
     3f4:	a0 81       	ld	r26, Z
     3f6:	b1 81       	ldd	r27, Z+1	; 0x01
     3f8:	2d 91       	ld	r18, X+
     3fa:	3c 91       	ld	r19, X
     3fc:	f9 01       	movw	r30, r18
     3fe:	09 95       	icall
     400:	60 93 08 03 	sts	0x0308, r22
     404:	70 93 09 03 	sts	0x0309, r23
     408:	80 93 0a 03 	sts	0x030A, r24
     40c:	90 93 0b 03 	sts	0x030B, r25
}
     410:	08 95       	ret

00000412 <_ZN2op7readdirEP9dirstream>:
	}
	dir->orig = ent->d_addr;
	goto nextlevel;
}

struct dirent *op::readdir(DIR *dir)
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	9c 01       	movw	r18, r24
{
	struct dirent *ent = __dirent__[dir->des];
     418:	dc 01       	movw	r26, r24
     41a:	ec 91       	ld	r30, X
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	ee 0f       	add	r30, r30
     420:	ff 1f       	adc	r31, r31
     422:	e0 50       	subi	r30, 0x00	; 0
     424:	fd 4f       	sbci	r31, 0xFD	; 253
     426:	c0 81       	ld	r28, Z
     428:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!fs->readDirEntry(dir, ent))
     42a:	a0 91 0d 03 	lds	r26, 0x030D
     42e:	b0 91 0e 03 	lds	r27, 0x030E
     432:	ed 91       	ld	r30, X+
     434:	fc 91       	ld	r31, X
     436:	11 97       	sbiw	r26, 0x01	; 1
     438:	02 80       	ldd	r0, Z+2	; 0x02
     43a:	f3 81       	ldd	r31, Z+3	; 0x03
     43c:	e0 2d       	mov	r30, r0
     43e:	cd 01       	movw	r24, r26
     440:	b9 01       	movw	r22, r18
     442:	ae 01       	movw	r20, r28
     444:	09 95       	icall
     446:	88 23       	and	r24, r24
     448:	11 f4       	brne	.+4      	; 0x44e <_ZN2op7readdirEP9dirstream+0x3c>
     44a:	c0 e0       	ldi	r28, 0x00	; 0
     44c:	d0 e0       	ldi	r29, 0x00	; 0
		return NULL;
	return ent;
}
     44e:	ce 01       	movw	r24, r28
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <_ZN2op9rewinddirEP9dirstream>:

void op::rewinddir(DIR *dir)
     456:	fc 01       	movw	r30, r24
{
	dir->addr = dir->orig;
     458:	81 81       	ldd	r24, Z+1	; 0x01
     45a:	92 81       	ldd	r25, Z+2	; 0x02
     45c:	a3 81       	ldd	r26, Z+3	; 0x03
     45e:	b4 81       	ldd	r27, Z+4	; 0x04
     460:	85 83       	std	Z+5, r24	; 0x05
     462:	96 83       	std	Z+6, r25	; 0x06
     464:	a7 83       	std	Z+7, r26	; 0x07
     466:	b0 87       	std	Z+8, r27	; 0x08
	dir->offset = 0;
     468:	11 86       	std	Z+9, r1	; 0x09
     46a:	12 86       	std	Z+10, r1	; 0x0a
     46c:	13 86       	std	Z+11, r1	; 0x0b
     46e:	14 86       	std	Z+12, r1	; 0x0c
}
     470:	08 95       	ret

00000472 <_ZN2op8closedirEP9dirstream>:

int op::closedir(DIR *dir)
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	ec 01       	movw	r28, r24
{
	errno = EBADF;
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	80 93 0f 03 	sts	0x030F, r24
	if (dir == NULL)
     47e:	20 97       	sbiw	r28, 0x00	; 0
     480:	81 f0       	breq	.+32     	; 0x4a2 <_ZN2op8closedirEP9dirstream+0x30>
		return -1;
	if (dir->des >= MAX_DIRENT_CNT)
     482:	88 81       	ld	r24, Y
     484:	82 30       	cpi	r24, 0x02	; 2
     486:	68 f4       	brcc	.+26     	; 0x4a2 <_ZN2op8closedirEP9dirstream+0x30>
		return -1;
	if ((__allocated_dir__ & (1 << dir->des)) == 0)
     488:	e8 2f       	mov	r30, r24
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	80 91 0c 03 	lds	r24, 0x030C
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 2e       	mov	r0, r30
     494:	02 c0       	rjmp	.+4      	; 0x49a <_ZN2op8closedirEP9dirstream+0x28>
     496:	95 95       	asr	r25
     498:	87 95       	ror	r24
     49a:	0a 94       	dec	r0
     49c:	e2 f7       	brpl	.-8      	; 0x496 <_ZN2op8closedirEP9dirstream+0x24>
     49e:	80 fd       	sbrc	r24, 0
     4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <_ZN2op8closedirEP9dirstream+0x36>
     4a2:	2f ef       	ldi	r18, 0xFF	; 255
     4a4:	3f ef       	ldi	r19, 0xFF	; 255
     4a6:	24 c0       	rjmp	.+72     	; 0x4f0 <_ZN2op8closedirEP9dirstream+0x7e>
		return -1;
	errno = 0;
     4a8:	10 92 0f 03 	sts	0x030F, r1
	free(__dir__[dir->des]);
     4ac:	ee 0f       	add	r30, r30
     4ae:	ff 1f       	adc	r31, r31
     4b0:	ec 5f       	subi	r30, 0xFC	; 252
     4b2:	fc 4f       	sbci	r31, 0xFC	; 252
     4b4:	80 81       	ld	r24, Z
     4b6:	91 81       	ldd	r25, Z+1	; 0x01
     4b8:	0e 94 83 19 	call	0x3306	; 0x3306 <free>
	free(__dirent__[dir->des]);
     4bc:	e8 81       	ld	r30, Y
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	ee 0f       	add	r30, r30
     4c2:	ff 1f       	adc	r31, r31
     4c4:	e0 50       	subi	r30, 0x00	; 0
     4c6:	fd 4f       	sbci	r31, 0xFD	; 253
     4c8:	80 81       	ld	r24, Z
     4ca:	91 81       	ldd	r25, Z+1	; 0x01
     4cc:	0e 94 83 19 	call	0x3306	; 0x3306 <free>
	__allocated_dir__ &= ~(1 << dir->des);
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	08 80       	ld	r0, Y
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <_ZN2op8closedirEP9dirstream+0x6a>
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	0a 94       	dec	r0
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <_ZN2op8closedirEP9dirstream+0x66>
     4e0:	80 95       	com	r24
     4e2:	20 91 0c 03 	lds	r18, 0x030C
     4e6:	28 23       	and	r18, r24
     4e8:	20 93 0c 03 	sts	0x030C, r18
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e0       	ldi	r19, 0x00	; 0
	return 0;
}
     4f0:	c9 01       	movw	r24, r18
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <_ZN2op7opendirEPKc>:
	}
	errno = ENFILE;
	return -1;
}

DIR *op::opendir(const char *path)
     4f8:	6f 92       	push	r6
     4fa:	7f 92       	push	r7
     4fc:	8f 92       	push	r8
     4fe:	9f 92       	push	r9
     500:	af 92       	push	r10
     502:	bf 92       	push	r11
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	df 93       	push	r29
     512:	cf 93       	push	r28
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	c0 50       	subi	r28, 0x00	; 0
     51a:	d1 40       	sbci	r29, 0x01	; 1
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	f8 94       	cli
     520:	de bf       	out	0x3e, r29	; 62
     522:	0f be       	out	0x3f, r0	; 63
     524:	cd bf       	out	0x3d, r28	; 61
     526:	5c 01       	movw	r10, r24
{
	if (path == NULL || *path == '\0') {
     528:	00 97       	sbiw	r24, 0x00	; 0
     52a:	09 f4       	brne	.+2      	; 0x52e <_ZN2op7opendirEPKc+0x36>
     52c:	cc c0       	rjmp	.+408    	; 0x6c6 <_ZN2op7opendirEPKc+0x1ce>
     52e:	dc 01       	movw	r26, r24
     530:	8c 91       	ld	r24, X
     532:	88 23       	and	r24, r24
     534:	09 f4       	brne	.+2      	; 0x538 <_ZN2op7opendirEPKc+0x40>
     536:	c7 c0       	rjmp	.+398    	; 0x6c6 <_ZN2op7opendirEPKc+0x1ce>
		errno = ENOENT;
		return NULL;
	}
	if (__current_dir__ == 0) {
     538:	80 91 08 03 	lds	r24, 0x0308
     53c:	90 91 09 03 	lds	r25, 0x0309
     540:	a0 91 0a 03 	lds	r26, 0x030A
     544:	b0 91 0b 03 	lds	r27, 0x030B
     548:	00 97       	sbiw	r24, 0x00	; 0
     54a:	a1 05       	cpc	r26, r1
     54c:	b1 05       	cpc	r27, r1
     54e:	11 f4       	brne	.+4      	; 0x554 <_ZN2op7opendirEPKc+0x5c>
		errno = ENOFS;
     550:	87 e0       	ldi	r24, 0x07	; 7
     552:	38 c0       	rjmp	.+112    	; 0x5c4 <_ZN2op7opendirEPKc+0xcc>
}

static int8_t op::alloc_dir(void)
{
	for (uint8_t i = 0; i < MAX_DIRENT_CNT; i++) {
		if (__allocated_dir__ & (1 << i))
     554:	20 91 0c 03 	lds	r18, 0x030C
     558:	20 fd       	sbrc	r18, 0
     55a:	04 c0       	rjmp	.+8      	; 0x564 <_ZN2op7opendirEPKc+0x6c>
     55c:	00 e0       	ldi	r16, 0x00	; 0
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	dd 24       	eor	r13, r13
     562:	06 c0       	rjmp	.+12     	; 0x570 <_ZN2op7opendirEPKc+0x78>
     564:	21 fd       	sbrc	r18, 1
     566:	2d c0       	rjmp	.+90     	; 0x5c2 <_ZN2op7opendirEPKc+0xca>
     568:	01 e0       	ldi	r16, 0x01	; 1
     56a:	10 e0       	ldi	r17, 0x00	; 0
     56c:	dd 24       	eor	r13, r13
     56e:	d3 94       	inc	r13
			continue;
		__allocated_dir__ |= 1 << i;
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	00 2e       	mov	r0, r16
     576:	02 c0       	rjmp	.+4      	; 0x57c <_ZN2op7opendirEPKc+0x84>
     578:	88 0f       	add	r24, r24
     57a:	99 1f       	adc	r25, r25
     57c:	0a 94       	dec	r0
     57e:	e2 f7       	brpl	.-8      	; 0x578 <_ZN2op7opendirEPKc+0x80>
     580:	28 2b       	or	r18, r24
     582:	20 93 0c 03 	sts	0x030C, r18
		if ((__dir__[i] = (DIR *)malloc(sizeof(DIR))) == NULL || (__dirent__[i] = (struct dirent *)malloc(sizeof(struct dirent))) == NULL) {
     586:	8d e0       	ldi	r24, 0x0D	; 13
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 d6 18 	call	0x31ac	; 0x31ac <malloc>
     58e:	00 0f       	add	r16, r16
     590:	11 1f       	adc	r17, r17
     592:	54 e0       	ldi	r21, 0x04	; 4
     594:	e5 2e       	mov	r14, r21
     596:	53 e0       	ldi	r21, 0x03	; 3
     598:	f5 2e       	mov	r15, r21
     59a:	e0 0e       	add	r14, r16
     59c:	f1 1e       	adc	r15, r17
     59e:	f7 01       	movw	r30, r14
     5a0:	91 83       	std	Z+1, r25	; 0x01
     5a2:	80 83       	st	Z, r24
     5a4:	00 97       	sbiw	r24, 0x00	; 0
     5a6:	59 f0       	breq	.+22     	; 0x5be <_ZN2op7opendirEPKc+0xc6>
     5a8:	89 e0       	ldi	r24, 0x09	; 9
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	0e 94 d6 18 	call	0x31ac	; 0x31ac <malloc>
     5b0:	00 50       	subi	r16, 0x00	; 0
     5b2:	1d 4f       	sbci	r17, 0xFD	; 253
     5b4:	d8 01       	movw	r26, r16
     5b6:	8d 93       	st	X+, r24
     5b8:	9c 93       	st	X, r25
     5ba:	00 97       	sbiw	r24, 0x00	; 0
     5bc:	41 f4       	brne	.+16     	; 0x5ce <_ZN2op7opendirEPKc+0xd6>
			errno = ENOMEM;
     5be:	86 e0       	ldi	r24, 0x06	; 6
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <_ZN2op7opendirEPKc+0xcc>
			return -1;
		}
		__dir__[i]->des = i;
		return i;
	}
	errno = ENFILE;
     5c2:	83 e0       	ldi	r24, 0x03	; 3
     5c4:	80 93 0f 03 	sts	0x030F, r24
		closedir(dir);
		errno = ENOTDIR;
		return NULL;
	}
	dir->orig = ent->d_addr;
	goto nextlevel;
     5c8:	ee 24       	eor	r14, r14
     5ca:	ff 24       	eor	r15, r15
     5cc:	9f c0       	rjmp	.+318    	; 0x70c <_ZN2op7opendirEPKc+0x214>
		__allocated_dir__ |= 1 << i;
		if ((__dir__[i] = (DIR *)malloc(sizeof(DIR))) == NULL || (__dirent__[i] = (struct dirent *)malloc(sizeof(struct dirent))) == NULL) {
			errno = ENOMEM;
			return -1;
		}
		__dir__[i]->des = i;
     5ce:	d7 01       	movw	r26, r14
     5d0:	ed 91       	ld	r30, X+
     5d2:	fc 91       	ld	r31, X
     5d4:	d0 82       	st	Z, r13
		return NULL;
	}
	uint8_t d;
	if ((int8_t)(d = alloc_dir()) == -1)
		return NULL;
	DIR *dir = __dir__[d];
     5d6:	ed 2d       	mov	r30, r13
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	ee 0f       	add	r30, r30
     5dc:	ff 1f       	adc	r31, r31
     5de:	ec 5f       	subi	r30, 0xFC	; 252
     5e0:	fc 4f       	sbci	r31, 0xFC	; 252
     5e2:	e0 80       	ld	r14, Z
     5e4:	f1 80       	ldd	r15, Z+1	; 0x01
	if (*path == '/') {
     5e6:	f5 01       	movw	r30, r10
     5e8:	80 81       	ld	r24, Z
     5ea:	8f 32       	cpi	r24, 0x2F	; 47
     5ec:	b9 f4       	brne	.+46     	; 0x61c <_ZN2op7opendirEPKc+0x124>
		dir->orig = fs->rootAddr();
     5ee:	a0 91 0d 03 	lds	r26, 0x030D
     5f2:	b0 91 0e 03 	lds	r27, 0x030E
     5f6:	ed 91       	ld	r30, X+
     5f8:	fc 91       	ld	r31, X
     5fa:	11 97       	sbiw	r26, 0x01	; 1
     5fc:	01 90       	ld	r0, Z+
     5fe:	f0 81       	ld	r31, Z
     600:	e0 2d       	mov	r30, r0
     602:	cd 01       	movw	r24, r26
     604:	09 95       	icall
     606:	d7 01       	movw	r26, r14
     608:	11 96       	adiw	r26, 0x01	; 1
     60a:	6d 93       	st	X+, r22
     60c:	7d 93       	st	X+, r23
     60e:	8d 93       	st	X+, r24
     610:	9c 93       	st	X, r25
     612:	14 97       	sbiw	r26, 0x04	; 4
		path++;
     614:	08 94       	sec
     616:	a1 1c       	adc	r10, r1
     618:	b1 1c       	adc	r11, r1
     61a:	0d c0       	rjmp	.+26     	; 0x636 <_ZN2op7opendirEPKc+0x13e>
	} else
		dir->orig = __current_dir__;
     61c:	80 91 08 03 	lds	r24, 0x0308
     620:	90 91 09 03 	lds	r25, 0x0309
     624:	a0 91 0a 03 	lds	r26, 0x030A
     628:	b0 91 0b 03 	lds	r27, 0x030B
     62c:	f7 01       	movw	r30, r14
     62e:	81 83       	std	Z+1, r24	; 0x01
     630:	92 83       	std	Z+2, r25	; 0x02
     632:	a3 83       	std	Z+3, r26	; 0x03
     634:	b4 83       	std	Z+4, r27	; 0x04
}

void op::rewinddir(DIR *dir)
{
	dir->addr = dir->orig;
	dir->offset = 0;
     636:	4e 01       	movw	r8, r28
     638:	08 94       	sec
     63a:	81 1c       	adc	r8, r1
     63c:	91 1c       	adc	r9, r1
		dir->orig = __current_dir__;
nextlevel:
	rewinddir(dir);
	char buff[256];
	uint8_t i;
	for (i = 0; i < 255 && *path != '\0' && *path != '/'; path++, i++)
     63e:	61 2c       	mov	r6, r1
     640:	31 e0       	ldi	r19, 0x01	; 1
     642:	73 2e       	mov	r7, r19
     644:	6c 0e       	add	r6, r28
     646:	7d 1e       	adc	r7, r29
	return ent;
}

void op::rewinddir(DIR *dir)
{
	dir->addr = dir->orig;
     648:	f7 01       	movw	r30, r14
     64a:	81 81       	ldd	r24, Z+1	; 0x01
     64c:	92 81       	ldd	r25, Z+2	; 0x02
     64e:	a3 81       	ldd	r26, Z+3	; 0x03
     650:	b4 81       	ldd	r27, Z+4	; 0x04
     652:	85 83       	std	Z+5, r24	; 0x05
     654:	96 83       	std	Z+6, r25	; 0x06
     656:	a7 83       	std	Z+7, r26	; 0x07
     658:	b0 87       	std	Z+8, r27	; 0x08
	dir->offset = 0;
     65a:	d7 01       	movw	r26, r14
     65c:	19 96       	adiw	r26, 0x09	; 9
     65e:	1d 92       	st	X+, r1
     660:	1d 92       	st	X+, r1
     662:	1d 92       	st	X+, r1
     664:	1c 92       	st	X, r1
     666:	1c 97       	sbiw	r26, 0x0c	; 12
     668:	f4 01       	movw	r30, r8
     66a:	65 01       	movw	r12, r10
     66c:	09 c0       	rjmp	.+18     	; 0x680 <_ZN2op7opendirEPKc+0x188>
nextlevel:
	rewinddir(dir);
	char buff[256];
	uint8_t i;
	for (i = 0; i < 255 && *path != '\0' && *path != '/'; path++, i++)
		buff[i] = *path;
     66e:	81 93       	st	Z+, r24
		dir->orig = __current_dir__;
nextlevel:
	rewinddir(dir);
	char buff[256];
	uint8_t i;
	for (i = 0; i < 255 && *path != '\0' && *path != '/'; path++, i++)
     670:	08 94       	sec
     672:	c1 1c       	adc	r12, r1
     674:	d1 1c       	adc	r13, r1
     676:	e6 15       	cp	r30, r6
     678:	f7 05       	cpc	r31, r7
     67a:	11 f4       	brne	.+4      	; 0x680 <_ZN2op7opendirEPKc+0x188>
     67c:	9f ef       	ldi	r25, 0xFF	; 255
     67e:	08 c0       	rjmp	.+16     	; 0x690 <_ZN2op7opendirEPKc+0x198>
     680:	9c 2d       	mov	r25, r12
     682:	9a 19       	sub	r25, r10
     684:	d6 01       	movw	r26, r12
     686:	8c 91       	ld	r24, X
     688:	88 23       	and	r24, r24
     68a:	11 f0       	breq	.+4      	; 0x690 <_ZN2op7opendirEPKc+0x198>
     68c:	8f 32       	cpi	r24, 0x2F	; 47
     68e:	79 f7       	brne	.-34     	; 0x66e <_ZN2op7opendirEPKc+0x176>
		buff[i] = *path;
	if (*path == '/')
     690:	f6 01       	movw	r30, r12
     692:	80 81       	ld	r24, Z
     694:	8f 32       	cpi	r24, 0x2F	; 47
     696:	19 f4       	brne	.+6      	; 0x69e <_ZN2op7opendirEPKc+0x1a6>
		path++;
     698:	08 94       	sec
     69a:	c1 1c       	adc	r12, r1
     69c:	d1 1c       	adc	r13, r1
	if (i == 255) {
     69e:	9f 3f       	cpi	r25, 0xFF	; 255
     6a0:	79 f0       	breq	.+30     	; 0x6c0 <_ZN2op7opendirEPKc+0x1c8>
		closedir(dir);
		errno = ENOENT;
		return NULL;
	}
	if (i == 0) {
     6a2:	99 23       	and	r25, r25
     6a4:	19 f4       	brne	.+6      	; 0x6ac <_ZN2op7opendirEPKc+0x1b4>
		errno = 0;
     6a6:	10 92 0f 03 	sts	0x030F, r1
     6aa:	30 c0       	rjmp	.+96     	; 0x70c <_ZN2op7opendirEPKc+0x214>
		return dir;
	}
	buff[i] = '\0';
     6ac:	f4 01       	movw	r30, r8
     6ae:	e9 0f       	add	r30, r25
     6b0:	f1 1d       	adc	r31, r1
     6b2:	10 82       	st	Z, r1
readent:
	struct dirent *ent = readdir(dir);
     6b4:	c7 01       	movw	r24, r14
     6b6:	0e 94 09 02 	call	0x412	; 0x412 <_ZN2op7readdirEP9dirstream>
     6ba:	8c 01       	movw	r16, r24
	if (ent == NULL) {
     6bc:	00 97       	sbiw	r24, 0x00	; 0
     6be:	29 f4       	brne	.+10     	; 0x6ca <_ZN2op7opendirEPKc+0x1d2>
		closedir(dir);
     6c0:	c7 01       	movw	r24, r14
     6c2:	0e 94 39 02 	call	0x472	; 0x472 <_ZN2op8closedirEP9dirstream>
		errno = ENOENT;
     6c6:	85 e0       	ldi	r24, 0x05	; 5
     6c8:	7d cf       	rjmp	.-262    	; 0x5c4 <_ZN2op7opendirEPKc+0xcc>
		return NULL;
	}
	if (strcasecmp(buff, ent->d_name) != 0)
     6ca:	c4 01       	movw	r24, r8
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <strcasecmp>
     6d2:	89 2b       	or	r24, r25
     6d4:	79 f7       	brne	.-34     	; 0x6b4 <_ZN2op7opendirEPKc+0x1bc>
		goto readent;
	if (!(ent->d_type & IS_DIR)) {
     6d6:	00 50       	subi	r16, 0x00	; 0
     6d8:	1f 4f       	sbci	r17, 0xFF	; 255
     6da:	d8 01       	movw	r26, r16
     6dc:	8c 91       	ld	r24, X
     6de:	00 50       	subi	r16, 0x00	; 0
     6e0:	11 40       	sbci	r17, 0x01	; 1
     6e2:	84 fd       	sbrc	r24, 4
     6e4:	05 c0       	rjmp	.+10     	; 0x6f0 <_ZN2op7opendirEPKc+0x1f8>
		closedir(dir);
     6e6:	c7 01       	movw	r24, r14
     6e8:	0e 94 39 02 	call	0x472	; 0x472 <_ZN2op8closedirEP9dirstream>
		errno = ENOTDIR;
     6ec:	84 e0       	ldi	r24, 0x04	; 4
     6ee:	6a cf       	rjmp	.-300    	; 0x5c4 <_ZN2op7opendirEPKc+0xcc>
		return NULL;
	}
	dir->orig = ent->d_addr;
     6f0:	0b 5f       	subi	r16, 0xFB	; 251
     6f2:	1e 4f       	sbci	r17, 0xFE	; 254
     6f4:	f8 01       	movw	r30, r16
     6f6:	80 81       	ld	r24, Z
     6f8:	91 81       	ldd	r25, Z+1	; 0x01
     6fa:	a2 81       	ldd	r26, Z+2	; 0x02
     6fc:	b3 81       	ldd	r27, Z+3	; 0x03
     6fe:	f7 01       	movw	r30, r14
     700:	81 83       	std	Z+1, r24	; 0x01
     702:	92 83       	std	Z+2, r25	; 0x02
     704:	a3 83       	std	Z+3, r26	; 0x03
     706:	b4 83       	std	Z+4, r27	; 0x04
     708:	56 01       	movw	r10, r12
     70a:	9e cf       	rjmp	.-196    	; 0x648 <_ZN2op7opendirEPKc+0x150>
	goto nextlevel;
}
     70c:	c7 01       	movw	r24, r14
     70e:	c0 50       	subi	r28, 0x00	; 0
     710:	df 4f       	sbci	r29, 0xFF	; 255
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	cf 91       	pop	r28
     71e:	df 91       	pop	r29
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	ff 90       	pop	r15
     726:	ef 90       	pop	r14
     728:	df 90       	pop	r13
     72a:	cf 90       	pop	r12
     72c:	bf 90       	pop	r11
     72e:	af 90       	pop	r10
     730:	9f 90       	pop	r9
     732:	8f 90       	pop	r8
     734:	7f 90       	pop	r7
     736:	6f 90       	pop	r6
     738:	08 95       	ret

0000073a <_ZNK4fs_t8rootAddrEv>:

class fs_t
{
public:
	fs_t(void) {deactivate();}
	virtual inline uint32_t rootAddr(void) const {return 0;}
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	08 95       	ret

00000744 <_ZN4fs_t12readDirEntryEP9dirstreamP6dirent>:
	virtual inline bool readDirEntry(DIR *dir, struct dirent *ent) {return false;}
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	08 95       	ret

00000748 <_ZN4fs_t12readFileInfoEPKcP6file_t>:
	virtual inline bool readFileInfo(const char *path, file_t *file) {return false;}
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	08 95       	ret

0000074c <_ZN4fs_t8readCharEv>:
	virtual inline int readChar(void) {return -1;}
     74c:	8f ef       	ldi	r24, 0xFF	; 255
     74e:	9f ef       	ldi	r25, 0xFF	; 255
     750:	08 95       	ret

00000752 <_ZN4fs_t9readCloseEv>:
	virtual inline void readClose(void) {}
     752:	08 95       	ret

00000754 <_ZN4fs_t8activateEP6__file>:
	virtual inline void activate(FILE *fp) {act = fp;}
     754:	fc 01       	movw	r30, r24
     756:	73 83       	std	Z+3, r23	; 0x03
     758:	62 83       	std	Z+2, r22	; 0x02
     75a:	08 95       	ret

0000075c <_ZN4fs_t9activatedEP6__file>:
	virtual inline bool activated(FILE *fp) {return act == fp;}
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	fc 01       	movw	r30, r24
     760:	82 81       	ldd	r24, Z+2	; 0x02
     762:	93 81       	ldd	r25, Z+3	; 0x03
     764:	86 17       	cp	r24, r22
     766:	97 07       	cpc	r25, r23
     768:	09 f4       	brne	.+2      	; 0x76c <_ZN4fs_t9activatedEP6__file+0x10>
     76a:	21 e0       	ldi	r18, 0x01	; 1
     76c:	82 2f       	mov	r24, r18
     76e:	08 95       	ret

00000770 <_ZN4fs_t10deactivateEv>:
	virtual inline void deactivate(void) {act = 0;}
     770:	fc 01       	movw	r30, r24
     772:	13 82       	std	Z+3, r1	; 0x03
     774:	12 82       	std	Z+2, r1	; 0x02
     776:	08 95       	ret

00000778 <_ZNK7fat32_t8rootAddrEv>:
	fat32_t(hw_t *hardware, const uint32_t addr);
	inline uint8_t err(void) const {return errno;}
	inline uint8_t chainRead(uint32_t clus = 0, uint32_t offset = 0);
	inline bool chainReadClose(void);

	virtual inline uint32_t rootAddr(void) const {return rootClus;}
     778:	fc 01       	movw	r30, r24
     77a:	60 89       	ldd	r22, Z+16	; 0x10
     77c:	71 89       	ldd	r23, Z+17	; 0x11
     77e:	82 89       	ldd	r24, Z+18	; 0x12
     780:	93 89       	ldd	r25, Z+19	; 0x13
     782:	08 95       	ret

00000784 <_ZN7fat32_t9chainReadEmm>:
	clus = hw->nextBytes(4);
	hw->streamStop(hw_t::Read);
	return clus;
}

inline uint8_t fat32_t::chainRead(uint32_t clus, uint32_t offset)
     784:	2f 92       	push	r2
     786:	3f 92       	push	r3
     788:	4f 92       	push	r4
     78a:	5f 92       	push	r5
     78c:	6f 92       	push	r6
     78e:	7f 92       	push	r7
     790:	8f 92       	push	r8
     792:	9f 92       	push	r9
     794:	af 92       	push	r10
     796:	bf 92       	push	r11
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	ec 01       	movw	r28, r24
     7aa:	3a 01       	movw	r6, r20
     7ac:	4b 01       	movw	r8, r22
     7ae:	18 01       	movw	r2, r16
     7b0:	29 01       	movw	r4, r18
     7b2:	68 8d       	ldd	r22, Y+24	; 0x18
     7b4:	79 8d       	ldd	r23, Y+25	; 0x19
     7b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     7b8:	9b 8d       	ldd	r25, Y+27	; 0x1b
{
	if (clus) {
     7ba:	61 14       	cp	r6, r1
     7bc:	71 04       	cpc	r7, r1
     7be:	81 04       	cpc	r8, r1
     7c0:	91 04       	cpc	r9, r1
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <_ZN7fat32_t9chainReadEmm+0x42>
     7c4:	57 c0       	rjmp	.+174    	; 0x874 <_ZN7fat32_t9chainReadEmm+0xf0>
		if (counter != 0xFF)
     7c6:	6f 3f       	cpi	r22, 0xFF	; 255
     7c8:	71 05       	cpc	r23, r1
     7ca:	81 05       	cpc	r24, r1
     7cc:	91 05       	cpc	r25, r1
     7ce:	61 f0       	breq	.+24     	; 0x7e8 <_ZN7fat32_t9chainReadEmm+0x64>
			hw->streamStop(hw_t::Read);
     7d0:	ec 81       	ldd	r30, Y+4	; 0x04
     7d2:	fd 81       	ldd	r31, Y+5	; 0x05
     7d4:	a0 81       	ld	r26, Z
     7d6:	b1 81       	ldd	r27, Z+1	; 0x01
     7d8:	12 96       	adiw	r26, 0x02	; 2
     7da:	2d 91       	ld	r18, X+
     7dc:	3c 91       	ld	r19, X
     7de:	13 97       	sbiw	r26, 0x03	; 3
     7e0:	cf 01       	movw	r24, r30
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	f9 01       	movw	r30, r18
     7e6:	09 95       	icall
		counter = 0;
     7e8:	18 8e       	std	Y+24, r1	; 0x18
     7ea:	19 8e       	std	Y+25, r1	; 0x19
     7ec:	1a 8e       	std	Y+26, r1	; 0x1a
     7ee:	1b 8e       	std	Y+27, r1	; 0x1b
		curClus = clus;
     7f0:	6c 8a       	std	Y+20, r6	; 0x14
     7f2:	7d 8a       	std	Y+21, r7	; 0x15
     7f4:	8e 8a       	std	Y+22, r8	; 0x16
     7f6:	9f 8a       	std	Y+23, r9	; 0x17
		hw->streamStart(hw_t::Read, clusAddr + secPerClus * (clus - 2) + offset / 512);
     7f8:	cc 80       	ldd	r12, Y+4	; 0x04
     7fa:	dd 80       	ldd	r13, Y+5	; 0x05
     7fc:	d6 01       	movw	r26, r12
     7fe:	ad 90       	ld	r10, X+
     800:	bc 90       	ld	r11, X
     802:	8e ef       	ldi	r24, 0xFE	; 254
     804:	9f ef       	ldi	r25, 0xFF	; 255
     806:	af ef       	ldi	r26, 0xFF	; 255
     808:	bf ef       	ldi	r27, 0xFF	; 255
     80a:	68 0e       	add	r6, r24
     80c:	79 1e       	adc	r7, r25
     80e:	8a 1e       	adc	r8, r26
     810:	9b 1e       	adc	r9, r27
     812:	2e 81       	ldd	r18, Y+6	; 0x06
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	50 e0       	ldi	r21, 0x00	; 0
     81a:	c4 01       	movw	r24, r8
     81c:	b3 01       	movw	r22, r6
     81e:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__mulsi3>
     822:	82 01       	movw	r16, r4
     824:	71 01       	movw	r14, r2
     826:	29 e0       	ldi	r18, 0x09	; 9
     828:	16 95       	lsr	r17
     82a:	07 95       	ror	r16
     82c:	f7 94       	ror	r15
     82e:	e7 94       	ror	r14
     830:	2a 95       	dec	r18
     832:	d1 f7       	brne	.-12     	; 0x828 <_ZN7fat32_t9chainReadEmm+0xa4>
     834:	e6 0e       	add	r14, r22
     836:	f7 1e       	adc	r15, r23
     838:	08 1f       	adc	r16, r24
     83a:	19 1f       	adc	r17, r25
     83c:	2c 85       	ldd	r18, Y+12	; 0x0c
     83e:	3d 85       	ldd	r19, Y+13	; 0x0d
     840:	4e 85       	ldd	r20, Y+14	; 0x0e
     842:	5f 85       	ldd	r21, Y+15	; 0x0f
     844:	2e 0d       	add	r18, r14
     846:	3f 1d       	adc	r19, r15
     848:	40 1f       	adc	r20, r16
     84a:	51 1f       	adc	r21, r17
     84c:	d5 01       	movw	r26, r10
     84e:	ed 91       	ld	r30, X+
     850:	fc 91       	ld	r31, X
     852:	c6 01       	movw	r24, r12
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	09 95       	icall
		hw->skipBytes(offset % 512);
     858:	ac 81       	ldd	r26, Y+4	; 0x04
     85a:	bd 81       	ldd	r27, Y+5	; 0x05
     85c:	ed 91       	ld	r30, X+
     85e:	fc 91       	ld	r31, X
     860:	11 97       	sbiw	r26, 0x01	; 1
     862:	b1 01       	movw	r22, r2
     864:	71 70       	andi	r23, 0x01	; 1
     866:	04 80       	ldd	r0, Z+4	; 0x04
     868:	f5 81       	ldd	r31, Z+5	; 0x05
     86a:	e0 2d       	mov	r30, r0
     86c:	cd 01       	movw	r24, r26
     86e:	09 95       	icall
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	a7 c0       	rjmp	.+334    	; 0x9c2 <_ZN7fat32_t9chainReadEmm+0x23e>
		return 0;
	}
	if (++counter % (secPerClus * 512) == 0) {
     874:	6f 5f       	subi	r22, 0xFF	; 255
     876:	7f 4f       	sbci	r23, 0xFF	; 255
     878:	8f 4f       	sbci	r24, 0xFF	; 255
     87a:	9f 4f       	sbci	r25, 0xFF	; 255
     87c:	68 8f       	std	Y+24, r22	; 0x18
     87e:	79 8f       	std	Y+25, r23	; 0x19
     880:	8a 8f       	std	Y+26, r24	; 0x1a
     882:	9b 8f       	std	Y+27, r25	; 0x1b
     884:	ee 81       	ldd	r30, Y+6	; 0x06
     886:	3e 2f       	mov	r19, r30
     888:	33 0f       	add	r19, r19
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	44 27       	eor	r20, r20
     88e:	37 fd       	sbrc	r19, 7
     890:	40 95       	com	r20
     892:	54 2f       	mov	r21, r20
     894:	0e 94 ae 18 	call	0x315c	; 0x315c <__udivmodsi4>
     898:	61 15       	cp	r22, r1
     89a:	71 05       	cpc	r23, r1
     89c:	81 05       	cpc	r24, r1
     89e:	91 05       	cpc	r25, r1
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <_ZN7fat32_t9chainReadEmm+0x120>
     8a2:	84 c0       	rjmp	.+264    	; 0x9ac <_ZN7fat32_t9chainReadEmm+0x228>
		hw->streamStop(hw_t::Read);
     8a4:	ac 81       	ldd	r26, Y+4	; 0x04
     8a6:	bd 81       	ldd	r27, Y+5	; 0x05
     8a8:	ed 91       	ld	r30, X+
     8aa:	fc 91       	ld	r31, X
     8ac:	11 97       	sbiw	r26, 0x01	; 1
     8ae:	02 80       	ldd	r0, Z+2	; 0x02
     8b0:	f3 81       	ldd	r31, Z+3	; 0x03
     8b2:	e0 2d       	mov	r30, r0
     8b4:	cd 01       	movw	r24, r26
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	09 95       	icall
	uint32_t FATAddr, clusAddr, rootClus, curClus, counter;
};

inline uint32_t fat32_t::findNextClus(uint32_t clus)
{
	hw->streamStart(hw_t::Read, FATAddr + clus * 4 / 512);
     8ba:	6c 81       	ldd	r22, Y+4	; 0x04
     8bc:	7d 81       	ldd	r23, Y+5	; 0x05
     8be:	ec 88       	ldd	r14, Y+20	; 0x14
     8c0:	fd 88       	ldd	r15, Y+21	; 0x15
     8c2:	0e 89       	ldd	r16, Y+22	; 0x16
     8c4:	1f 89       	ldd	r17, Y+23	; 0x17
     8c6:	92 e0       	ldi	r25, 0x02	; 2
     8c8:	ee 0c       	add	r14, r14
     8ca:	ff 1c       	adc	r15, r15
     8cc:	00 1f       	adc	r16, r16
     8ce:	11 1f       	adc	r17, r17
     8d0:	9a 95       	dec	r25
     8d2:	d1 f7       	brne	.-12     	; 0x8c8 <_ZN7fat32_t9chainReadEmm+0x144>
     8d4:	db 01       	movw	r26, r22
     8d6:	ed 91       	ld	r30, X+
     8d8:	fc 91       	ld	r31, X
     8da:	a8 01       	movw	r20, r16
     8dc:	97 01       	movw	r18, r14
     8de:	89 e0       	ldi	r24, 0x09	; 9
     8e0:	56 95       	lsr	r21
     8e2:	47 95       	ror	r20
     8e4:	37 95       	ror	r19
     8e6:	27 95       	ror	r18
     8e8:	8a 95       	dec	r24
     8ea:	d1 f7       	brne	.-12     	; 0x8e0 <_ZN7fat32_t9chainReadEmm+0x15c>
     8ec:	88 85       	ldd	r24, Y+8	; 0x08
     8ee:	99 85       	ldd	r25, Y+9	; 0x09
     8f0:	aa 85       	ldd	r26, Y+10	; 0x0a
     8f2:	bb 85       	ldd	r27, Y+11	; 0x0b
     8f4:	28 0f       	add	r18, r24
     8f6:	39 1f       	adc	r19, r25
     8f8:	4a 1f       	adc	r20, r26
     8fa:	5b 1f       	adc	r21, r27
     8fc:	01 90       	ld	r0, Z+
     8fe:	f0 81       	ld	r31, Z
     900:	e0 2d       	mov	r30, r0
     902:	cb 01       	movw	r24, r22
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	09 95       	icall
	hw->skipBytes((clus * 4) % 512);
     908:	ac 81       	ldd	r26, Y+4	; 0x04
     90a:	bd 81       	ldd	r27, Y+5	; 0x05
     90c:	ed 91       	ld	r30, X+
     90e:	fc 91       	ld	r31, X
     910:	11 97       	sbiw	r26, 0x01	; 1
     912:	8f ef       	ldi	r24, 0xFF	; 255
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	e8 22       	and	r14, r24
     918:	f9 22       	and	r15, r25
     91a:	04 80       	ldd	r0, Z+4	; 0x04
     91c:	f5 81       	ldd	r31, Z+5	; 0x05
     91e:	e0 2d       	mov	r30, r0
     920:	cd 01       	movw	r24, r26
     922:	b7 01       	movw	r22, r14
     924:	09 95       	icall
	clus = hw->nextBytes(4);
     926:	ac 81       	ldd	r26, Y+4	; 0x04
     928:	bd 81       	ldd	r27, Y+5	; 0x05
     92a:	ed 91       	ld	r30, X+
     92c:	fc 91       	ld	r31, X
     92e:	11 97       	sbiw	r26, 0x01	; 1
     930:	00 84       	ldd	r0, Z+8	; 0x08
     932:	f1 85       	ldd	r31, Z+9	; 0x09
     934:	e0 2d       	mov	r30, r0
     936:	cd 01       	movw	r24, r26
     938:	64 e0       	ldi	r22, 0x04	; 4
     93a:	09 95       	icall
     93c:	7b 01       	movw	r14, r22
     93e:	8c 01       	movw	r16, r24
	hw->streamStop(hw_t::Read);
     940:	ac 81       	ldd	r26, Y+4	; 0x04
     942:	bd 81       	ldd	r27, Y+5	; 0x05
     944:	ed 91       	ld	r30, X+
     946:	fc 91       	ld	r31, X
     948:	11 97       	sbiw	r26, 0x01	; 1
     94a:	02 80       	ldd	r0, Z+2	; 0x02
     94c:	f3 81       	ldd	r31, Z+3	; 0x03
     94e:	e0 2d       	mov	r30, r0
     950:	cd 01       	movw	r24, r26
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	09 95       	icall
		hw->skipBytes(offset % 512);
		return 0;
	}
	if (++counter % (secPerClus * 512) == 0) {
		hw->streamStop(hw_t::Read);
		curClus = findNextClus(curClus);
     956:	ec 8a       	std	Y+20, r14	; 0x14
     958:	fd 8a       	std	Y+21, r15	; 0x15
     95a:	0e 8b       	std	Y+22, r16	; 0x16
     95c:	1f 8b       	std	Y+23, r17	; 0x17
		hw->streamStart(hw_t::Read, clusAddr + secPerClus * (curClus - 2));
     95e:	cc 80       	ldd	r12, Y+4	; 0x04
     960:	dd 80       	ldd	r13, Y+5	; 0x05
     962:	d6 01       	movw	r26, r12
     964:	ad 90       	ld	r10, X+
     966:	bc 90       	ld	r11, X
     968:	8e ef       	ldi	r24, 0xFE	; 254
     96a:	9f ef       	ldi	r25, 0xFF	; 255
     96c:	af ef       	ldi	r26, 0xFF	; 255
     96e:	bf ef       	ldi	r27, 0xFF	; 255
     970:	e8 0e       	add	r14, r24
     972:	f9 1e       	adc	r15, r25
     974:	0a 1f       	adc	r16, r26
     976:	1b 1f       	adc	r17, r27
     978:	2e 81       	ldd	r18, Y+6	; 0x06
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	40 e0       	ldi	r20, 0x00	; 0
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	c8 01       	movw	r24, r16
     982:	b7 01       	movw	r22, r14
     984:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__mulsi3>
     988:	2c 85       	ldd	r18, Y+12	; 0x0c
     98a:	3d 85       	ldd	r19, Y+13	; 0x0d
     98c:	4e 85       	ldd	r20, Y+14	; 0x0e
     98e:	5f 85       	ldd	r21, Y+15	; 0x0f
     990:	26 0f       	add	r18, r22
     992:	37 1f       	adc	r19, r23
     994:	48 1f       	adc	r20, r24
     996:	59 1f       	adc	r21, r25
     998:	d5 01       	movw	r26, r10
     99a:	ed 91       	ld	r30, X+
     99c:	fc 91       	ld	r31, X
     99e:	c6 01       	movw	r24, r12
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	09 95       	icall
		counter = 0;
     9a4:	18 8e       	std	Y+24, r1	; 0x18
     9a6:	19 8e       	std	Y+25, r1	; 0x19
     9a8:	1a 8e       	std	Y+26, r1	; 0x1a
     9aa:	1b 8e       	std	Y+27, r1	; 0x1b
	}
	return hw->nextByte();
     9ac:	ec 81       	ldd	r30, Y+4	; 0x04
     9ae:	fd 81       	ldd	r31, Y+5	; 0x05
     9b0:	a0 81       	ld	r26, Z
     9b2:	b1 81       	ldd	r27, Z+1	; 0x01
     9b4:	16 96       	adiw	r26, 0x06	; 6
     9b6:	2d 91       	ld	r18, X+
     9b8:	3c 91       	ld	r19, X
     9ba:	17 97       	sbiw	r26, 0x07	; 7
     9bc:	cf 01       	movw	r24, r30
     9be:	f9 01       	movw	r30, r18
     9c0:	09 95       	icall
}
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	ff 90       	pop	r15
     9cc:	ef 90       	pop	r14
     9ce:	df 90       	pop	r13
     9d0:	cf 90       	pop	r12
     9d2:	bf 90       	pop	r11
     9d4:	af 90       	pop	r10
     9d6:	9f 90       	pop	r9
     9d8:	8f 90       	pop	r8
     9da:	7f 90       	pop	r7
     9dc:	6f 90       	pop	r6
     9de:	5f 90       	pop	r5
     9e0:	4f 90       	pop	r4
     9e2:	3f 90       	pop	r3
     9e4:	2f 90       	pop	r2
     9e6:	08 95       	ret

000009e8 <_ZN7fat32_t8readCharEv>:
	inline bool chainReadClose(void);

	virtual inline uint32_t rootAddr(void) const {return rootClus;}
	virtual bool readDirEntry(DIR *dir, struct dirent *ent);
	virtual bool readFileInfo(const char *path, file_t *file);
	virtual inline int readChar(void) {return chainRead();}
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	00 e0       	ldi	r16, 0x00	; 0
     9f6:	10 e0       	ldi	r17, 0x00	; 0
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	08 95       	ret

00000a08 <_ZN7fat32_t14chainReadCloseEv>:
		counter = 0;
	}
	return hw->nextByte();
}

inline bool fat32_t::chainReadClose(void)
     a08:	fc 01       	movw	r30, r24
{
	if (counter == 0xFF)
     a0a:	80 8d       	ldd	r24, Z+24	; 0x18
     a0c:	91 8d       	ldd	r25, Z+25	; 0x19
     a0e:	a2 8d       	ldd	r26, Z+26	; 0x1a
     a10:	b3 8d       	ldd	r27, Z+27	; 0x1b
     a12:	8f 3f       	cpi	r24, 0xFF	; 255
     a14:	91 05       	cpc	r25, r1
     a16:	a1 05       	cpc	r26, r1
     a18:	b1 05       	cpc	r27, r1
     a1a:	11 f4       	brne	.+4      	; 0xa20 <_ZN7fat32_t14chainReadCloseEv+0x18>
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	08 95       	ret
		return true;
	counter = 0xFF;
     a20:	8f ef       	ldi	r24, 0xFF	; 255
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	a0 e0       	ldi	r26, 0x00	; 0
     a26:	b0 e0       	ldi	r27, 0x00	; 0
     a28:	80 8f       	std	Z+24, r24	; 0x18
     a2a:	91 8f       	std	Z+25, r25	; 0x19
     a2c:	a2 8f       	std	Z+26, r26	; 0x1a
     a2e:	b3 8f       	std	Z+27, r27	; 0x1b
	return hw->streamStop(hw_t::Read);
     a30:	a4 81       	ldd	r26, Z+4	; 0x04
     a32:	b5 81       	ldd	r27, Z+5	; 0x05
     a34:	ed 91       	ld	r30, X+
     a36:	fc 91       	ld	r31, X
     a38:	11 97       	sbiw	r26, 0x01	; 1
     a3a:	02 80       	ldd	r0, Z+2	; 0x02
     a3c:	f3 81       	ldd	r31, Z+3	; 0x03
     a3e:	e0 2d       	mov	r30, r0
     a40:	cd 01       	movw	r24, r26
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	09 95       	icall
}
     a46:	08 95       	ret

00000a48 <_ZN7fat32_t9readCloseEv>:

	virtual inline uint32_t rootAddr(void) const {return rootClus;}
	virtual bool readDirEntry(DIR *dir, struct dirent *ent);
	virtual bool readFileInfo(const char *path, file_t *file);
	virtual inline int readChar(void) {return chainRead();}
	virtual inline void readClose(void) {chainReadClose();}
     a48:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN7fat32_t14chainReadCloseEv>
     a4c:	08 95       	ret

00000a4e <_ZN7fat32_t10deactivateEv>:
	if (!hw->activated(this))
		hw->activate(this);
	chainRead(file->addr, file->offset);
}

inline void fat32_t::deactivate(void)
     a4e:	fc 01       	movw	r30, r24
     a50:	13 82       	std	Z+3, r1	; 0x03
     a52:	12 82       	std	Z+2, r1	; 0x02
{
	fs_t::deactivate();
	chainReadClose();
     a54:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN7fat32_t14chainReadCloseEv>
}
     a58:	08 95       	ret

00000a5a <_ZN7fat32_tC2EP4hw_tm>:
#include <string.h>
#include "fat32.h"
#include "errno.h"
#include "conv.h"

fat32_t::fat32_t(hw_t *hardware, const uint32_t addr) : fs_t()
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	ec 01       	movw	r28, r24
     a68:	db 01       	movw	r26, r22
     a6a:	79 01       	movw	r14, r18
     a6c:	8a 01       	movw	r16, r20
     a6e:	1b 82       	std	Y+3, r1	; 0x03
     a70:	1a 82       	std	Y+2, r1	; 0x02
     a72:	85 e0       	ldi	r24, 0x05	; 5
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	99 83       	std	Y+1, r25	; 0x01
     a78:	88 83       	st	Y, r24
{
	hw = hardware;
     a7a:	7d 83       	std	Y+5, r23	; 0x05
     a7c:	6c 83       	std	Y+4, r22	; 0x04
	if (!hw->streamStart(hw_t::Read, addr)) {
     a7e:	ed 91       	ld	r30, X+
     a80:	fc 91       	ld	r31, X
     a82:	01 90       	ld	r0, Z+
     a84:	f0 81       	ld	r31, Z
     a86:	e0 2d       	mov	r30, r0
     a88:	cb 01       	movw	r24, r22
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	09 95       	icall
     a8e:	88 23       	and	r24, r24
     a90:	11 f4       	brne	.+4      	; 0xa96 <_ZN7fat32_tC2EP4hw_tm+0x3c>
		errno = 1;
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	c3 c0       	rjmp	.+390    	; 0xc1c <_ZN7fat32_tC2EP4hw_tm+0x1c2>
		return;
	}
	hw->skipBytes(0x0B);
     a96:	ac 81       	ldd	r26, Y+4	; 0x04
     a98:	bd 81       	ldd	r27, Y+5	; 0x05
     a9a:	ed 91       	ld	r30, X+
     a9c:	fc 91       	ld	r31, X
     a9e:	11 97       	sbiw	r26, 0x01	; 1
     aa0:	04 80       	ldd	r0, Z+4	; 0x04
     aa2:	f5 81       	ldd	r31, Z+5	; 0x05
     aa4:	e0 2d       	mov	r30, r0
     aa6:	cd 01       	movw	r24, r26
     aa8:	6b e0       	ldi	r22, 0x0B	; 11
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	09 95       	icall
	if (hw->nextBytes(2) != 512) {			// Bytes per sector
     aae:	ac 81       	ldd	r26, Y+4	; 0x04
     ab0:	bd 81       	ldd	r27, Y+5	; 0x05
     ab2:	ed 91       	ld	r30, X+
     ab4:	fc 91       	ld	r31, X
     ab6:	11 97       	sbiw	r26, 0x01	; 1
     ab8:	00 84       	ldd	r0, Z+8	; 0x08
     aba:	f1 85       	ldd	r31, Z+9	; 0x09
     abc:	e0 2d       	mov	r30, r0
     abe:	cd 01       	movw	r24, r26
     ac0:	62 e0       	ldi	r22, 0x02	; 2
     ac2:	09 95       	icall
     ac4:	60 50       	subi	r22, 0x00	; 0
     ac6:	72 40       	sbci	r23, 0x02	; 2
     ac8:	80 40       	sbci	r24, 0x00	; 0
     aca:	90 40       	sbci	r25, 0x00	; 0
     acc:	11 f0       	breq	.+4      	; 0xad2 <_ZN7fat32_tC2EP4hw_tm+0x78>
		errno = 2;
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	2b c0       	rjmp	.+86     	; 0xb28 <_ZN7fat32_tC2EP4hw_tm+0xce>
		goto ret;
	}
	secPerClus = hw->nextByte();			// Sectors per cluster
     ad2:	ac 81       	ldd	r26, Y+4	; 0x04
     ad4:	bd 81       	ldd	r27, Y+5	; 0x05
     ad6:	ed 91       	ld	r30, X+
     ad8:	fc 91       	ld	r31, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	06 80       	ldd	r0, Z+6	; 0x06
     ade:	f7 81       	ldd	r31, Z+7	; 0x07
     ae0:	e0 2d       	mov	r30, r0
     ae2:	cd 01       	movw	r24, r26
     ae4:	09 95       	icall
     ae6:	8e 83       	std	Y+6, r24	; 0x06
	FATAddr = addr + hw->nextBytes(2);		// Number of reserved sectors
     ae8:	ac 81       	ldd	r26, Y+4	; 0x04
     aea:	bd 81       	ldd	r27, Y+5	; 0x05
     aec:	ed 91       	ld	r30, X+
     aee:	fc 91       	ld	r31, X
     af0:	11 97       	sbiw	r26, 0x01	; 1
     af2:	00 84       	ldd	r0, Z+8	; 0x08
     af4:	f1 85       	ldd	r31, Z+9	; 0x09
     af6:	e0 2d       	mov	r30, r0
     af8:	cd 01       	movw	r24, r26
     afa:	62 e0       	ldi	r22, 0x02	; 2
     afc:	09 95       	icall
     afe:	6e 0d       	add	r22, r14
     b00:	7f 1d       	adc	r23, r15
     b02:	80 1f       	adc	r24, r16
     b04:	91 1f       	adc	r25, r17
     b06:	68 87       	std	Y+8, r22	; 0x08
     b08:	79 87       	std	Y+9, r23	; 0x09
     b0a:	8a 87       	std	Y+10, r24	; 0x0a
     b0c:	9b 87       	std	Y+11, r25	; 0x0b
	if (hw->nextByte() != 2) {			// Number of FATs
     b0e:	ac 81       	ldd	r26, Y+4	; 0x04
     b10:	bd 81       	ldd	r27, Y+5	; 0x05
     b12:	ed 91       	ld	r30, X+
     b14:	fc 91       	ld	r31, X
     b16:	11 97       	sbiw	r26, 0x01	; 1
     b18:	06 80       	ldd	r0, Z+6	; 0x06
     b1a:	f7 81       	ldd	r31, Z+7	; 0x07
     b1c:	e0 2d       	mov	r30, r0
     b1e:	cd 01       	movw	r24, r26
     b20:	09 95       	icall
     b22:	82 30       	cpi	r24, 0x02	; 2
     b24:	19 f0       	breq	.+6      	; 0xb2c <_ZN7fat32_tC2EP4hw_tm+0xd2>
		errno = 3;
     b26:	83 e0       	ldi	r24, 0x03	; 3
     b28:	8f 83       	std	Y+7, r24	; 0x07
     b2a:	69 c0       	rjmp	.+210    	; 0xbfe <_ZN7fat32_tC2EP4hw_tm+0x1a4>
		goto ret;
	}
	hw->skipBytes(0x24 - 0x10 - 1);
     b2c:	ac 81       	ldd	r26, Y+4	; 0x04
     b2e:	bd 81       	ldd	r27, Y+5	; 0x05
     b30:	ed 91       	ld	r30, X+
     b32:	fc 91       	ld	r31, X
     b34:	11 97       	sbiw	r26, 0x01	; 1
     b36:	04 80       	ldd	r0, Z+4	; 0x04
     b38:	f5 81       	ldd	r31, Z+5	; 0x05
     b3a:	e0 2d       	mov	r30, r0
     b3c:	cd 01       	movw	r24, r26
     b3e:	63 e1       	ldi	r22, 0x13	; 19
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	09 95       	icall
	clusAddr = FATAddr + 2 * hw->nextBytes(4);	// Sectors per FAT
     b44:	e8 84       	ldd	r14, Y+8	; 0x08
     b46:	f9 84       	ldd	r15, Y+9	; 0x09
     b48:	0a 85       	ldd	r16, Y+10	; 0x0a
     b4a:	1b 85       	ldd	r17, Y+11	; 0x0b
     b4c:	ac 81       	ldd	r26, Y+4	; 0x04
     b4e:	bd 81       	ldd	r27, Y+5	; 0x05
     b50:	ed 91       	ld	r30, X+
     b52:	fc 91       	ld	r31, X
     b54:	11 97       	sbiw	r26, 0x01	; 1
     b56:	00 84       	ldd	r0, Z+8	; 0x08
     b58:	f1 85       	ldd	r31, Z+9	; 0x09
     b5a:	e0 2d       	mov	r30, r0
     b5c:	cd 01       	movw	r24, r26
     b5e:	64 e0       	ldi	r22, 0x04	; 4
     b60:	09 95       	icall
     b62:	66 0f       	add	r22, r22
     b64:	77 1f       	adc	r23, r23
     b66:	88 1f       	adc	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	e6 0e       	add	r14, r22
     b6c:	f7 1e       	adc	r15, r23
     b6e:	08 1f       	adc	r16, r24
     b70:	19 1f       	adc	r17, r25
     b72:	ec 86       	std	Y+12, r14	; 0x0c
     b74:	fd 86       	std	Y+13, r15	; 0x0d
     b76:	0e 87       	std	Y+14, r16	; 0x0e
     b78:	1f 87       	std	Y+15, r17	; 0x0f
	hw->skipBytes(0x2C - (0x24 + 3) - 1);
     b7a:	ac 81       	ldd	r26, Y+4	; 0x04
     b7c:	bd 81       	ldd	r27, Y+5	; 0x05
     b7e:	ed 91       	ld	r30, X+
     b80:	fc 91       	ld	r31, X
     b82:	11 97       	sbiw	r26, 0x01	; 1
     b84:	04 80       	ldd	r0, Z+4	; 0x04
     b86:	f5 81       	ldd	r31, Z+5	; 0x05
     b88:	e0 2d       	mov	r30, r0
     b8a:	cd 01       	movw	r24, r26
     b8c:	64 e0       	ldi	r22, 0x04	; 4
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	09 95       	icall
	rootClus = hw->nextBytes(4);			// Root directory first cluster
     b92:	ac 81       	ldd	r26, Y+4	; 0x04
     b94:	bd 81       	ldd	r27, Y+5	; 0x05
     b96:	ed 91       	ld	r30, X+
     b98:	fc 91       	ld	r31, X
     b9a:	11 97       	sbiw	r26, 0x01	; 1
     b9c:	00 84       	ldd	r0, Z+8	; 0x08
     b9e:	f1 85       	ldd	r31, Z+9	; 0x09
     ba0:	e0 2d       	mov	r30, r0
     ba2:	cd 01       	movw	r24, r26
     ba4:	64 e0       	ldi	r22, 0x04	; 4
     ba6:	09 95       	icall
     ba8:	68 8b       	std	Y+16, r22	; 0x10
     baa:	79 8b       	std	Y+17, r23	; 0x11
     bac:	8a 8b       	std	Y+18, r24	; 0x12
     bae:	9b 8b       	std	Y+19, r25	; 0x13
	hw->skipBytes(0x1FE - (0x2C + 3) - 1);
     bb0:	ac 81       	ldd	r26, Y+4	; 0x04
     bb2:	bd 81       	ldd	r27, Y+5	; 0x05
     bb4:	ed 91       	ld	r30, X+
     bb6:	fc 91       	ld	r31, X
     bb8:	11 97       	sbiw	r26, 0x01	; 1
     bba:	04 80       	ldd	r0, Z+4	; 0x04
     bbc:	f5 81       	ldd	r31, Z+5	; 0x05
     bbe:	e0 2d       	mov	r30, r0
     bc0:	cd 01       	movw	r24, r26
     bc2:	6e ec       	ldi	r22, 0xCE	; 206
     bc4:	71 e0       	ldi	r23, 0x01	; 1
     bc6:	09 95       	icall
	if (hw->nextBytes(2) != 0xAA55) {		// Signature
     bc8:	ac 81       	ldd	r26, Y+4	; 0x04
     bca:	bd 81       	ldd	r27, Y+5	; 0x05
     bcc:	ed 91       	ld	r30, X+
     bce:	fc 91       	ld	r31, X
     bd0:	11 97       	sbiw	r26, 0x01	; 1
     bd2:	00 84       	ldd	r0, Z+8	; 0x08
     bd4:	f1 85       	ldd	r31, Z+9	; 0x09
     bd6:	e0 2d       	mov	r30, r0
     bd8:	cd 01       	movw	r24, r26
     bda:	62 e0       	ldi	r22, 0x02	; 2
     bdc:	09 95       	icall
     bde:	65 55       	subi	r22, 0x55	; 85
     be0:	7a 4a       	sbci	r23, 0xAA	; 170
     be2:	80 40       	sbci	r24, 0x00	; 0
     be4:	90 40       	sbci	r25, 0x00	; 0
     be6:	11 f0       	breq	.+4      	; 0xbec <_ZN7fat32_tC2EP4hw_tm+0x192>
		errno = 4;
     be8:	84 e0       	ldi	r24, 0x04	; 4
     bea:	9e cf       	rjmp	.-196    	; 0xb28 <_ZN7fat32_tC2EP4hw_tm+0xce>
		goto ret;
	}
	errno = 0;
     bec:	1f 82       	std	Y+7, r1	; 0x07
	counter = 0xFF;
     bee:	8f ef       	ldi	r24, 0xFF	; 255
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	a0 e0       	ldi	r26, 0x00	; 0
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	88 8f       	std	Y+24, r24	; 0x18
     bf8:	99 8f       	std	Y+25, r25	; 0x19
     bfa:	aa 8f       	std	Y+26, r26	; 0x1a
     bfc:	bb 8f       	std	Y+27, r27	; 0x1b
ret:
	if (!hw->streamStop(hw_t::Read))
     bfe:	ec 81       	ldd	r30, Y+4	; 0x04
     c00:	fd 81       	ldd	r31, Y+5	; 0x05
     c02:	a0 81       	ld	r26, Z
     c04:	b1 81       	ldd	r27, Z+1	; 0x01
     c06:	12 96       	adiw	r26, 0x02	; 2
     c08:	2d 91       	ld	r18, X+
     c0a:	3c 91       	ld	r19, X
     c0c:	13 97       	sbiw	r26, 0x03	; 3
     c0e:	cf 01       	movw	r24, r30
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	f9 01       	movw	r30, r18
     c14:	09 95       	icall
     c16:	88 23       	and	r24, r24
     c18:	11 f4       	brne	.+4      	; 0xc1e <_ZN7fat32_tC2EP4hw_tm+0x1c4>
		errno = 5;
     c1a:	85 e0       	ldi	r24, 0x05	; 5
     c1c:	8f 83       	std	Y+7, r24	; 0x07
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	08 95       	ret

00000c2c <_ZN7fat32_tC1EP4hw_tm>:
#include <string.h>
#include "fat32.h"
#include "errno.h"
#include "conv.h"

fat32_t::fat32_t(hw_t *hardware, const uint32_t addr) : fs_t()
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	ec 01       	movw	r28, r24
     c3a:	db 01       	movw	r26, r22
     c3c:	79 01       	movw	r14, r18
     c3e:	8a 01       	movw	r16, r20
     c40:	1b 82       	std	Y+3, r1	; 0x03
     c42:	1a 82       	std	Y+2, r1	; 0x02
     c44:	85 e0       	ldi	r24, 0x05	; 5
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	99 83       	std	Y+1, r25	; 0x01
     c4a:	88 83       	st	Y, r24
{
	hw = hardware;
     c4c:	7d 83       	std	Y+5, r23	; 0x05
     c4e:	6c 83       	std	Y+4, r22	; 0x04
	if (!hw->streamStart(hw_t::Read, addr)) {
     c50:	ed 91       	ld	r30, X+
     c52:	fc 91       	ld	r31, X
     c54:	01 90       	ld	r0, Z+
     c56:	f0 81       	ld	r31, Z
     c58:	e0 2d       	mov	r30, r0
     c5a:	cb 01       	movw	r24, r22
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	09 95       	icall
     c60:	88 23       	and	r24, r24
     c62:	11 f4       	brne	.+4      	; 0xc68 <_ZN7fat32_tC1EP4hw_tm+0x3c>
		errno = 1;
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	c3 c0       	rjmp	.+390    	; 0xdee <_ZN7fat32_tC1EP4hw_tm+0x1c2>
		return;
	}
	hw->skipBytes(0x0B);
     c68:	ac 81       	ldd	r26, Y+4	; 0x04
     c6a:	bd 81       	ldd	r27, Y+5	; 0x05
     c6c:	ed 91       	ld	r30, X+
     c6e:	fc 91       	ld	r31, X
     c70:	11 97       	sbiw	r26, 0x01	; 1
     c72:	04 80       	ldd	r0, Z+4	; 0x04
     c74:	f5 81       	ldd	r31, Z+5	; 0x05
     c76:	e0 2d       	mov	r30, r0
     c78:	cd 01       	movw	r24, r26
     c7a:	6b e0       	ldi	r22, 0x0B	; 11
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	09 95       	icall
	if (hw->nextBytes(2) != 512) {			// Bytes per sector
     c80:	ac 81       	ldd	r26, Y+4	; 0x04
     c82:	bd 81       	ldd	r27, Y+5	; 0x05
     c84:	ed 91       	ld	r30, X+
     c86:	fc 91       	ld	r31, X
     c88:	11 97       	sbiw	r26, 0x01	; 1
     c8a:	00 84       	ldd	r0, Z+8	; 0x08
     c8c:	f1 85       	ldd	r31, Z+9	; 0x09
     c8e:	e0 2d       	mov	r30, r0
     c90:	cd 01       	movw	r24, r26
     c92:	62 e0       	ldi	r22, 0x02	; 2
     c94:	09 95       	icall
     c96:	60 50       	subi	r22, 0x00	; 0
     c98:	72 40       	sbci	r23, 0x02	; 2
     c9a:	80 40       	sbci	r24, 0x00	; 0
     c9c:	90 40       	sbci	r25, 0x00	; 0
     c9e:	11 f0       	breq	.+4      	; 0xca4 <_ZN7fat32_tC1EP4hw_tm+0x78>
		errno = 2;
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	2b c0       	rjmp	.+86     	; 0xcfa <_ZN7fat32_tC1EP4hw_tm+0xce>
		goto ret;
	}
	secPerClus = hw->nextByte();			// Sectors per cluster
     ca4:	ac 81       	ldd	r26, Y+4	; 0x04
     ca6:	bd 81       	ldd	r27, Y+5	; 0x05
     ca8:	ed 91       	ld	r30, X+
     caa:	fc 91       	ld	r31, X
     cac:	11 97       	sbiw	r26, 0x01	; 1
     cae:	06 80       	ldd	r0, Z+6	; 0x06
     cb0:	f7 81       	ldd	r31, Z+7	; 0x07
     cb2:	e0 2d       	mov	r30, r0
     cb4:	cd 01       	movw	r24, r26
     cb6:	09 95       	icall
     cb8:	8e 83       	std	Y+6, r24	; 0x06
	FATAddr = addr + hw->nextBytes(2);		// Number of reserved sectors
     cba:	ac 81       	ldd	r26, Y+4	; 0x04
     cbc:	bd 81       	ldd	r27, Y+5	; 0x05
     cbe:	ed 91       	ld	r30, X+
     cc0:	fc 91       	ld	r31, X
     cc2:	11 97       	sbiw	r26, 0x01	; 1
     cc4:	00 84       	ldd	r0, Z+8	; 0x08
     cc6:	f1 85       	ldd	r31, Z+9	; 0x09
     cc8:	e0 2d       	mov	r30, r0
     cca:	cd 01       	movw	r24, r26
     ccc:	62 e0       	ldi	r22, 0x02	; 2
     cce:	09 95       	icall
     cd0:	6e 0d       	add	r22, r14
     cd2:	7f 1d       	adc	r23, r15
     cd4:	80 1f       	adc	r24, r16
     cd6:	91 1f       	adc	r25, r17
     cd8:	68 87       	std	Y+8, r22	; 0x08
     cda:	79 87       	std	Y+9, r23	; 0x09
     cdc:	8a 87       	std	Y+10, r24	; 0x0a
     cde:	9b 87       	std	Y+11, r25	; 0x0b
	if (hw->nextByte() != 2) {			// Number of FATs
     ce0:	ac 81       	ldd	r26, Y+4	; 0x04
     ce2:	bd 81       	ldd	r27, Y+5	; 0x05
     ce4:	ed 91       	ld	r30, X+
     ce6:	fc 91       	ld	r31, X
     ce8:	11 97       	sbiw	r26, 0x01	; 1
     cea:	06 80       	ldd	r0, Z+6	; 0x06
     cec:	f7 81       	ldd	r31, Z+7	; 0x07
     cee:	e0 2d       	mov	r30, r0
     cf0:	cd 01       	movw	r24, r26
     cf2:	09 95       	icall
     cf4:	82 30       	cpi	r24, 0x02	; 2
     cf6:	19 f0       	breq	.+6      	; 0xcfe <_ZN7fat32_tC1EP4hw_tm+0xd2>
		errno = 3;
     cf8:	83 e0       	ldi	r24, 0x03	; 3
     cfa:	8f 83       	std	Y+7, r24	; 0x07
     cfc:	69 c0       	rjmp	.+210    	; 0xdd0 <_ZN7fat32_tC1EP4hw_tm+0x1a4>
		goto ret;
	}
	hw->skipBytes(0x24 - 0x10 - 1);
     cfe:	ac 81       	ldd	r26, Y+4	; 0x04
     d00:	bd 81       	ldd	r27, Y+5	; 0x05
     d02:	ed 91       	ld	r30, X+
     d04:	fc 91       	ld	r31, X
     d06:	11 97       	sbiw	r26, 0x01	; 1
     d08:	04 80       	ldd	r0, Z+4	; 0x04
     d0a:	f5 81       	ldd	r31, Z+5	; 0x05
     d0c:	e0 2d       	mov	r30, r0
     d0e:	cd 01       	movw	r24, r26
     d10:	63 e1       	ldi	r22, 0x13	; 19
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	09 95       	icall
	clusAddr = FATAddr + 2 * hw->nextBytes(4);	// Sectors per FAT
     d16:	e8 84       	ldd	r14, Y+8	; 0x08
     d18:	f9 84       	ldd	r15, Y+9	; 0x09
     d1a:	0a 85       	ldd	r16, Y+10	; 0x0a
     d1c:	1b 85       	ldd	r17, Y+11	; 0x0b
     d1e:	ac 81       	ldd	r26, Y+4	; 0x04
     d20:	bd 81       	ldd	r27, Y+5	; 0x05
     d22:	ed 91       	ld	r30, X+
     d24:	fc 91       	ld	r31, X
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	00 84       	ldd	r0, Z+8	; 0x08
     d2a:	f1 85       	ldd	r31, Z+9	; 0x09
     d2c:	e0 2d       	mov	r30, r0
     d2e:	cd 01       	movw	r24, r26
     d30:	64 e0       	ldi	r22, 0x04	; 4
     d32:	09 95       	icall
     d34:	66 0f       	add	r22, r22
     d36:	77 1f       	adc	r23, r23
     d38:	88 1f       	adc	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	e6 0e       	add	r14, r22
     d3e:	f7 1e       	adc	r15, r23
     d40:	08 1f       	adc	r16, r24
     d42:	19 1f       	adc	r17, r25
     d44:	ec 86       	std	Y+12, r14	; 0x0c
     d46:	fd 86       	std	Y+13, r15	; 0x0d
     d48:	0e 87       	std	Y+14, r16	; 0x0e
     d4a:	1f 87       	std	Y+15, r17	; 0x0f
	hw->skipBytes(0x2C - (0x24 + 3) - 1);
     d4c:	ac 81       	ldd	r26, Y+4	; 0x04
     d4e:	bd 81       	ldd	r27, Y+5	; 0x05
     d50:	ed 91       	ld	r30, X+
     d52:	fc 91       	ld	r31, X
     d54:	11 97       	sbiw	r26, 0x01	; 1
     d56:	04 80       	ldd	r0, Z+4	; 0x04
     d58:	f5 81       	ldd	r31, Z+5	; 0x05
     d5a:	e0 2d       	mov	r30, r0
     d5c:	cd 01       	movw	r24, r26
     d5e:	64 e0       	ldi	r22, 0x04	; 4
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	09 95       	icall
	rootClus = hw->nextBytes(4);			// Root directory first cluster
     d64:	ac 81       	ldd	r26, Y+4	; 0x04
     d66:	bd 81       	ldd	r27, Y+5	; 0x05
     d68:	ed 91       	ld	r30, X+
     d6a:	fc 91       	ld	r31, X
     d6c:	11 97       	sbiw	r26, 0x01	; 1
     d6e:	00 84       	ldd	r0, Z+8	; 0x08
     d70:	f1 85       	ldd	r31, Z+9	; 0x09
     d72:	e0 2d       	mov	r30, r0
     d74:	cd 01       	movw	r24, r26
     d76:	64 e0       	ldi	r22, 0x04	; 4
     d78:	09 95       	icall
     d7a:	68 8b       	std	Y+16, r22	; 0x10
     d7c:	79 8b       	std	Y+17, r23	; 0x11
     d7e:	8a 8b       	std	Y+18, r24	; 0x12
     d80:	9b 8b       	std	Y+19, r25	; 0x13
	hw->skipBytes(0x1FE - (0x2C + 3) - 1);
     d82:	ac 81       	ldd	r26, Y+4	; 0x04
     d84:	bd 81       	ldd	r27, Y+5	; 0x05
     d86:	ed 91       	ld	r30, X+
     d88:	fc 91       	ld	r31, X
     d8a:	11 97       	sbiw	r26, 0x01	; 1
     d8c:	04 80       	ldd	r0, Z+4	; 0x04
     d8e:	f5 81       	ldd	r31, Z+5	; 0x05
     d90:	e0 2d       	mov	r30, r0
     d92:	cd 01       	movw	r24, r26
     d94:	6e ec       	ldi	r22, 0xCE	; 206
     d96:	71 e0       	ldi	r23, 0x01	; 1
     d98:	09 95       	icall
	if (hw->nextBytes(2) != 0xAA55) {		// Signature
     d9a:	ac 81       	ldd	r26, Y+4	; 0x04
     d9c:	bd 81       	ldd	r27, Y+5	; 0x05
     d9e:	ed 91       	ld	r30, X+
     da0:	fc 91       	ld	r31, X
     da2:	11 97       	sbiw	r26, 0x01	; 1
     da4:	00 84       	ldd	r0, Z+8	; 0x08
     da6:	f1 85       	ldd	r31, Z+9	; 0x09
     da8:	e0 2d       	mov	r30, r0
     daa:	cd 01       	movw	r24, r26
     dac:	62 e0       	ldi	r22, 0x02	; 2
     dae:	09 95       	icall
     db0:	65 55       	subi	r22, 0x55	; 85
     db2:	7a 4a       	sbci	r23, 0xAA	; 170
     db4:	80 40       	sbci	r24, 0x00	; 0
     db6:	90 40       	sbci	r25, 0x00	; 0
     db8:	11 f0       	breq	.+4      	; 0xdbe <_ZN7fat32_tC1EP4hw_tm+0x192>
		errno = 4;
     dba:	84 e0       	ldi	r24, 0x04	; 4
     dbc:	9e cf       	rjmp	.-196    	; 0xcfa <_ZN7fat32_tC1EP4hw_tm+0xce>
		goto ret;
	}
	errno = 0;
     dbe:	1f 82       	std	Y+7, r1	; 0x07
	counter = 0xFF;
     dc0:	8f ef       	ldi	r24, 0xFF	; 255
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	a0 e0       	ldi	r26, 0x00	; 0
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	88 8f       	std	Y+24, r24	; 0x18
     dca:	99 8f       	std	Y+25, r25	; 0x19
     dcc:	aa 8f       	std	Y+26, r26	; 0x1a
     dce:	bb 8f       	std	Y+27, r27	; 0x1b
ret:
	if (!hw->streamStop(hw_t::Read))
     dd0:	ec 81       	ldd	r30, Y+4	; 0x04
     dd2:	fd 81       	ldd	r31, Y+5	; 0x05
     dd4:	a0 81       	ld	r26, Z
     dd6:	b1 81       	ldd	r27, Z+1	; 0x01
     dd8:	12 96       	adiw	r26, 0x02	; 2
     dda:	2d 91       	ld	r18, X+
     ddc:	3c 91       	ld	r19, X
     dde:	13 97       	sbiw	r26, 0x03	; 3
     de0:	cf 01       	movw	r24, r30
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	f9 01       	movw	r30, r18
     de6:	09 95       	icall
     de8:	88 23       	and	r24, r24
     dea:	11 f4       	brne	.+4      	; 0xdf0 <_ZN7fat32_tC1EP4hw_tm+0x1c4>
		errno = 5;
     dec:	85 e0       	ldi	r24, 0x05	; 5
     dee:	8f 83       	std	Y+7, r24	; 0x07
}
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	ff 90       	pop	r15
     dfa:	ef 90       	pop	r14
     dfc:	08 95       	ret

00000dfe <_ZN7fat32_t8activateEP6__file>:
		return true;
	counter = 0xFF;
	return hw->streamStop(hw_t::Read);
}

inline void fat32_t::activate(FILE *fp)
     dfe:	cf 92       	push	r12
     e00:	df 92       	push	r13
     e02:	ef 92       	push	r14
     e04:	ff 92       	push	r15
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	ec 01       	movw	r28, r24
     e10:	7b 01       	movw	r14, r22
{
	if (hw->activated(this) && activated(fp))
     e12:	ec 81       	ldd	r30, Y+4	; 0x04
     e14:	fd 81       	ldd	r31, Y+5	; 0x05
     e16:	d8 2e       	mov	r13, r24
     e18:	cd 2e       	mov	r12, r29
     e1a:	a0 81       	ld	r26, Z
     e1c:	b1 81       	ldd	r27, Z+1	; 0x01
     e1e:	1c 96       	adiw	r26, 0x0c	; 12
     e20:	2d 91       	ld	r18, X+
     e22:	3c 91       	ld	r19, X
     e24:	1d 97       	sbiw	r26, 0x0d	; 13
     e26:	cf 01       	movw	r24, r30
     e28:	be 01       	movw	r22, r28
     e2a:	f9 01       	movw	r30, r18
     e2c:	09 95       	icall
     e2e:	88 23       	and	r24, r24
     e30:	b1 f1       	breq	.+108    	; 0xe9e <_ZN7fat32_t8activateEP6__file+0xa0>
     e32:	e8 81       	ld	r30, Y
     e34:	f9 81       	ldd	r31, Y+1	; 0x01
     e36:	04 84       	ldd	r0, Z+12	; 0x0c
     e38:	f5 85       	ldd	r31, Z+13	; 0x0d
     e3a:	e0 2d       	mov	r30, r0
     e3c:	ce 01       	movw	r24, r28
     e3e:	b7 01       	movw	r22, r14
     e40:	09 95       	icall
     e42:	88 23       	and	r24, r24
     e44:	61 f1       	breq	.+88     	; 0xe9e <_ZN7fat32_t8activateEP6__file+0xa0>
     e46:	31 c0       	rjmp	.+98     	; 0xeaa <_ZN7fat32_t8activateEP6__file+0xac>
	virtual inline uint32_t rootAddr(void) const {return 0;}
	virtual inline bool readDirEntry(DIR *dir, struct dirent *ent) {return false;}
	virtual inline bool readFileInfo(const char *path, file_t *file) {return false;}
	virtual inline int readChar(void) {return -1;}
	virtual inline void readClose(void) {}
	virtual inline void activate(FILE *fp) {act = fp;}
     e48:	fb 82       	std	Y+3, r15	; 0x03
     e4a:	ea 82       	std	Y+2, r14	; 0x02
		return;
	file_t *file = op::fstruct(fp);
	if (file == NULL)
		return;
	fs_t::activate(fp);
	if (!hw->activated(this))
     e4c:	ec 81       	ldd	r30, Y+4	; 0x04
     e4e:	fd 81       	ldd	r31, Y+5	; 0x05
     e50:	a0 81       	ld	r26, Z
     e52:	b1 81       	ldd	r27, Z+1	; 0x01
     e54:	1c 96       	adiw	r26, 0x0c	; 12
     e56:	2d 91       	ld	r18, X+
     e58:	3c 91       	ld	r19, X
     e5a:	1d 97       	sbiw	r26, 0x0d	; 13
     e5c:	cf 01       	movw	r24, r30
     e5e:	6d 2d       	mov	r22, r13
     e60:	7c 2d       	mov	r23, r12
     e62:	f9 01       	movw	r30, r18
     e64:	09 95       	icall
     e66:	88 23       	and	r24, r24
     e68:	69 f4       	brne	.+26     	; 0xe84 <_ZN7fat32_t8activateEP6__file+0x86>
		hw->activate(this);
     e6a:	ec 81       	ldd	r30, Y+4	; 0x04
     e6c:	fd 81       	ldd	r31, Y+5	; 0x05
     e6e:	a0 81       	ld	r26, Z
     e70:	b1 81       	ldd	r27, Z+1	; 0x01
     e72:	1a 96       	adiw	r26, 0x0a	; 10
     e74:	2d 91       	ld	r18, X+
     e76:	3c 91       	ld	r19, X
     e78:	1b 97       	sbiw	r26, 0x0b	; 11
     e7a:	cf 01       	movw	r24, r30
     e7c:	6d 2d       	mov	r22, r13
     e7e:	7c 2d       	mov	r23, r12
     e80:	f9 01       	movw	r30, r18
     e82:	09 95       	icall
	chainRead(file->addr, file->offset);
     e84:	f8 01       	movw	r30, r16
     e86:	44 81       	ldd	r20, Z+4	; 0x04
     e88:	55 81       	ldd	r21, Z+5	; 0x05
     e8a:	66 81       	ldd	r22, Z+6	; 0x06
     e8c:	77 81       	ldd	r23, Z+7	; 0x07
     e8e:	00 85       	ldd	r16, Z+8	; 0x08
     e90:	11 85       	ldd	r17, Z+9	; 0x09
     e92:	22 85       	ldd	r18, Z+10	; 0x0a
     e94:	33 85       	ldd	r19, Z+11	; 0x0b
     e96:	ce 01       	movw	r24, r28
     e98:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
     e9c:	06 c0       	rjmp	.+12     	; 0xeaa <_ZN7fat32_t8activateEP6__file+0xac>

inline void fat32_t::activate(FILE *fp)
{
	if (hw->activated(this) && activated(fp))
		return;
	file_t *file = op::fstruct(fp);
     e9e:	c7 01       	movw	r24, r14
     ea0:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_ZN2op7fstructEP6__file>
     ea4:	8c 01       	movw	r16, r24
	if (file == NULL)
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	79 f6       	brne	.-98     	; 0xe48 <_ZN7fat32_t8activateEP6__file+0x4a>
		return;
	fs_t::activate(fp);
	if (!hw->activated(this))
		hw->activate(this);
	chainRead(file->addr, file->offset);
}
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	df 90       	pop	r13
     eb8:	cf 90       	pop	r12
     eba:	08 95       	ret

00000ebc <_ZN7fat32_t12readFileInfoEPKcP6file_t>:
		dir->offset %= secPerClus * 512;
	}
	return true;
}

bool fat32_t::readFileInfo(const char *path, file_t *file)
     ebc:	af 92       	push	r10
     ebe:	bf 92       	push	r11
     ec0:	cf 92       	push	r12
     ec2:	df 92       	push	r13
     ec4:	ef 92       	push	r14
     ec6:	ff 92       	push	r15
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	16 2f       	mov	r17, r22
     ed2:	07 2f       	mov	r16, r23
     ed4:	6a 01       	movw	r12, r20
{
	char *dirpath = (char *)malloc(strlen(path) + 1);
     ed6:	e6 2f       	mov	r30, r22
     ed8:	f7 2f       	mov	r31, r23
     eda:	df 01       	movw	r26, r30
     edc:	0d 90       	ld	r0, X+
     ede:	00 20       	and	r0, r0
     ee0:	e9 f7       	brne	.-6      	; 0xedc <_ZN7fat32_t12readFileInfoEPKcP6file_t+0x20>
     ee2:	cd 01       	movw	r24, r26
     ee4:	8e 1b       	sub	r24, r30
     ee6:	9f 0b       	sbc	r25, r31
     ee8:	0e 94 d6 18 	call	0x31ac	; 0x31ac <malloc>
     eec:	b8 2e       	mov	r11, r24
     eee:	a9 2e       	mov	r10, r25
	strcpy(dirpath, path);
     ef0:	61 2f       	mov	r22, r17
     ef2:	70 2f       	mov	r23, r16
     ef4:	0e 94 fe 19 	call	0x33fc	; 0x33fc <strcpy>
     ef8:	2b 2d       	mov	r18, r11
     efa:	3a 2d       	mov	r19, r10
     efc:	c9 01       	movw	r24, r18
     efe:	fc 01       	movw	r30, r24
     f00:	00 e0       	ldi	r16, 0x00	; 0
     f02:	10 e0       	ldi	r17, 0x00	; 0
     f04:	04 c0       	rjmp	.+8      	; 0xf0e <_ZN7fat32_t12readFileInfoEPKcP6file_t+0x52>
	char *p = dirpath, *last = 0;
	while (*p != '\0') {
		if (*p == '/')
     f06:	8f 32       	cpi	r24, 0x2F	; 47
     f08:	09 f4       	brne	.+2      	; 0xf0c <_ZN7fat32_t12readFileInfoEPKcP6file_t+0x50>
     f0a:	8f 01       	movw	r16, r30
			last = p;
		p++;
     f0c:	31 96       	adiw	r30, 0x01	; 1
bool fat32_t::readFileInfo(const char *path, file_t *file)
{
	char *dirpath = (char *)malloc(strlen(path) + 1);
	strcpy(dirpath, path);
	char *p = dirpath, *last = 0;
	while (*p != '\0') {
     f0e:	80 81       	ld	r24, Z
     f10:	88 23       	and	r24, r24
     f12:	c9 f7       	brne	.-14     	; 0xf06 <_ZN7fat32_t12readFileInfoEPKcP6file_t+0x4a>
		if (*p == '/')
			last = p;
		p++;
	}
	DIR *dir;
	if (last != 0) {
     f14:	01 15       	cp	r16, r1
     f16:	11 05       	cpc	r17, r1
     f18:	31 f0       	breq	.+12     	; 0xf26 <_ZN7fat32_t12readFileInfoEPKcP6file_t+0x6a>
		*last++ = '\0';
     f1a:	f8 01       	movw	r30, r16
     f1c:	11 92       	st	Z+, r1
     f1e:	8f 01       	movw	r16, r30
		dir = op::opendir(dirpath);
     f20:	8b 2d       	mov	r24, r11
     f22:	9a 2d       	mov	r25, r10
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <_ZN7fat32_t12readFileInfoEPKcP6file_t+0x6e>
	} else
		dir = op::opendir("");
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN2op7opendirEPKc>
     f2e:	7c 01       	movw	r14, r24
	if (dir == NULL) {
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	b1 f5       	brne	.+108    	; 0xfa0 <_ZN7fat32_t12readFileInfoEPKcP6file_t+0xe4>
		free(dirpath);
     f34:	8b 2d       	mov	r24, r11
     f36:	9a 2d       	mov	r25, r10
     f38:	0e 94 83 19 	call	0x3306	; 0x3306 <free>
     f3c:	3e c0       	rjmp	.+124    	; 0xfba <_ZN7fat32_t12readFileInfoEPKcP6file_t+0xfe>
		::errno = ENOENT;
		return false;
	}
	struct dirent *ent;
	while ((ent = op::readdir(dir)) != NULL)
		if (strcasecmp(ent->d_name, last) == 0) {
     f3e:	ce 01       	movw	r24, r28
     f40:	b8 01       	movw	r22, r16
     f42:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <strcasecmp>
     f46:	89 2b       	or	r24, r25
     f48:	59 f5       	brne	.+86     	; 0xfa0 <_ZN7fat32_t12readFileInfoEPKcP6file_t+0xe4>
			if (ent->d_type & IS_DIR)
     f4a:	c0 50       	subi	r28, 0x00	; 0
     f4c:	df 4f       	sbci	r29, 0xFF	; 255
     f4e:	88 81       	ld	r24, Y
     f50:	c0 50       	subi	r28, 0x00	; 0
     f52:	d1 40       	sbci	r29, 0x01	; 1
     f54:	84 fd       	sbrc	r24, 4
     f56:	2a c0       	rjmp	.+84     	; 0xfac <_ZN7fat32_t12readFileInfoEPKcP6file_t+0xf0>
				goto failed;
			file->addr = ent->d_addr;
     f58:	cb 5f       	subi	r28, 0xFB	; 251
     f5a:	de 4f       	sbci	r29, 0xFE	; 254
     f5c:	88 81       	ld	r24, Y
     f5e:	99 81       	ldd	r25, Y+1	; 0x01
     f60:	aa 81       	ldd	r26, Y+2	; 0x02
     f62:	bb 81       	ldd	r27, Y+3	; 0x03
     f64:	f6 01       	movw	r30, r12
     f66:	84 83       	std	Z+4, r24	; 0x04
     f68:	95 83       	std	Z+5, r25	; 0x05
     f6a:	a6 83       	std	Z+6, r26	; 0x06
     f6c:	b7 83       	std	Z+7, r27	; 0x07
			file->offset = 0;
     f6e:	10 86       	std	Z+8, r1	; 0x08
     f70:	11 86       	std	Z+9, r1	; 0x09
     f72:	12 86       	std	Z+10, r1	; 0x0a
     f74:	13 86       	std	Z+11, r1	; 0x0b
			file->size = ent->d_size;
     f76:	fe 01       	movw	r30, r28
     f78:	b2 91       	ld	r27, -Z
     f7a:	a2 91       	ld	r26, -Z
     f7c:	92 91       	ld	r25, -Z
     f7e:	82 91       	ld	r24, -Z
     f80:	f6 01       	movw	r30, r12
     f82:	84 87       	std	Z+12, r24	; 0x0c
     f84:	95 87       	std	Z+13, r25	; 0x0d
     f86:	a6 87       	std	Z+14, r26	; 0x0e
     f88:	b7 87       	std	Z+15, r27	; 0x0f
			free(dirpath);
     f8a:	8b 2d       	mov	r24, r11
     f8c:	9a 2d       	mov	r25, r10
     f8e:	0e 94 83 19 	call	0x3306	; 0x3306 <free>
			op::closedir(dir);
     f92:	c7 01       	movw	r24, r14
     f94:	0e 94 39 02 	call	0x472	; 0x472 <_ZN2op8closedirEP9dirstream>
			::errno = 0;
     f98:	10 92 0f 03 	sts	0x030F, r1
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	11 c0       	rjmp	.+34     	; 0xfc2 <_ZN7fat32_t12readFileInfoEPKcP6file_t+0x106>
		free(dirpath);
		::errno = ENOENT;
		return false;
	}
	struct dirent *ent;
	while ((ent = op::readdir(dir)) != NULL)
     fa0:	c7 01       	movw	r24, r14
     fa2:	0e 94 09 02 	call	0x412	; 0x412 <_ZN2op7readdirEP9dirstream>
     fa6:	ec 01       	movw	r28, r24
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	49 f6       	brne	.-110    	; 0xf3e <_ZN7fat32_t12readFileInfoEPKcP6file_t+0x82>
			op::closedir(dir);
			::errno = 0;
			return true;
		}
failed:
	free(dirpath);
     fac:	8b 2d       	mov	r24, r11
     fae:	9a 2d       	mov	r25, r10
     fb0:	0e 94 83 19 	call	0x3306	; 0x3306 <free>
	op::closedir(dir);
     fb4:	c7 01       	movw	r24, r14
     fb6:	0e 94 39 02 	call	0x472	; 0x472 <_ZN2op8closedirEP9dirstream>
	::errno = ENOENT;
     fba:	85 e0       	ldi	r24, 0x05	; 5
     fbc:	80 93 0f 03 	sts	0x030F, r24
     fc0:	80 e0       	ldi	r24, 0x00	; 0
	return false;
}
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	bf 90       	pop	r11
     fd4:	af 90       	pop	r10
     fd6:	08 95       	ret

00000fd8 <_ZN4convL10ucs2decodeEhh>:
	res |= (uint32_t)(uint8_t)fgetc(f) * 0x00010000;
	res |= (uint32_t)(uint8_t)fgetc(f) * 0x01000000;
	return res;
}

static inline char conv::ucs2decode(const uint8_t a, const uint8_t b)
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	18 2f       	mov	r17, r24
     fde:	06 2f       	mov	r16, r22
{
	if (a == '\0' && b == '\0')
     fe0:	88 23       	and	r24, r24
     fe2:	21 f4       	brne	.+8      	; 0xfec <_ZN4convL10ucs2decodeEhh+0x14>
     fe4:	66 23       	and	r22, r22
     fe6:	11 f4       	brne	.+4      	; 0xfec <_ZN4convL10ucs2decodeEhh+0x14>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	0b c0       	rjmp	.+22     	; 0x1002 <_ZN4convL10ucs2decodeEhh+0x2a>
		return '\0';
	if (!isprint(a) || b != 0)
     fec:	81 2f       	mov	r24, r17
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 dd 19 	call	0x33ba	; 0x33ba <isprint>
     ff4:	89 2b       	or	r24, r25
     ff6:	21 f0       	breq	.+8      	; 0x1000 <_ZN4convL10ucs2decodeEhh+0x28>
     ff8:	00 23       	and	r16, r16
     ffa:	11 f4       	brne	.+4      	; 0x1000 <_ZN4convL10ucs2decodeEhh+0x28>
		return '?';
	return a;
     ffc:	81 2f       	mov	r24, r17
     ffe:	01 c0       	rjmp	.+2      	; 0x1002 <_ZN4convL10ucs2decodeEhh+0x2a>
    1000:	8f e3       	ldi	r24, 0x3F	; 63
}
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	08 95       	ret

00001008 <_ZN7fat32_t12readDirEntryEP9dirstreamP6dirent>:
ret:
	if (!hw->streamStop(hw_t::Read))
		errno = 5;
}

bool fat32_t::readDirEntry(DIR *dir, struct dirent *ent)
    1008:	2f 92       	push	r2
    100a:	3f 92       	push	r3
    100c:	4f 92       	push	r4
    100e:	5f 92       	push	r5
    1010:	6f 92       	push	r6
    1012:	7f 92       	push	r7
    1014:	8f 92       	push	r8
    1016:	9f 92       	push	r9
    1018:	af 92       	push	r10
    101a:	bf 92       	push	r11
    101c:	cf 92       	push	r12
    101e:	df 92       	push	r13
    1020:	ef 92       	push	r14
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	62 97       	sbiw	r28, 0x12	; 18
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	2c 01       	movw	r4, r24
    103e:	7e 87       	std	Y+14, r23	; 0x0e
    1040:	6d 87       	std	Y+13, r22	; 0x0d
    1042:	1a 01       	movw	r2, r20
{
	uint8_t buff[12], index = 0;
	chainRead(dir->addr, dir->offset);
    1044:	fb 01       	movw	r30, r22
    1046:	45 81       	ldd	r20, Z+5	; 0x05
    1048:	56 81       	ldd	r21, Z+6	; 0x06
    104a:	67 81       	ldd	r22, Z+7	; 0x07
    104c:	70 85       	ldd	r23, Z+8	; 0x08
    104e:	01 85       	ldd	r16, Z+9	; 0x09
    1050:	12 85       	ldd	r17, Z+10	; 0x0a
    1052:	23 85       	ldd	r18, Z+11	; 0x0b
    1054:	34 85       	ldd	r19, Z+12	; 0x0c
    1056:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
newEntry:
	dir->offset += 32;
    105a:	3e 01       	movw	r6, r28
    105c:	08 94       	sec
    105e:	61 1c       	adc	r6, r1
    1060:	71 1c       	adc	r7, r1
ret:
	if (!hw->streamStop(hw_t::Read))
		errno = 5;
}

bool fat32_t::readDirEntry(DIR *dir, struct dirent *ent)
    1062:	ce 01       	movw	r24, r28
    1064:	0d 96       	adiw	r24, 0x0d	; 13
    1066:	98 8b       	std	Y+16, r25	; 0x10
    1068:	8f 87       	std	Y+15, r24	; 0x0f
{
	uint8_t buff[12], index = 0;
	chainRead(dir->addr, dir->offset);
newEntry:
	dir->offset += 32;
    106a:	ed 85       	ldd	r30, Y+13	; 0x0d
    106c:	fe 85       	ldd	r31, Y+14	; 0x0e
    106e:	81 85       	ldd	r24, Z+9	; 0x09
    1070:	92 85       	ldd	r25, Z+10	; 0x0a
    1072:	a3 85       	ldd	r26, Z+11	; 0x0b
    1074:	b4 85       	ldd	r27, Z+12	; 0x0c
    1076:	80 96       	adiw	r24, 0x20	; 32
    1078:	a1 1d       	adc	r26, r1
    107a:	b1 1d       	adc	r27, r1
    107c:	81 87       	std	Z+9, r24	; 0x09
    107e:	92 87       	std	Z+10, r25	; 0x0a
    1080:	a3 87       	std	Z+11, r26	; 0x0b
    1082:	b4 87       	std	Z+12, r27	; 0x0c
    1084:	63 01       	movw	r12, r6
    1086:	73 01       	movw	r14, r6
	for (uint8_t i = 0; i < 12; i++)
		buff[i] = chainRead();
    1088:	c2 01       	movw	r24, r4
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	00 e0       	ldi	r16, 0x00	; 0
    1094:	10 e0       	ldi	r17, 0x00	; 0
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    109e:	f7 01       	movw	r30, r14
    10a0:	81 93       	st	Z+, r24
    10a2:	7f 01       	movw	r14, r30
{
	uint8_t buff[12], index = 0;
	chainRead(dir->addr, dir->offset);
newEntry:
	dir->offset += 32;
	for (uint8_t i = 0; i < 12; i++)
    10a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a6:	98 89       	ldd	r25, Y+16	; 0x10
    10a8:	e8 17       	cp	r30, r24
    10aa:	f9 07       	cpc	r31, r25
    10ac:	69 f7       	brne	.-38     	; 0x1088 <_ZN7fat32_t12readDirEntryEP9dirstreamP6dirent+0x80>
		buff[i] = chainRead();
	if (buff[0] == 0xE5) {				// Deleted items
    10ae:	29 81       	ldd	r18, Y+1	; 0x01
    10b0:	25 3e       	cpi	r18, 0xE5	; 229
    10b2:	89 f4       	brne	.+34     	; 0x10d6 <_ZN7fat32_t12readDirEntryEP9dirstreamP6dirent+0xce>
    10b4:	ff 24       	eor	r15, r15
		for (uint8_t i = 0; i < 20; i++)
			chainRead();
    10b6:	c2 01       	movw	r24, r4
    10b8:	40 e0       	ldi	r20, 0x00	; 0
    10ba:	50 e0       	ldi	r21, 0x00	; 0
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	00 e0       	ldi	r16, 0x00	; 0
    10c2:	10 e0       	ldi	r17, 0x00	; 0
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
newEntry:
	dir->offset += 32;
	for (uint8_t i = 0; i < 12; i++)
		buff[i] = chainRead();
	if (buff[0] == 0xE5) {				// Deleted items
		for (uint8_t i = 0; i < 20; i++)
    10cc:	f3 94       	inc	r15
    10ce:	94 e1       	ldi	r25, 0x14	; 20
    10d0:	f9 16       	cp	r15, r25
    10d2:	89 f7       	brne	.-30     	; 0x10b6 <_ZN7fat32_t12readDirEntryEP9dirstreamP6dirent+0xae>
    10d4:	ca cf       	rjmp	.-108    	; 0x106a <_ZN7fat32_t12readDirEntryEP9dirstreamP6dirent+0x62>
			chainRead();
		goto newEntry;
	}
	if (buff[0] == 0x00) {				// End of directory chain
    10d6:	22 23       	and	r18, r18
    10d8:	29 f4       	brne	.+10     	; 0x10e4 <_ZN7fat32_t12readDirEntryEP9dirstreamP6dirent+0xdc>
		chainReadClose();
    10da:	c2 01       	movw	r24, r4
    10dc:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN7fat32_t14chainReadCloseEv>
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	e3 c2       	rjmp	.+1478   	; 0x16aa <__stack+0x5ab>
		return false;
	}
	if (buff[11] == 0x0F) {				// DIR_Attr field == Long file name
    10e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    10e6:	8f 30       	cpi	r24, 0x0F	; 15
    10e8:	09 f0       	breq	.+2      	; 0x10ec <_ZN7fat32_t12readDirEntryEP9dirstreamP6dirent+0xe4>
    10ea:	f7 c0       	rjmp	.+494    	; 0x12da <__stack+0x1db>
		uint8_t seq = buff[0] &= ~0x40;
    10ec:	6f eb       	ldi	r22, 0xBF	; 191
    10ee:	86 2e       	mov	r8, r22
    10f0:	82 22       	and	r8, r18
    10f2:	89 82       	std	Y+1, r8	; 0x01
		ent->d_name[seq * 13] = '\0';
    10f4:	28 2d       	mov	r18, r8
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	8d e0       	ldi	r24, 0x0D	; 13
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	28 9f       	mul	r18, r24
    10fe:	f0 01       	movw	r30, r0
    1100:	29 9f       	mul	r18, r25
    1102:	f0 0d       	add	r31, r0
    1104:	38 9f       	mul	r19, r24
    1106:	f0 0d       	add	r31, r0
    1108:	11 24       	eor	r1, r1
    110a:	e2 0d       	add	r30, r2
    110c:	f3 1d       	adc	r31, r3
    110e:	10 82       	st	Z, r1
		while (seq--) {
			dir->offset += 32;
			index = 0;
			for (uint8_t i = 0; i < 5; i++)
				ent->d_name[seq * 13 + index++] = conv::ucs2decode(buff[i * 2 + 1], buff[i * 2 + 2]);
    1110:	5d e0       	ldi	r21, 0x0D	; 13
    1112:	95 2e       	mov	r9, r21
		uint8_t seq = buff[0] &= ~0x40;
		ent->d_name[seq * 13] = '\0';
		while (seq--) {
			dir->offset += 32;
			index = 0;
			for (uint8_t i = 0; i < 5; i++)
    1114:	fe 01       	movw	r30, r28
    1116:	3c 96       	adiw	r30, 0x0c	; 12
    1118:	fa 8b       	std	Y+18, r31	; 0x12
    111a:	e9 8b       	std	Y+17, r30	; 0x11
    111c:	cd c0       	rjmp	.+410    	; 0x12b8 <__stack+0x1b9>
	}
	if (buff[11] == 0x0F) {				// DIR_Attr field == Long file name
		uint8_t seq = buff[0] &= ~0x40;
		ent->d_name[seq * 13] = '\0';
		while (seq--) {
			dir->offset += 32;
    111e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1120:	fe 85       	ldd	r31, Y+14	; 0x0e
    1122:	81 85       	ldd	r24, Z+9	; 0x09
    1124:	92 85       	ldd	r25, Z+10	; 0x0a
    1126:	a3 85       	ldd	r26, Z+11	; 0x0b
    1128:	b4 85       	ldd	r27, Z+12	; 0x0c
    112a:	80 96       	adiw	r24, 0x20	; 32
    112c:	a1 1d       	adc	r26, r1
    112e:	b1 1d       	adc	r27, r1
    1130:	81 87       	std	Z+9, r24	; 0x09
    1132:	92 87       	std	Z+10, r25	; 0x0a
    1134:	a3 87       	std	Z+11, r26	; 0x0b
    1136:	b4 87       	std	Z+12, r27	; 0x0c
			index = 0;
			for (uint8_t i = 0; i < 5; i++)
				ent->d_name[seq * 13 + index++] = conv::ucs2decode(buff[i * 2 + 1], buff[i * 2 + 2]);
    1138:	89 9c       	mul	r8, r9
    113a:	50 01       	movw	r10, r0
    113c:	11 24       	eor	r1, r1
    113e:	8e 01       	movw	r16, r28
    1140:	0e 5f       	subi	r16, 0xFE	; 254
    1142:	1f 4f       	sbci	r17, 0xFF	; 255
    1144:	71 01       	movw	r14, r2
    1146:	ea 0c       	add	r14, r10
    1148:	fb 1c       	adc	r15, r11
    114a:	f8 01       	movw	r30, r16
    114c:	80 81       	ld	r24, Z
    114e:	61 81       	ldd	r22, Z+1	; 0x01
    1150:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_ZN4convL10ucs2decodeEhh>
    1154:	f7 01       	movw	r30, r14
    1156:	81 93       	st	Z+, r24
    1158:	7f 01       	movw	r14, r30
    115a:	0e 5f       	subi	r16, 0xFE	; 254
    115c:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t seq = buff[0] &= ~0x40;
		ent->d_name[seq * 13] = '\0';
		while (seq--) {
			dir->offset += 32;
			index = 0;
			for (uint8_t i = 0; i < 5; i++)
    115e:	89 89       	ldd	r24, Y+17	; 0x11
    1160:	9a 89       	ldd	r25, Y+18	; 0x12
    1162:	08 17       	cp	r16, r24
    1164:	19 07       	cpc	r17, r25
    1166:	89 f7       	brne	.-30     	; 0x114a <__stack+0x4b>
				ent->d_name[seq * 13 + index++] = conv::ucs2decode(buff[i * 2 + 1], buff[i * 2 + 2]);
			chainRead();			// Type, always 0x00
    1168:	c2 01       	movw	r24, r4
    116a:	40 e0       	ldi	r20, 0x00	; 0
    116c:	50 e0       	ldi	r21, 0x00	; 0
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	00 e0       	ldi	r16, 0x00	; 0
    1174:	10 e0       	ldi	r17, 0x00	; 0
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
			chainRead();			// Checksum of DOS file name
    117e:	c2 01       	movw	r24, r4
    1180:	40 e0       	ldi	r20, 0x00	; 0
    1182:	50 e0       	ldi	r21, 0x00	; 0
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	70 e0       	ldi	r23, 0x00	; 0
    1188:	00 e0       	ldi	r16, 0x00	; 0
    118a:	10 e0       	ldi	r17, 0x00	; 0
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    1194:	45 e0       	ldi	r20, 0x05	; 5
    1196:	c4 2e       	mov	r12, r20
    1198:	d1 2c       	mov	r13, r1
    119a:	ca 0c       	add	r12, r10
    119c:	db 1c       	adc	r13, r11
    119e:	c2 0c       	add	r12, r2
    11a0:	d3 1c       	adc	r13, r3
    11a2:	35 e0       	ldi	r19, 0x05	; 5
    11a4:	e3 2e       	mov	r14, r19
			for (uint8_t i = 0; i < 6; i++) {
				char a = chainRead(), b = chainRead();
    11a6:	c2 01       	movw	r24, r4
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	00 e0       	ldi	r16, 0x00	; 0
    11b2:	10 e0       	ldi	r17, 0x00	; 0
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    11bc:	f8 2e       	mov	r15, r24
    11be:	c2 01       	movw	r24, r4
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	00 e0       	ldi	r16, 0x00	; 0
    11ca:	10 e0       	ldi	r17, 0x00	; 0
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    11d4:	68 2f       	mov	r22, r24
				ent->d_name[seq * 13 + index++] = conv::ucs2decode(a, b);
    11d6:	8f 2d       	mov	r24, r15
    11d8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_ZN4convL10ucs2decodeEhh>
    11dc:	f6 01       	movw	r30, r12
    11de:	81 93       	st	Z+, r24
    11e0:	6f 01       	movw	r12, r30
    11e2:	e3 94       	inc	r14
			index = 0;
			for (uint8_t i = 0; i < 5; i++)
				ent->d_name[seq * 13 + index++] = conv::ucs2decode(buff[i * 2 + 1], buff[i * 2 + 2]);
			chainRead();			// Type, always 0x00
			chainRead();			// Checksum of DOS file name
			for (uint8_t i = 0; i < 6; i++) {
    11e4:	fb e0       	ldi	r31, 0x0B	; 11
    11e6:	ef 16       	cp	r14, r31
    11e8:	f1 f6       	brne	.-68     	; 0x11a6 <__stack+0xa7>
				char a = chainRead(), b = chainRead();
				ent->d_name[seq * 13 + index++] = conv::ucs2decode(a, b);
			}
			chainRead();			// First cluster
    11ea:	c2 01       	movw	r24, r4
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	00 e0       	ldi	r16, 0x00	; 0
    11f6:	10 e0       	ldi	r17, 0x00	; 0
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
			chainRead();			// Always 0x0000
    1200:	c2 01       	movw	r24, r4
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	00 e0       	ldi	r16, 0x00	; 0
    120c:	10 e0       	ldi	r17, 0x00	; 0
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
			char a = chainRead(), b = chainRead();
    1216:	c2 01       	movw	r24, r4
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	00 e0       	ldi	r16, 0x00	; 0
    1222:	10 e0       	ldi	r17, 0x00	; 0
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    122c:	f8 2e       	mov	r15, r24
    122e:	c2 01       	movw	r24, r4
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	00 e0       	ldi	r16, 0x00	; 0
    123a:	10 e0       	ldi	r17, 0x00	; 0
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    1244:	68 2f       	mov	r22, r24
			ent->d_name[seq * 13 + index++] = conv::ucs2decode(a, b);
    1246:	8f 2d       	mov	r24, r15
    1248:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_ZN4convL10ucs2decodeEhh>
    124c:	75 01       	movw	r14, r10
    124e:	e2 0c       	add	r14, r2
    1250:	f3 1c       	adc	r15, r3
    1252:	f7 01       	movw	r30, r14
    1254:	83 87       	std	Z+11, r24	; 0x0b
			a = chainRead(), b = chainRead();
    1256:	c2 01       	movw	r24, r4
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	00 e0       	ldi	r16, 0x00	; 0
    1262:	10 e0       	ldi	r17, 0x00	; 0
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    126c:	d8 2e       	mov	r13, r24
    126e:	c2 01       	movw	r24, r4
    1270:	40 e0       	ldi	r20, 0x00	; 0
    1272:	50 e0       	ldi	r21, 0x00	; 0
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	00 e0       	ldi	r16, 0x00	; 0
    127a:	10 e0       	ldi	r17, 0x00	; 0
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    1284:	68 2f       	mov	r22, r24
			ent->d_name[seq * 13 + index++] = conv::ucs2decode(a, b);
    1286:	8d 2d       	mov	r24, r13
    1288:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_ZN4convL10ucs2decodeEhh>
    128c:	f7 01       	movw	r30, r14
    128e:	84 87       	std	Z+12, r24	; 0x0c
    1290:	73 01       	movw	r14, r6
			for (uint8_t i = 0; i < 12; i++)
				buff[i] = chainRead();	// For next loop
    1292:	c2 01       	movw	r24, r4
    1294:	40 e0       	ldi	r20, 0x00	; 0
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	00 e0       	ldi	r16, 0x00	; 0
    129e:	10 e0       	ldi	r17, 0x00	; 0
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    12a8:	f7 01       	movw	r30, r14
    12aa:	81 93       	st	Z+, r24
    12ac:	7f 01       	movw	r14, r30
			chainRead();			// Always 0x0000
			char a = chainRead(), b = chainRead();
			ent->d_name[seq * 13 + index++] = conv::ucs2decode(a, b);
			a = chainRead(), b = chainRead();
			ent->d_name[seq * 13 + index++] = conv::ucs2decode(a, b);
			for (uint8_t i = 0; i < 12; i++)
    12ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    12b0:	98 89       	ldd	r25, Y+16	; 0x10
    12b2:	e8 17       	cp	r30, r24
    12b4:	f9 07       	cpc	r31, r25
    12b6:	69 f7       	brne	.-38     	; 0x1292 <__stack+0x193>
		return false;
	}
	if (buff[11] == 0x0F) {				// DIR_Attr field == Long file name
		uint8_t seq = buff[0] &= ~0x40;
		ent->d_name[seq * 13] = '\0';
		while (seq--) {
    12b8:	8a 94       	dec	r8
    12ba:	9f ef       	ldi	r25, 0xFF	; 255
    12bc:	89 16       	cp	r8, r25
    12be:	09 f0       	breq	.+2      	; 0x12c2 <__stack+0x1c3>
    12c0:	2e cf       	rjmp	.-420    	; 0x111e <__stack+0x1f>
			a = chainRead(), b = chainRead();
			ent->d_name[seq * 13 + index++] = conv::ucs2decode(a, b);
			for (uint8_t i = 0; i < 12; i++)
				buff[i] = chainRead();	// For next loop
		}
		chainRead();				// Type byte
    12c2:	c2 01       	movw	r24, r4
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	00 e0       	ldi	r16, 0x00	; 0
    12ce:	10 e0       	ldi	r17, 0x00	; 0
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    12d8:	ab c0       	rjmp	.+342    	; 0x1430 <__stack+0x331>
	} else						// 8.3 format short file name
		if (buff[11] & IS_DIR) {
    12da:	84 ff       	sbrs	r24, 4
    12dc:	34 c0       	rjmp	.+104    	; 0x1346 <__stack+0x247>
			uint8_t type = chainRead();	// Type byte
    12de:	c2 01       	movw	r24, r4
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	00 e0       	ldi	r16, 0x00	; 0
    12ea:	10 e0       	ldi	r17, 0x00	; 0
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    12f4:	98 2f       	mov	r25, r24
    12f6:	fe 01       	movw	r30, r28
    12f8:	3b 96       	adiw	r30, 0x0b	; 11
			for (uint8_t i = 11; i > 0; i--)
				if (buff[i - 1] != ' ')
    12fa:	80 81       	ld	r24, Z
    12fc:	80 32       	cpi	r24, 0x20	; 32
    12fe:	59 f0       	breq	.+22     	; 0x1316 <__stack+0x217>
    1300:	71 01       	movw	r14, r2
					break;
				else
					buff[i - 1] = '\0';
			for (uint8_t i = 0; i < 11; i++)
				ent->d_name[index++] = (type & (1 << 3)) ? tolower(buff[i]) : buff[i];
    1302:	09 2f       	mov	r16, r25
    1304:	10 e0       	ldi	r17, 0x00	; 0
    1306:	08 70       	andi	r16, 0x08	; 8
    1308:	10 70       	andi	r17, 0x00	; 0
			for (uint8_t i = 11; i > 0; i--)
				if (buff[i - 1] != ' ')
					break;
				else
					buff[i - 1] = '\0';
			for (uint8_t i = 0; i < 11; i++)
    130a:	2c e0       	ldi	r18, 0x0C	; 12
    130c:	a2 2e       	mov	r10, r18
    130e:	b1 2c       	mov	r11, r1
    1310:	ac 0e       	add	r10, r28
    1312:	bd 1e       	adc	r11, r29
    1314:	06 c0       	rjmp	.+12     	; 0x1322 <__stack+0x223>
			uint8_t type = chainRead();	// Type byte
			for (uint8_t i = 11; i > 0; i--)
				if (buff[i - 1] != ' ')
					break;
				else
					buff[i - 1] = '\0';
    1316:	10 82       	st	Z, r1
    1318:	31 97       	sbiw	r30, 0x01	; 1
		}
		chainRead();				// Type byte
	} else						// 8.3 format short file name
		if (buff[11] & IS_DIR) {
			uint8_t type = chainRead();	// Type byte
			for (uint8_t i = 11; i > 0; i--)
    131a:	ec 17       	cp	r30, r28
    131c:	fd 07       	cpc	r31, r29
    131e:	69 f7       	brne	.-38     	; 0x12fa <__stack+0x1fb>
    1320:	ef cf       	rjmp	.-34     	; 0x1300 <__stack+0x201>
    1322:	f6 01       	movw	r30, r12
    1324:	80 81       	ld	r24, Z
				if (buff[i - 1] != ' ')
					break;
				else
					buff[i - 1] = '\0';
			for (uint8_t i = 0; i < 11; i++)
				ent->d_name[index++] = (type & (1 << 3)) ? tolower(buff[i]) : buff[i];
    1326:	01 15       	cp	r16, r1
    1328:	11 05       	cpc	r17, r1
    132a:	19 f0       	breq	.+6      	; 0x1332 <__stack+0x233>
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <tolower>
    1332:	f7 01       	movw	r30, r14
    1334:	81 93       	st	Z+, r24
    1336:	7f 01       	movw	r14, r30
    1338:	08 94       	sec
    133a:	c1 1c       	adc	r12, r1
    133c:	d1 1c       	adc	r13, r1
			for (uint8_t i = 11; i > 0; i--)
				if (buff[i - 1] != ' ')
					break;
				else
					buff[i - 1] = '\0';
			for (uint8_t i = 0; i < 11; i++)
    133e:	ca 14       	cp	r12, r10
    1340:	db 04       	cpc	r13, r11
    1342:	79 f7       	brne	.-34     	; 0x1322 <__stack+0x223>
    1344:	75 c0       	rjmp	.+234    	; 0x1430 <__stack+0x331>
				ent->d_name[index++] = (type & (1 << 3)) ? tolower(buff[i]) : buff[i];
		} else {
			uint8_t type = chainRead();	// Type byte
    1346:	c2 01       	movw	r24, r4
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	00 e0       	ldi	r16, 0x00	; 0
    1352:	10 e0       	ldi	r17, 0x00	; 0
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    135c:	88 2e       	mov	r8, r24
    135e:	fe 01       	movw	r30, r28
    1360:	38 96       	adiw	r30, 0x08	; 8
			for (uint8_t i = 8; i > 0; i--)
				if (buff[i - 1] != ' ')
    1362:	80 81       	ld	r24, Z
    1364:	80 32       	cpi	r24, 0x20	; 32
    1366:	61 f0       	breq	.+24     	; 0x1380 <__stack+0x281>
    1368:	00 e0       	ldi	r16, 0x00	; 0
    136a:	10 e0       	ldi	r17, 0x00	; 0
					break;
				else
					buff[i - 1] = '\0';
			for (uint8_t i = 0; i < 8 && buff[i] != '\0'; i++)
    136c:	5e 01       	movw	r10, r28
    136e:	08 94       	sec
    1370:	a1 1c       	adc	r10, r1
    1372:	b1 1c       	adc	r11, r1
				ent->d_name[index++] = (type & (1 << 3)) ? tolower(buff[i]) : buff[i];
    1374:	e8 2c       	mov	r14, r8
    1376:	ff 24       	eor	r15, r15
    1378:	f8 e0       	ldi	r31, 0x08	; 8
    137a:	ef 22       	and	r14, r31
    137c:	ff 24       	eor	r15, r15
    137e:	22 c0       	rjmp	.+68     	; 0x13c4 <__stack+0x2c5>
			uint8_t type = chainRead();	// Type byte
			for (uint8_t i = 8; i > 0; i--)
				if (buff[i - 1] != ' ')
					break;
				else
					buff[i - 1] = '\0';
    1380:	10 82       	st	Z, r1
    1382:	31 97       	sbiw	r30, 0x01	; 1
					buff[i - 1] = '\0';
			for (uint8_t i = 0; i < 11; i++)
				ent->d_name[index++] = (type & (1 << 3)) ? tolower(buff[i]) : buff[i];
		} else {
			uint8_t type = chainRead();	// Type byte
			for (uint8_t i = 8; i > 0; i--)
    1384:	ec 17       	cp	r30, r28
    1386:	fd 07       	cpc	r31, r29
    1388:	61 f7       	brne	.-40     	; 0x1362 <__stack+0x263>
    138a:	ee cf       	rjmp	.-36     	; 0x1368 <__stack+0x269>
				if (buff[i - 1] != ' ')
					break;
				else
					buff[i - 1] = '\0';
			for (uint8_t i = 0; i < 8 && buff[i] != '\0'; i++)
				ent->d_name[index++] = (type & (1 << 3)) ? tolower(buff[i]) : buff[i];
    138c:	e1 14       	cp	r14, r1
    138e:	f1 04       	cpc	r15, r1
    1390:	19 f0       	breq	.+6      	; 0x1398 <__stack+0x299>
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <tolower>
    1398:	f1 01       	movw	r30, r2
    139a:	e0 0f       	add	r30, r16
    139c:	f1 1f       	adc	r31, r17
    139e:	80 83       	st	Z, r24
    13a0:	d3 94       	inc	r13
    13a2:	0f 5f       	subi	r16, 0xFF	; 255
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
			for (uint8_t i = 8; i > 0; i--)
				if (buff[i - 1] != ' ')
					break;
				else
					buff[i - 1] = '\0';
			for (uint8_t i = 0; i < 8 && buff[i] != '\0'; i++)
    13a6:	08 30       	cpi	r16, 0x08	; 8
    13a8:	11 05       	cpc	r17, r1
    13aa:	61 f4       	brne	.+24     	; 0x13c4 <__stack+0x2c5>
				ent->d_name[index++] = (type & (1 << 3)) ? tolower(buff[i]) : buff[i];
			uint8_t i;
			for (i = 11; i > 8; i--)
				if (buff[i - 1] != ' ')
    13ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    13ae:	80 32       	cpi	r24, 0x20	; 32
    13b0:	99 f4       	brne	.+38     	; 0x13d8 <__stack+0x2d9>
					break;
				else
					buff[i - 1] = '\0';
    13b2:	1b 86       	std	Y+11, r1	; 0x0b
					buff[i - 1] = '\0';
			for (uint8_t i = 0; i < 8 && buff[i] != '\0'; i++)
				ent->d_name[index++] = (type & (1 << 3)) ? tolower(buff[i]) : buff[i];
			uint8_t i;
			for (i = 11; i > 8; i--)
				if (buff[i - 1] != ' ')
    13b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13b6:	80 32       	cpi	r24, 0x20	; 32
    13b8:	79 f4       	brne	.+30     	; 0x13d8 <__stack+0x2d9>
					break;
				else
					buff[i - 1] = '\0';
    13ba:	1a 86       	std	Y+10, r1	; 0x0a
					buff[i - 1] = '\0';
			for (uint8_t i = 0; i < 8 && buff[i] != '\0'; i++)
				ent->d_name[index++] = (type & (1 << 3)) ? tolower(buff[i]) : buff[i];
			uint8_t i;
			for (i = 11; i > 8; i--)
				if (buff[i - 1] != ' ')
    13bc:	89 85       	ldd	r24, Y+9	; 0x09
    13be:	80 32       	cpi	r24, 0x20	; 32
    13c0:	49 f0       	breq	.+18     	; 0x13d4 <__stack+0x2d5>
    13c2:	0a c0       	rjmp	.+20     	; 0x13d8 <__stack+0x2d9>
    13c4:	d0 2e       	mov	r13, r16
			for (uint8_t i = 8; i > 0; i--)
				if (buff[i - 1] != ' ')
					break;
				else
					buff[i - 1] = '\0';
			for (uint8_t i = 0; i < 8 && buff[i] != '\0'; i++)
    13c6:	f5 01       	movw	r30, r10
    13c8:	e0 0f       	add	r30, r16
    13ca:	f1 1f       	adc	r31, r17
    13cc:	80 81       	ld	r24, Z
    13ce:	88 23       	and	r24, r24
    13d0:	e9 f6       	brne	.-70     	; 0x138c <__stack+0x28d>
    13d2:	ec cf       	rjmp	.-40     	; 0x13ac <__stack+0x2ad>
			uint8_t i;
			for (i = 11; i > 8; i--)
				if (buff[i - 1] != ' ')
					break;
				else
					buff[i - 1] = '\0';
    13d4:	19 86       	std	Y+9, r1	; 0x09
    13d6:	06 c0       	rjmp	.+12     	; 0x13e4 <__stack+0x2e5>
			if (i != 8)
				ent->d_name[index++] = '.';
    13d8:	f1 01       	movw	r30, r2
    13da:	ed 0d       	add	r30, r13
    13dc:	f1 1d       	adc	r31, r1
    13de:	8e e2       	ldi	r24, 0x2E	; 46
    13e0:	80 83       	st	Z, r24
    13e2:	d3 94       	inc	r13
    13e4:	8e 01       	movw	r16, r28
    13e6:	07 5f       	subi	r16, 0xF7	; 247
    13e8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ea:	cd 2c       	mov	r12, r13
			for (i = 0; i < 3; i++)
				ent->d_name[index++] = (type & (1 << 4)) ? tolower(buff[i + 8]) : buff[i + 8];
    13ec:	e8 2c       	mov	r14, r8
    13ee:	ff 24       	eor	r15, r15
    13f0:	80 e1       	ldi	r24, 0x10	; 16
    13f2:	e8 22       	and	r14, r24
    13f4:	ff 24       	eor	r15, r15
					break;
				else
					buff[i - 1] = '\0';
			if (i != 8)
				ent->d_name[index++] = '.';
			for (i = 0; i < 3; i++)
    13f6:	9c e0       	ldi	r25, 0x0C	; 12
    13f8:	a9 2e       	mov	r10, r25
    13fa:	b1 2c       	mov	r11, r1
    13fc:	ac 0e       	add	r10, r28
    13fe:	bd 1e       	adc	r11, r29
    1400:	f8 01       	movw	r30, r16
    1402:	80 81       	ld	r24, Z
				ent->d_name[index++] = (type & (1 << 4)) ? tolower(buff[i + 8]) : buff[i + 8];
    1404:	e1 14       	cp	r14, r1
    1406:	f1 04       	cpc	r15, r1
    1408:	19 f0       	breq	.+6      	; 0x1410 <__stack+0x311>
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <tolower>
    1410:	f1 01       	movw	r30, r2
    1412:	ec 0d       	add	r30, r12
    1414:	f1 1d       	adc	r31, r1
    1416:	80 83       	st	Z, r24
    1418:	c3 94       	inc	r12
    141a:	0f 5f       	subi	r16, 0xFF	; 255
    141c:	1f 4f       	sbci	r17, 0xFF	; 255
					break;
				else
					buff[i - 1] = '\0';
			if (i != 8)
				ent->d_name[index++] = '.';
			for (i = 0; i < 3; i++)
    141e:	0a 15       	cp	r16, r10
    1420:	1b 05       	cpc	r17, r11
    1422:	71 f7       	brne	.-36     	; 0x1400 <__stack+0x301>
				ent->d_name[index++] = (type & (1 << 4)) ? tolower(buff[i + 8]) : buff[i + 8];
			ent->d_name[index++] = '\0';
    1424:	f3 e0       	ldi	r31, 0x03	; 3
    1426:	df 0e       	add	r13, r31
    1428:	f1 01       	movw	r30, r2
    142a:	ed 0d       	add	r30, r13
    142c:	f1 1d       	adc	r31, r1
    142e:	10 82       	st	Z, r1
		}
	ent->d_type = buff[11];
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	28 0e       	add	r2, r24
    1436:	39 1e       	adc	r3, r25
    1438:	8c 85       	ldd	r24, Y+12	; 0x0c
    143a:	f1 01       	movw	r30, r2
    143c:	80 83       	st	Z, r24
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	9f ef       	ldi	r25, 0xFF	; 255
    1442:	28 0e       	add	r2, r24
    1444:	39 1e       	adc	r3, r25
    1446:	ff 24       	eor	r15, r15
	for (uint8_t i = 0; i < 7; i++)
		chainRead();
    1448:	c2 01       	movw	r24, r4
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	50 e0       	ldi	r21, 0x00	; 0
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	00 e0       	ldi	r16, 0x00	; 0
    1454:	10 e0       	ldi	r17, 0x00	; 0
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
			for (i = 0; i < 3; i++)
				ent->d_name[index++] = (type & (1 << 4)) ? tolower(buff[i + 8]) : buff[i + 8];
			ent->d_name[index++] = '\0';
		}
	ent->d_type = buff[11];
	for (uint8_t i = 0; i < 7; i++)
    145e:	f3 94       	inc	r15
    1460:	97 e0       	ldi	r25, 0x07	; 7
    1462:	f9 16       	cp	r15, r25
    1464:	89 f7       	brne	.-30     	; 0x1448 <__stack+0x349>
		chainRead();
	ent->d_addr = (uint32_t)chainRead() << 16;
    1466:	c2 01       	movw	r24, r4
    1468:	40 e0       	ldi	r20, 0x00	; 0
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	00 e0       	ldi	r16, 0x00	; 0
    1472:	10 e0       	ldi	r17, 0x00	; 0
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    147c:	c8 2e       	mov	r12, r24
    147e:	dd 24       	eor	r13, r13
    1480:	ee 24       	eor	r14, r14
    1482:	ff 24       	eor	r15, r15
    1484:	76 01       	movw	r14, r12
    1486:	dd 24       	eor	r13, r13
    1488:	cc 24       	eor	r12, r12
    148a:	05 e0       	ldi	r16, 0x05	; 5
    148c:	a0 2e       	mov	r10, r16
    148e:	01 e0       	ldi	r16, 0x01	; 1
    1490:	b0 2e       	mov	r11, r16
    1492:	a2 0c       	add	r10, r2
    1494:	b3 1c       	adc	r11, r3
    1496:	f5 01       	movw	r30, r10
    1498:	c0 82       	st	Z, r12
    149a:	d1 82       	std	Z+1, r13	; 0x01
    149c:	e2 82       	std	Z+2, r14	; 0x02
    149e:	f3 82       	std	Z+3, r15	; 0x03
	ent->d_addr |= (uint32_t)chainRead() << 24;
    14a0:	c2 01       	movw	r24, r4
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	00 e0       	ldi	r16, 0x00	; 0
    14ac:	10 e0       	ldi	r17, 0x00	; 0
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	a0 e0       	ldi	r26, 0x00	; 0
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	b8 2f       	mov	r27, r24
    14be:	aa 27       	eor	r26, r26
    14c0:	99 27       	eor	r25, r25
    14c2:	88 27       	eor	r24, r24
    14c4:	8c 29       	or	r24, r12
    14c6:	9d 29       	or	r25, r13
    14c8:	ae 29       	or	r26, r14
    14ca:	bf 29       	or	r27, r15
    14cc:	f5 01       	movw	r30, r10
    14ce:	80 83       	st	Z, r24
    14d0:	91 83       	std	Z+1, r25	; 0x01
    14d2:	a2 83       	std	Z+2, r26	; 0x02
    14d4:	b3 83       	std	Z+3, r27	; 0x03
    14d6:	ff 24       	eor	r15, r15
	for (uint8_t i = 0; i < 4; i++)
		chainRead();
    14d8:	c2 01       	movw	r24, r4
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	00 e0       	ldi	r16, 0x00	; 0
    14e4:	10 e0       	ldi	r17, 0x00	; 0
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
	ent->d_type = buff[11];
	for (uint8_t i = 0; i < 7; i++)
		chainRead();
	ent->d_addr = (uint32_t)chainRead() << 16;
	ent->d_addr |= (uint32_t)chainRead() << 24;
	for (uint8_t i = 0; i < 4; i++)
    14ee:	f3 94       	inc	r15
    14f0:	f4 e0       	ldi	r31, 0x04	; 4
    14f2:	ff 16       	cp	r15, r31
    14f4:	89 f7       	brne	.-30     	; 0x14d8 <__stack+0x3d9>
		chainRead();
	ent->d_addr |= (uint32_t)chainRead();
    14f6:	a5 e0       	ldi	r26, 0x05	; 5
    14f8:	6a 2e       	mov	r6, r26
    14fa:	a1 e0       	ldi	r26, 0x01	; 1
    14fc:	7a 2e       	mov	r7, r26
    14fe:	62 0c       	add	r6, r2
    1500:	73 1c       	adc	r7, r3
    1502:	f3 01       	movw	r30, r6
    1504:	80 80       	ld	r8, Z
    1506:	91 80       	ldd	r9, Z+1	; 0x01
    1508:	a2 80       	ldd	r10, Z+2	; 0x02
    150a:	b3 80       	ldd	r11, Z+3	; 0x03
    150c:	c2 01       	movw	r24, r4
    150e:	40 e0       	ldi	r20, 0x00	; 0
    1510:	50 e0       	ldi	r21, 0x00	; 0
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	00 e0       	ldi	r16, 0x00	; 0
    1518:	10 e0       	ldi	r17, 0x00	; 0
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    1522:	c8 2e       	mov	r12, r24
    1524:	dd 24       	eor	r13, r13
    1526:	ee 24       	eor	r14, r14
    1528:	ff 24       	eor	r15, r15
    152a:	c8 28       	or	r12, r8
    152c:	d9 28       	or	r13, r9
    152e:	ea 28       	or	r14, r10
    1530:	fb 28       	or	r15, r11
    1532:	f3 01       	movw	r30, r6
    1534:	c0 82       	st	Z, r12
    1536:	d1 82       	std	Z+1, r13	; 0x01
    1538:	e2 82       	std	Z+2, r14	; 0x02
    153a:	f3 82       	std	Z+3, r15	; 0x03
	ent->d_addr |= (uint32_t)chainRead() << 8;
    153c:	c2 01       	movw	r24, r4
    153e:	40 e0       	ldi	r20, 0x00	; 0
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	00 e0       	ldi	r16, 0x00	; 0
    1548:	10 e0       	ldi	r17, 0x00	; 0
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	a0 e0       	ldi	r26, 0x00	; 0
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	ba 2f       	mov	r27, r26
    155a:	a9 2f       	mov	r26, r25
    155c:	98 2f       	mov	r25, r24
    155e:	88 27       	eor	r24, r24
    1560:	8c 29       	or	r24, r12
    1562:	9d 29       	or	r25, r13
    1564:	ae 29       	or	r26, r14
    1566:	bf 29       	or	r27, r15
    1568:	f3 01       	movw	r30, r6
    156a:	80 83       	st	Z, r24
    156c:	91 83       	std	Z+1, r25	; 0x01
    156e:	a2 83       	std	Z+2, r26	; 0x02
    1570:	b3 83       	std	Z+3, r27	; 0x03
	ent->d_size = (uint32_t)chainRead();
    1572:	c2 01       	movw	r24, r4
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	00 e0       	ldi	r16, 0x00	; 0
    157e:	10 e0       	ldi	r17, 0x00	; 0
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    1588:	c8 2e       	mov	r12, r24
    158a:	dd 24       	eor	r13, r13
    158c:	ee 24       	eor	r14, r14
    158e:	ff 24       	eor	r15, r15
    1590:	e1 e0       	ldi	r30, 0x01	; 1
    1592:	6e 2e       	mov	r6, r30
    1594:	7e 2e       	mov	r7, r30
    1596:	62 0c       	add	r6, r2
    1598:	73 1c       	adc	r7, r3
    159a:	f3 01       	movw	r30, r6
    159c:	c0 82       	st	Z, r12
    159e:	d1 82       	std	Z+1, r13	; 0x01
    15a0:	e2 82       	std	Z+2, r14	; 0x02
    15a2:	f3 82       	std	Z+3, r15	; 0x03
	ent->d_size |= (uint32_t)chainRead() << 8;
    15a4:	c2 01       	movw	r24, r4
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	50 e0       	ldi	r21, 0x00	; 0
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	00 e0       	ldi	r16, 0x00	; 0
    15b0:	10 e0       	ldi	r17, 0x00	; 0
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    15ba:	88 2e       	mov	r8, r24
    15bc:	99 24       	eor	r9, r9
    15be:	aa 24       	eor	r10, r10
    15c0:	bb 24       	eor	r11, r11
    15c2:	ba 2c       	mov	r11, r10
    15c4:	a9 2c       	mov	r10, r9
    15c6:	98 2c       	mov	r9, r8
    15c8:	88 24       	eor	r8, r8
    15ca:	8c 28       	or	r8, r12
    15cc:	9d 28       	or	r9, r13
    15ce:	ae 28       	or	r10, r14
    15d0:	bf 28       	or	r11, r15
    15d2:	f3 01       	movw	r30, r6
    15d4:	80 82       	st	Z, r8
    15d6:	91 82       	std	Z+1, r9	; 0x01
    15d8:	a2 82       	std	Z+2, r10	; 0x02
    15da:	b3 82       	std	Z+3, r11	; 0x03
	ent->d_size |= (uint32_t)chainRead() << 16;
    15dc:	c2 01       	movw	r24, r4
    15de:	40 e0       	ldi	r20, 0x00	; 0
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	00 e0       	ldi	r16, 0x00	; 0
    15e8:	10 e0       	ldi	r17, 0x00	; 0
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    15f2:	c8 2e       	mov	r12, r24
    15f4:	dd 24       	eor	r13, r13
    15f6:	ee 24       	eor	r14, r14
    15f8:	ff 24       	eor	r15, r15
    15fa:	76 01       	movw	r14, r12
    15fc:	dd 24       	eor	r13, r13
    15fe:	cc 24       	eor	r12, r12
    1600:	c8 28       	or	r12, r8
    1602:	d9 28       	or	r13, r9
    1604:	ea 28       	or	r14, r10
    1606:	fb 28       	or	r15, r11
    1608:	f3 01       	movw	r30, r6
    160a:	c0 82       	st	Z, r12
    160c:	d1 82       	std	Z+1, r13	; 0x01
    160e:	e2 82       	std	Z+2, r14	; 0x02
    1610:	f3 82       	std	Z+3, r15	; 0x03
	ent->d_size |= (uint32_t)chainRead() << 24;
    1612:	c2 01       	movw	r24, r4
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	00 e0       	ldi	r16, 0x00	; 0
    161e:	10 e0       	ldi	r17, 0x00	; 0
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN7fat32_t9chainReadEmm>
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	a0 e0       	ldi	r26, 0x00	; 0
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	b8 2f       	mov	r27, r24
    1630:	aa 27       	eor	r26, r26
    1632:	99 27       	eor	r25, r25
    1634:	88 27       	eor	r24, r24
    1636:	c8 2a       	or	r12, r24
    1638:	d9 2a       	or	r13, r25
    163a:	ea 2a       	or	r14, r26
    163c:	fb 2a       	or	r15, r27
    163e:	f3 01       	movw	r30, r6
    1640:	c0 82       	st	Z, r12
    1642:	d1 82       	std	Z+1, r13	; 0x01
    1644:	e2 82       	std	Z+2, r14	; 0x02
    1646:	f3 82       	std	Z+3, r15	; 0x03
	chainReadClose();
    1648:	c2 01       	movw	r24, r4
    164a:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN7fat32_t14chainReadCloseEv>
	if (curClus != dir->addr) {
    164e:	f2 01       	movw	r30, r4
    1650:	24 89       	ldd	r18, Z+20	; 0x14
    1652:	35 89       	ldd	r19, Z+21	; 0x15
    1654:	46 89       	ldd	r20, Z+22	; 0x16
    1656:	57 89       	ldd	r21, Z+23	; 0x17
    1658:	ed 85       	ldd	r30, Y+13	; 0x0d
    165a:	fe 85       	ldd	r31, Y+14	; 0x0e
    165c:	85 81       	ldd	r24, Z+5	; 0x05
    165e:	96 81       	ldd	r25, Z+6	; 0x06
    1660:	a7 81       	ldd	r26, Z+7	; 0x07
    1662:	b0 85       	ldd	r27, Z+8	; 0x08
    1664:	28 17       	cp	r18, r24
    1666:	39 07       	cpc	r19, r25
    1668:	4a 07       	cpc	r20, r26
    166a:	5b 07       	cpc	r21, r27
    166c:	e9 f0       	breq	.+58     	; 0x16a8 <__stack+0x5a9>
		dir->addr = curClus;
    166e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1670:	fe 85       	ldd	r31, Y+14	; 0x0e
    1672:	25 83       	std	Z+5, r18	; 0x05
    1674:	36 83       	std	Z+6, r19	; 0x06
    1676:	47 83       	std	Z+7, r20	; 0x07
    1678:	50 87       	std	Z+8, r21	; 0x08
		dir->offset %= secPerClus * 512;
    167a:	f2 01       	movw	r30, r4
    167c:	86 81       	ldd	r24, Z+6	; 0x06
    167e:	38 2f       	mov	r19, r24
    1680:	33 0f       	add	r19, r19
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	44 27       	eor	r20, r20
    1686:	37 fd       	sbrc	r19, 7
    1688:	40 95       	com	r20
    168a:	54 2f       	mov	r21, r20
    168c:	ed 85       	ldd	r30, Y+13	; 0x0d
    168e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1690:	61 85       	ldd	r22, Z+9	; 0x09
    1692:	72 85       	ldd	r23, Z+10	; 0x0a
    1694:	83 85       	ldd	r24, Z+11	; 0x0b
    1696:	94 85       	ldd	r25, Z+12	; 0x0c
    1698:	0e 94 ae 18 	call	0x315c	; 0x315c <__udivmodsi4>
    169c:	ed 85       	ldd	r30, Y+13	; 0x0d
    169e:	fe 85       	ldd	r31, Y+14	; 0x0e
    16a0:	61 87       	std	Z+9, r22	; 0x09
    16a2:	72 87       	std	Z+10, r23	; 0x0a
    16a4:	83 87       	std	Z+11, r24	; 0x0b
    16a6:	94 87       	std	Z+12, r25	; 0x0c
    16a8:	81 e0       	ldi	r24, 0x01	; 1
	}
	return true;
}
    16aa:	62 96       	adiw	r28, 0x12	; 18
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	1f 91       	pop	r17
    16bc:	0f 91       	pop	r16
    16be:	ff 90       	pop	r15
    16c0:	ef 90       	pop	r14
    16c2:	df 90       	pop	r13
    16c4:	cf 90       	pop	r12
    16c6:	bf 90       	pop	r11
    16c8:	af 90       	pop	r10
    16ca:	9f 90       	pop	r9
    16cc:	8f 90       	pop	r8
    16ce:	7f 90       	pop	r7
    16d0:	6f 90       	pop	r6
    16d2:	5f 90       	pop	r5
    16d4:	4f 90       	pop	r4
    16d6:	3f 90       	pop	r3
    16d8:	2f 90       	pop	r2
    16da:	08 95       	ret

000016dc <_ZN2op7fstructEP6__file>:
		return NULL;
	}
	return file->fp;
}

struct file_t *op::fstruct(FILE *fp)
    16dc:	bc 01       	movw	r22, r24
{
	for (uint8_t i = 0; i < MAX_FILE_CNT; i++) {
		if (!(__allocated_file__ & (1 << i)))
    16de:	80 91 16 03 	lds	r24, 0x0316
    16e2:	48 2f       	mov	r20, r24
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	a0 e1       	ldi	r26, 0x10	; 16
    16e8:	b3 e0       	ldi	r27, 0x03	; 3
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	ca 01       	movw	r24, r20
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <_ZN2op7fstructEP6__file+0x1c>
    16f4:	95 95       	asr	r25
    16f6:	87 95       	ror	r24
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <_ZN2op7fstructEP6__file+0x18>
    16fc:	80 ff       	sbrs	r24, 0
    16fe:	0b c0       	rjmp	.+22     	; 0x1716 <_ZN2op7fstructEP6__file+0x3a>
			continue;
		errno = 0;
		if (__file__[i]->fp == fp)
    1700:	ed 91       	ld	r30, X+
    1702:	fc 91       	ld	r31, X
    1704:	11 97       	sbiw	r26, 0x01	; 1
    1706:	81 81       	ldd	r24, Z+1	; 0x01
    1708:	92 81       	ldd	r25, Z+2	; 0x02
    170a:	86 17       	cp	r24, r22
    170c:	97 07       	cpc	r25, r23
    170e:	19 f4       	brne	.+6      	; 0x1716 <_ZN2op7fstructEP6__file+0x3a>
    1710:	10 92 0f 03 	sts	0x030F, r1
    1714:	0b c0       	rjmp	.+22     	; 0x172c <_ZN2op7fstructEP6__file+0x50>
    1716:	2f 5f       	subi	r18, 0xFF	; 255
    1718:	3f 4f       	sbci	r19, 0xFF	; 255
    171a:	12 96       	adiw	r26, 0x02	; 2
	return file->fp;
}

struct file_t *op::fstruct(FILE *fp)
{
	for (uint8_t i = 0; i < MAX_FILE_CNT; i++) {
    171c:	23 30       	cpi	r18, 0x03	; 3
    171e:	31 05       	cpc	r19, r1
    1720:	31 f7       	brne	.-52     	; 0x16ee <_ZN2op7fstructEP6__file+0x12>
			continue;
		errno = 0;
		if (__file__[i]->fp == fp)
			return __file__[i];
	}
	errno = EBADF;
    1722:	8f ef       	ldi	r24, 0xFF	; 255
    1724:	80 93 0f 03 	sts	0x030F, r24
    1728:	e0 e0       	ldi	r30, 0x00	; 0
    172a:	f0 e0       	ldi	r31, 0x00	; 0
	return NULL;
}
    172c:	cf 01       	movw	r24, r30
    172e:	08 95       	ret

00001730 <_ZN2op8fgetcharEP6__file>:
	file_t *__file__[MAX_FILE_CNT];
	uint8_t __allocated_file__ = 0;
	extern class fs_t *fs;
}

int op::fgetchar(FILE *fp)
    1730:	0f 93       	push	r16
    1732:	1f 93       	push	r17
    1734:	8c 01       	movw	r16, r24
{
	fs->activate(fp);
    1736:	a0 91 0d 03 	lds	r26, 0x030D
    173a:	b0 91 0e 03 	lds	r27, 0x030E
    173e:	ed 91       	ld	r30, X+
    1740:	fc 91       	ld	r31, X
    1742:	11 97       	sbiw	r26, 0x01	; 1
    1744:	02 84       	ldd	r0, Z+10	; 0x0a
    1746:	f3 85       	ldd	r31, Z+11	; 0x0b
    1748:	e0 2d       	mov	r30, r0
    174a:	cd 01       	movw	r24, r26
    174c:	b8 01       	movw	r22, r16
    174e:	09 95       	icall
	file_t *file = fstruct(fp);
    1750:	c8 01       	movw	r24, r16
    1752:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_ZN2op7fstructEP6__file>
    1756:	fc 01       	movw	r30, r24
	if (file == NULL)
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	69 f0       	breq	.+26     	; 0x1776 <_ZN2op8fgetcharEP6__file+0x46>
		return -1;
	if (file->offset == file->size)
    175c:	20 85       	ldd	r18, Z+8	; 0x08
    175e:	31 85       	ldd	r19, Z+9	; 0x09
    1760:	42 85       	ldd	r20, Z+10	; 0x0a
    1762:	53 85       	ldd	r21, Z+11	; 0x0b
    1764:	84 85       	ldd	r24, Z+12	; 0x0c
    1766:	95 85       	ldd	r25, Z+13	; 0x0d
    1768:	a6 85       	ldd	r26, Z+14	; 0x0e
    176a:	b7 85       	ldd	r27, Z+15	; 0x0f
    176c:	28 17       	cp	r18, r24
    176e:	39 07       	cpc	r19, r25
    1770:	4a 07       	cpc	r20, r26
    1772:	5b 07       	cpc	r21, r27
    1774:	19 f4       	brne	.+6      	; 0x177c <_ZN2op8fgetcharEP6__file+0x4c>
    1776:	2f ef       	ldi	r18, 0xFF	; 255
    1778:	3f ef       	ldi	r19, 0xFF	; 255
    177a:	16 c0       	rjmp	.+44     	; 0x17a8 <_ZN2op8fgetcharEP6__file+0x78>
		return -1;
	file->offset++;
    177c:	2f 5f       	subi	r18, 0xFF	; 255
    177e:	3f 4f       	sbci	r19, 0xFF	; 255
    1780:	4f 4f       	sbci	r20, 0xFF	; 255
    1782:	5f 4f       	sbci	r21, 0xFF	; 255
    1784:	20 87       	std	Z+8, r18	; 0x08
    1786:	31 87       	std	Z+9, r19	; 0x09
    1788:	42 87       	std	Z+10, r20	; 0x0a
    178a:	53 87       	std	Z+11, r21	; 0x0b
	return fs->readChar();
    178c:	e0 91 0d 03 	lds	r30, 0x030D
    1790:	f0 91 0e 03 	lds	r31, 0x030E
    1794:	a0 81       	ld	r26, Z
    1796:	b1 81       	ldd	r27, Z+1	; 0x01
    1798:	16 96       	adiw	r26, 0x06	; 6
    179a:	2d 91       	ld	r18, X+
    179c:	3c 91       	ld	r19, X
    179e:	17 97       	sbiw	r26, 0x07	; 7
    17a0:	cf 01       	movw	r24, r30
    17a2:	f9 01       	movw	r30, r18
    17a4:	09 95       	icall
    17a6:	9c 01       	movw	r18, r24
}
    17a8:	c9 01       	movw	r24, r18
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	08 95       	ret

000017b0 <_ZN2opL6fcloseEh>:
	}
	errno = ENFILE;
	return -1;
}

static int op::fclose(uint8_t fd)
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	e8 2f       	mov	r30, r24
{
	errno = EBADF;
    17b6:	8f ef       	ldi	r24, 0xFF	; 255
    17b8:	80 93 0f 03 	sts	0x030F, r24
	if (fd >= MAX_DIRENT_CNT)
    17bc:	e2 30       	cpi	r30, 0x02	; 2
    17be:	68 f4       	brcc	.+26     	; 0x17da <_ZN2opL6fcloseEh+0x2a>
		return -1;
	if ((__allocated_file__ & (1 << fd)) == 0)
    17c0:	ce 2f       	mov	r28, r30
    17c2:	d0 e0       	ldi	r29, 0x00	; 0
    17c4:	80 91 16 03 	lds	r24, 0x0316
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 2e       	mov	r0, r30
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <_ZN2opL6fcloseEh+0x22>
    17ce:	95 95       	asr	r25
    17d0:	87 95       	ror	r24
    17d2:	0a 94       	dec	r0
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <_ZN2opL6fcloseEh+0x1e>
    17d6:	80 fd       	sbrc	r24, 0
    17d8:	03 c0       	rjmp	.+6      	; 0x17e0 <_ZN2opL6fcloseEh+0x30>
    17da:	2f ef       	ldi	r18, 0xFF	; 255
    17dc:	3f ef       	ldi	r19, 0xFF	; 255
    17de:	1a c0       	rjmp	.+52     	; 0x1814 <_ZN2opL6fcloseEh+0x64>
		return -1;
	errno = 0;
    17e0:	10 92 0f 03 	sts	0x030F, r1
	free(__file__[fd]);
    17e4:	fe 01       	movw	r30, r28
    17e6:	ee 0f       	add	r30, r30
    17e8:	ff 1f       	adc	r31, r31
    17ea:	e0 5f       	subi	r30, 0xF0	; 240
    17ec:	fc 4f       	sbci	r31, 0xFC	; 252
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	0e 94 83 19 	call	0x3306	; 0x3306 <free>
	__allocated_file__ &= ~(1 << fd);
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <_ZN2opL6fcloseEh+0x50>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	ca 95       	dec	r28
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <_ZN2opL6fcloseEh+0x4c>
    1804:	80 95       	com	r24
    1806:	20 91 16 03 	lds	r18, 0x0316
    180a:	28 23       	and	r18, r24
    180c:	20 93 16 03 	sts	0x0316, r18
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
	return 0;
}
    1814:	c9 01       	movw	r24, r18
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	08 95       	ret

0000181c <_ZN2op6fcloseEP6__file>:
	}
	errno = EBADF;
	return NULL;
}

int op::fclose(FILE *fp)
    181c:	0f 93       	push	r16
    181e:	1f 93       	push	r17
    1820:	8c 01       	movw	r16, r24
{
	fs->readClose();
    1822:	a0 91 0d 03 	lds	r26, 0x030D
    1826:	b0 91 0e 03 	lds	r27, 0x030E
    182a:	ed 91       	ld	r30, X+
    182c:	fc 91       	ld	r31, X
    182e:	11 97       	sbiw	r26, 0x01	; 1
    1830:	00 84       	ldd	r0, Z+8	; 0x08
    1832:	f1 85       	ldd	r31, Z+9	; 0x09
    1834:	e0 2d       	mov	r30, r0
    1836:	cd 01       	movw	r24, r26
    1838:	09 95       	icall
	return fclose(fstruct(fp)->des);
    183a:	c8 01       	movw	r24, r16
    183c:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_ZN2op7fstructEP6__file>
    1840:	fc 01       	movw	r30, r24
    1842:	80 81       	ld	r24, Z
    1844:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_ZN2opL6fcloseEh>
}
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	08 95       	ret

0000184e <_ZN2op5fopenEPKcS1_>:
	free(__file__[fd]);
	__allocated_file__ &= ~(1 << fd);
	return 0;
}

FILE *op::fopen(const char *path, const char *mode)
    184e:	cf 92       	push	r12
    1850:	df 92       	push	r13
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	6c 01       	movw	r12, r24
}

static int8_t op::alloc_file(void)
{
	for (uint8_t i = 0; i < MAX_FILE_CNT; i++) {
		if (__allocated_file__ & (1 << i))
    185e:	80 91 16 03 	lds	r24, 0x0316
    1862:	80 fd       	sbrc	r24, 0
    1864:	04 c0       	rjmp	.+8      	; 0x186e <_ZN2op5fopenEPKcS1_+0x20>
    1866:	c0 e0       	ldi	r28, 0x00	; 0
    1868:	d0 e0       	ldi	r29, 0x00	; 0
    186a:	ff 24       	eor	r15, r15
    186c:	0d c0       	rjmp	.+26     	; 0x1888 <_ZN2op5fopenEPKcS1_+0x3a>
    186e:	81 fd       	sbrc	r24, 1
    1870:	05 c0       	rjmp	.+10     	; 0x187c <_ZN2op5fopenEPKcS1_+0x2e>
    1872:	c1 e0       	ldi	r28, 0x01	; 1
    1874:	d0 e0       	ldi	r29, 0x00	; 0
    1876:	ff 24       	eor	r15, r15
    1878:	f3 94       	inc	r15
    187a:	06 c0       	rjmp	.+12     	; 0x1888 <_ZN2op5fopenEPKcS1_+0x3a>
    187c:	82 fd       	sbrc	r24, 2
    187e:	14 c0       	rjmp	.+40     	; 0x18a8 <_ZN2op5fopenEPKcS1_+0x5a>
    1880:	c2 e0       	ldi	r28, 0x02	; 2
    1882:	d0 e0       	ldi	r29, 0x00	; 0
    1884:	32 e0       	ldi	r19, 0x02	; 2
    1886:	f3 2e       	mov	r15, r19
			continue;
		if ((__file__[i] = (file_t *)malloc(sizeof(file_t))) == NULL) {
    1888:	80 e1       	ldi	r24, 0x10	; 16
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 d6 18 	call	0x31ac	; 0x31ac <malloc>
    1890:	dc 01       	movw	r26, r24
    1892:	fe 01       	movw	r30, r28
    1894:	ee 0f       	add	r30, r30
    1896:	ff 1f       	adc	r31, r31
    1898:	e0 5f       	subi	r30, 0xF0	; 240
    189a:	fc 4f       	sbci	r31, 0xFC	; 252
    189c:	91 83       	std	Z+1, r25	; 0x01
    189e:	80 83       	st	Z, r24
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	31 f4       	brne	.+12     	; 0x18b0 <_ZN2op5fopenEPKcS1_+0x62>
			errno = ENOMEM;
    18a4:	86 e0       	ldi	r24, 0x06	; 6
    18a6:	01 c0       	rjmp	.+2      	; 0x18aa <_ZN2op5fopenEPKcS1_+0x5c>
		}
		__allocated_file__ |= 1 << i;
		__file__[i]->des = i;
		return i;
	}
	errno = ENFILE;
    18a8:	83 e0       	ldi	r24, 0x03	; 3
    18aa:	80 93 0f 03 	sts	0x030F, r24
    18ae:	42 c0       	rjmp	.+132    	; 0x1934 <_ZN2op5fopenEPKcS1_+0xe6>
			continue;
		if ((__file__[i] = (file_t *)malloc(sizeof(file_t))) == NULL) {
			errno = ENOMEM;
			return -1;
		}
		__allocated_file__ |= 1 << i;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <_ZN2op5fopenEPKcS1_+0x6c>
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	ca 95       	dec	r28
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <_ZN2op5fopenEPKcS1_+0x68>
    18be:	20 91 16 03 	lds	r18, 0x0316
    18c2:	28 2b       	or	r18, r24
    18c4:	20 93 16 03 	sts	0x0316, r18
		__file__[i]->des = i;
    18c8:	fc 92       	st	X, r15
FILE *op::fopen(const char *path, const char *mode)
{
	uint8_t fd;
	if ((int8_t)(fd = alloc_file()) == -1)
		return NULL;
	file_t *file = __file__[fd];
    18ca:	ef 2d       	mov	r30, r15
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	ee 0f       	add	r30, r30
    18d0:	ff 1f       	adc	r31, r31
    18d2:	e0 5f       	subi	r30, 0xF0	; 240
    18d4:	fc 4f       	sbci	r31, 0xFC	; 252
    18d6:	00 81       	ld	r16, Z
    18d8:	11 81       	ldd	r17, Z+1	; 0x01
	if (!fs->readFileInfo(path, file)) {
    18da:	a0 91 0d 03 	lds	r26, 0x030D
    18de:	b0 91 0e 03 	lds	r27, 0x030E
    18e2:	ed 91       	ld	r30, X+
    18e4:	fc 91       	ld	r31, X
    18e6:	11 97       	sbiw	r26, 0x01	; 1
    18e8:	04 80       	ldd	r0, Z+4	; 0x04
    18ea:	f5 81       	ldd	r31, Z+5	; 0x05
    18ec:	e0 2d       	mov	r30, r0
    18ee:	cd 01       	movw	r24, r26
    18f0:	b6 01       	movw	r22, r12
    18f2:	a8 01       	movw	r20, r16
    18f4:	09 95       	icall
    18f6:	88 23       	and	r24, r24
    18f8:	51 f4       	brne	.+20     	; 0x190e <_ZN2op5fopenEPKcS1_+0xc0>
		uint8_t err = errno;
    18fa:	10 91 0f 03 	lds	r17, 0x030F
		if (fclose(fd) == 0)
    18fe:	8f 2d       	mov	r24, r15
    1900:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_ZN2opL6fcloseEh>
    1904:	89 2b       	or	r24, r25
    1906:	b1 f4       	brne	.+44     	; 0x1934 <_ZN2op5fopenEPKcS1_+0xe6>
			errno = err;
    1908:	10 93 0f 03 	sts	0x030F, r17
    190c:	13 c0       	rjmp	.+38     	; 0x1934 <_ZN2op5fopenEPKcS1_+0xe6>
		return NULL;
	}
	if ((file->fp = fdevopen(NULL, op::fgetchar)) == NULL) {
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	68 e9       	ldi	r22, 0x98	; 152
    1914:	7b e0       	ldi	r23, 0x0B	; 11
    1916:	0e 94 05 1a 	call	0x340a	; 0x340a <fdevopen>
    191a:	ec 01       	movw	r28, r24
    191c:	f8 01       	movw	r30, r16
    191e:	92 83       	std	Z+2, r25	; 0x02
    1920:	81 83       	std	Z+1, r24	; 0x01
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	49 f4       	brne	.+18     	; 0x1938 <_ZN2op5fopenEPKcS1_+0xea>
		fclose(fd);
    1926:	8f 2d       	mov	r24, r15
    1928:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_ZN2opL6fcloseEh>
		errno = ENOMEM;
    192c:	86 e0       	ldi	r24, 0x06	; 6
    192e:	80 93 0f 03 	sts	0x030F, r24
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <_ZN2op5fopenEPKcS1_+0xea>
		return NULL;
    1934:	c0 e0       	ldi	r28, 0x00	; 0
    1936:	d0 e0       	ldi	r29, 0x00	; 0
	}
	return file->fp;
}
    1938:	ce 01       	movw	r24, r28
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	1f 91       	pop	r17
    1940:	0f 91       	pop	r16
    1942:	ff 90       	pop	r15
    1944:	df 90       	pop	r13
    1946:	cf 90       	pop	r12
    1948:	08 95       	ret

0000194a <_GLOBAL__I_sd>:
#include "apps.h"
#include "dac.h"

#define PI	3.1415927

class sdhw_t sd;
    194a:	87 e1       	ldi	r24, 0x17	; 23
    194c:	93 e0       	ldi	r25, 0x03	; 3
    194e:	0e 94 9c 10 	call	0x2138	; 0x2138 <_ZN6sdhw_tC1Ev>
	apps::wav("/Il Matto/Testing/river.wav");

	goto fin;

	return 1;
}
    1952:	08 95       	ret

00001954 <_Z4initv>:

class sdhw_t sd;

void init(void)
{
	DDRB |= 0x80;			// LED
    1954:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= 0x80;
    1956:	2f 9a       	sbi	0x05, 7	; 5
	init_dac();
    1958:	0e 94 f5 11 	call	0x23ea	; 0x23ea <init_dac>
	sei();
    195c:	78 94       	sei
	tft::init();
    195e:	0e 94 bc 14 	call	0x2978	; 0x2978 <_ZN3tft4initEv>
	tft::setOrient(tft::Landscape | tft::Flipped);
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	0e 94 99 14 	call	0x2932	; 0x2932 <_ZN3tft9setOrientEh>
	tft::foreground = COLOUR_565_888(0x00FF00);
    1968:	80 ee       	ldi	r24, 0xE0	; 224
    196a:	97 e0       	ldi	r25, 0x07	; 7
    196c:	90 93 30 03 	sts	0x0330, r25
    1970:	80 93 2f 03 	sts	0x032F, r24
	tft::background = 0;
    1974:	10 92 32 03 	sts	0x0332, r1
    1978:	10 92 31 03 	sts	0x0331, r1
#endif

	void line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t c);
	void frame(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t s, uint16_t c);
	void fill(uint16_t clr);
	static inline void clean() {fill(background); x = 0; y = 0;}
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	0e 94 88 16 	call	0x2d10	; 0x2d10 <_ZN3tft4fillEj>
    1984:	10 92 28 03 	sts	0x0328, r1
    1988:	10 92 27 03 	sts	0x0327, r1
    198c:	10 92 2a 03 	sts	0x032A, r1
    1990:	10 92 29 03 	sts	0x0329, r1
	tft::clean();
	stdout = tft::devout();
    1994:	0e 94 7d 17 	call	0x2efa	; 0x2efa <_ZN3tft6devoutEv>
    1998:	90 93 3d 03 	sts	0x033D, r25
    199c:	80 93 3c 03 	sts	0x033C, r24
}

static inline void tfthw::setBGLight(bool ctrl)
{
	if (ctrl)
		TFT_WCTRL |= TFT_BLC;
    19a0:	11 9a       	sbi	0x02, 1	; 2
	tft::setBGLight(true);
}
    19a2:	08 95       	ret

000019a4 <main>:

int main(void)
    19a4:	2f 92       	push	r2
    19a6:	3f 92       	push	r3
    19a8:	4f 92       	push	r4
    19aa:	5f 92       	push	r5
    19ac:	6f 92       	push	r6
    19ae:	7f 92       	push	r7
    19b0:	8f 92       	push	r8
    19b2:	9f 92       	push	r9
    19b4:	af 92       	push	r10
    19b6:	bf 92       	push	r11
    19b8:	cf 92       	push	r12
    19ba:	df 92       	push	r13
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	c3 54       	subi	r28, 0x43	; 67
    19ce:	d0 40       	sbci	r29, 0x00	; 0
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
{
	init();
    19da:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_Z4initv>
{
	if (!hw->streamStart(hw_t::Read, 0)) {
		errno = 1;
		return;
	}
	hw->skipBytes(446);
    19de:	71 e1       	ldi	r23, 0x11	; 17
    19e0:	67 2e       	mov	r6, r23
    19e2:	71 2c       	mov	r7, r1
    19e4:	6c 0e       	add	r6, r28
    19e6:	7d 1e       	adc	r7, r29
}

inline void mbr_t::setEntry(const uint8_t index, uint8_t data[])
{
	_type[index] = data[4];
	for (uint8_t i = 0; i < 4; i++) {
    19e8:	9e 01       	movw	r18, r28
    19ea:	28 5f       	subi	r18, 0xF8	; 248
    19ec:	3f 4f       	sbci	r19, 0xFF	; 255
    19ee:	24 96       	adiw	r28, 0x04	; 4
    19f0:	3f af       	std	Y+63, r19	; 0x3f
    19f2:	2e af       	std	Y+62, r18	; 0x3e
    19f4:	24 97       	sbiw	r28, 0x04	; 4
	if (!hw->streamStart(hw_t::Read, 0)) {
		errno = 1;
		return;
	}
	hw->skipBytes(446);
	for (uint8_t j = 0; j < 4; j++) {
    19f6:	66 e2       	ldi	r22, 0x26	; 38
    19f8:	a6 2e       	mov	r10, r22
    19fa:	b1 2c       	mov	r11, r1
    19fc:	ac 0e       	add	r10, r28
    19fe:	bd 1e       	adc	r11, r29
	*/
}
#endif
static uint8_t apps::wav(const char *path)
{
	printf("apps::wav(): \'%s\'\n", path);
    1a00:	50 e7       	ldi	r21, 0x70	; 112
    1a02:	85 2e       	mov	r8, r21
    1a04:	52 e0       	ldi	r21, 0x02	; 2
    1a06:	95 2e       	mov	r9, r21
	}
	puts("Partition 1 is FAT32, reading...");

	fat32_t fs(&sd, mbr.address(0));
	if (fs.err()) {
		printf("Read FAT32 file system failed: %u\n", fs.err());
    1a08:	4a e3       	ldi	r20, 0x3A	; 58
    1a0a:	44 2e       	mov	r4, r20
    1a0c:	42 e0       	ldi	r20, 0x02	; 2
    1a0e:	54 2e       	mov	r5, r20
	if (mbr.err()) {
		printf("Read MBR failed: %u\n", mbr.err());
		goto fin;
	}
	if (mbr.type(0) != mbr_t::FAT32) {
		printf("Partition 1 (0x%02X) is not FAT32!\n", mbr.type(0));
    1a10:	35 ef       	ldi	r19, 0xF5	; 245
    1a12:	23 2e       	mov	r2, r19
    1a14:	31 e0       	ldi	r19, 0x01	; 1
    1a16:	33 2e       	mov	r3, r19
    1a18:	0a c0       	rjmp	.+20     	; 0x1a2e <main+0x8a>
{
	init();
	goto start;

fin:
	puts("Test finished, remove SDCard to run again...");
    1a1a:	89 e2       	ldi	r24, 0x29	; 41
    1a1c:	91 e0       	ldi	r25, 0x01	; 1
    1a1e:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <puts>
	while (sd.detect());
    1a22:	87 e1       	ldi	r24, 0x17	; 23
    1a24:	93 e0       	ldi	r25, 0x03	; 3
    1a26:	0e 94 bc 10 	call	0x2178	; 0x2178 <_ZN6sdhw_t6detectEv>
    1a2a:	88 23       	and	r24, r24
    1a2c:	d1 f7       	brne	.-12     	; 0x1a22 <main+0x7e>
    1a2e:	80 91 31 03 	lds	r24, 0x0331
    1a32:	90 91 32 03 	lds	r25, 0x0332
    1a36:	0e 94 88 16 	call	0x2d10	; 0x2d10 <_ZN3tft4fillEj>
    1a3a:	10 92 28 03 	sts	0x0328, r1
    1a3e:	10 92 27 03 	sts	0x0327, r1
    1a42:	10 92 2a 03 	sts	0x032A, r1
    1a46:	10 92 29 03 	sts	0x0329, r1
start:
	tft::clean();
	tft::zoom = 1;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	80 93 24 03 	sts	0x0324, r24
	puts("*** SDCard library test ***");
    1a50:	86 e5       	ldi	r24, 0x56	; 86
    1a52:	91 e0       	ldi	r25, 0x01	; 1
    1a54:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <puts>
	puts("Please insert SDCard...");
    1a58:	82 e7       	ldi	r24, 0x72	; 114
    1a5a:	91 e0       	ldi	r25, 0x01	; 1
    1a5c:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <puts>
	while (!sd.detect());
    1a60:	87 e1       	ldi	r24, 0x17	; 23
    1a62:	93 e0       	ldi	r25, 0x03	; 3
    1a64:	0e 94 bc 10 	call	0x2178	; 0x2178 <_ZN6sdhw_t6detectEv>
    1a68:	88 23       	and	r24, r24
    1a6a:	d1 f3       	breq	.-12     	; 0x1a60 <main+0xbc>
	printf("SDCard detected, %swrite protected, ", sd.writeProtected() ? "" : "not ");
    1a6c:	18 99       	sbic	0x03, 0	; 3
    1a6e:	03 c0       	rjmp	.+6      	; 0x1a76 <main+0xd2>
    1a70:	8a e8       	ldi	r24, 0x8A	; 138
    1a72:	91 e0       	ldi	r25, 0x01	; 1
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <main+0xd6>
    1a76:	8f e8       	ldi	r24, 0x8F	; 143
    1a78:	91 e0       	ldi	r25, 0x01	; 1
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <main+0xd8>
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <main+0xda>
    1a7e:	e0 e9       	ldi	r30, 0x90	; 144
    1a80:	f1 e0       	ldi	r31, 0x01	; 1
    1a82:	ad b7       	in	r26, 0x3d	; 61
    1a84:	be b7       	in	r27, 0x3e	; 62
    1a86:	12 96       	adiw	r26, 0x02	; 2
    1a88:	fc 93       	st	X, r31
    1a8a:	ee 93       	st	-X, r30
    1a8c:	11 97       	sbiw	r26, 0x01	; 1
    1a8e:	14 96       	adiw	r26, 0x04	; 4
    1a90:	9c 93       	st	X, r25
    1a92:	8e 93       	st	-X, r24
    1a94:	13 97       	sbiw	r26, 0x03	; 3
    1a96:	0e 94 bc 1a 	call	0x3578	; 0x3578 <printf>

	uint8_t err;
	if ((err = sd.init()) != 0x00) {
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	87 e1       	ldi	r24, 0x17	; 23
    1aa4:	93 e0       	ldi	r25, 0x03	; 3
    1aa6:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <_ZN6sdhw_t4initEv>
    1aaa:	88 23       	and	r24, r24
    1aac:	f9 f0       	breq	.+62     	; 0x1aec <main+0x148>
		printf("Initialisation failed: %u, err: %u\n", err, sd.err());
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <main+0x10c>
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <main+0x10e>
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <main+0x110>
    1ab4:	ed b7       	in	r30, 0x3d	; 61
    1ab6:	fe b7       	in	r31, 0x3e	; 62
    1ab8:	31 96       	adiw	r30, 0x01	; 1
    1aba:	25 eb       	ldi	r18, 0xB5	; 181
    1abc:	31 e0       	ldi	r19, 0x01	; 1
    1abe:	ad b7       	in	r26, 0x3d	; 61
    1ac0:	be b7       	in	r27, 0x3e	; 62
    1ac2:	12 96       	adiw	r26, 0x02	; 2
    1ac4:	3c 93       	st	X, r19
    1ac6:	2e 93       	st	-X, r18
    1ac8:	11 97       	sbiw	r26, 0x01	; 1
    1aca:	82 83       	std	Z+2, r24	; 0x02
    1acc:	13 82       	std	Z+3, r1	; 0x03
    1ace:	80 91 21 03 	lds	r24, 0x0321
    1ad2:	84 83       	std	Z+4, r24	; 0x04
    1ad4:	15 82       	std	Z+5, r1	; 0x05
    1ad6:	0e 94 bc 1a 	call	0x3578	; 0x3578 <printf>
    1ada:	8d b7       	in	r24, 0x3d	; 61
    1adc:	9e b7       	in	r25, 0x3e	; 62
    1ade:	06 96       	adiw	r24, 0x06	; 6
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	9e bf       	out	0x3e, r25	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	8d bf       	out	0x3d, r24	; 61
    1aea:	97 cf       	rjmp	.-210    	; 0x1a1a <main+0x76>
		goto fin;
	}
	printf("%u GB\n", (uint16_t)(sd.size() / 1024 / 1024));
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <main+0x14a>
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <main+0x14c>
    1af0:	ed b7       	in	r30, 0x3d	; 61
    1af2:	fe b7       	in	r31, 0x3e	; 62
    1af4:	31 96       	adiw	r30, 0x01	; 1
    1af6:	29 ed       	ldi	r18, 0xD9	; 217
    1af8:	31 e0       	ldi	r19, 0x01	; 1
    1afa:	ad b7       	in	r26, 0x3d	; 61
    1afc:	be b7       	in	r27, 0x3e	; 62
    1afe:	12 96       	adiw	r26, 0x02	; 2
    1b00:	3c 93       	st	X, r19
    1b02:	2e 93       	st	-X, r18
    1b04:	11 97       	sbiw	r26, 0x01	; 1
    1b06:	80 91 1b 03 	lds	r24, 0x031B
    1b0a:	90 91 1c 03 	lds	r25, 0x031C
    1b0e:	a0 91 1d 03 	lds	r26, 0x031D
    1b12:	b0 91 1e 03 	lds	r27, 0x031E
    1b16:	24 e1       	ldi	r18, 0x14	; 20
    1b18:	b6 95       	lsr	r27
    1b1a:	a7 95       	ror	r26
    1b1c:	97 95       	ror	r25
    1b1e:	87 95       	ror	r24
    1b20:	2a 95       	dec	r18
    1b22:	d1 f7       	brne	.-12     	; 0x1b18 <main+0x174>
    1b24:	93 83       	std	Z+3, r25	; 0x03
    1b26:	82 83       	std	Z+2, r24	; 0x02
    1b28:	0e 94 bc 1a 	call	0x3578	; 0x3578 <printf>
	uint32_t _addr[4];
};

inline mbr_t::mbr_t(hw_t *hw)
{
	if (!hw->streamStart(hw_t::Read, 0)) {
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	e0 91 17 03 	lds	r30, 0x0317
    1b38:	f0 91 18 03 	lds	r31, 0x0318
    1b3c:	01 90       	ld	r0, Z+
    1b3e:	f0 81       	ld	r31, Z
    1b40:	e0 2d       	mov	r30, r0
    1b42:	87 e1       	ldi	r24, 0x17	; 23
    1b44:	93 e0       	ldi	r25, 0x03	; 3
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	50 e0       	ldi	r21, 0x00	; 0
    1b50:	09 95       	icall
    1b52:	88 23       	and	r24, r24
    1b54:	11 f4       	brne	.+4      	; 0x1b5a <main+0x1b6>
    1b56:	11 e0       	ldi	r17, 0x01	; 1
    1b58:	74 c0       	rjmp	.+232    	; 0x1c42 <main+0x29e>
		errno = 1;
		return;
	}
	hw->skipBytes(446);
    1b5a:	e0 91 17 03 	lds	r30, 0x0317
    1b5e:	f0 91 18 03 	lds	r31, 0x0318
    1b62:	04 80       	ldd	r0, Z+4	; 0x04
    1b64:	f5 81       	ldd	r31, Z+5	; 0x05
    1b66:	e0 2d       	mov	r30, r0
    1b68:	87 e1       	ldi	r24, 0x17	; 23
    1b6a:	93 e0       	ldi	r25, 0x03	; 3
    1b6c:	6e eb       	ldi	r22, 0xBE	; 190
    1b6e:	71 e0       	ldi	r23, 0x01	; 1
    1b70:	09 95       	icall
    1b72:	96 e1       	ldi	r25, 0x16	; 22
    1b74:	e9 2e       	mov	r14, r25
    1b76:	f1 2c       	mov	r15, r1
    1b78:	ec 0e       	add	r14, r28
    1b7a:	fd 1e       	adc	r15, r29
    1b7c:	63 01       	movw	r12, r6
    1b7e:	3a c0       	rjmp	.+116    	; 0x1bf4 <main+0x250>
	for (uint8_t j = 0; j < 4; j++) {
		uint8_t data[16];
		for (uint8_t i = 0; i < 16; i++)
			data[i] = hw->nextByte();
    1b80:	e0 91 17 03 	lds	r30, 0x0317
    1b84:	f0 91 18 03 	lds	r31, 0x0318
    1b88:	06 80       	ldd	r0, Z+6	; 0x06
    1b8a:	f7 81       	ldd	r31, Z+7	; 0x07
    1b8c:	e0 2d       	mov	r30, r0
    1b8e:	87 e1       	ldi	r24, 0x17	; 23
    1b90:	93 e0       	ldi	r25, 0x03	; 3
    1b92:	09 95       	icall
    1b94:	d8 01       	movw	r26, r16
    1b96:	8d 93       	st	X+, r24
    1b98:	8d 01       	movw	r16, r26
		return;
	}
	hw->skipBytes(446);
	for (uint8_t j = 0; j < 4; j++) {
		uint8_t data[16];
		for (uint8_t i = 0; i < 16; i++)
    1b9a:	a6 15       	cp	r26, r6
    1b9c:	b7 05       	cpc	r27, r7
    1b9e:	81 f7       	brne	.-32     	; 0x1b80 <main+0x1dc>
	}
}

inline void mbr_t::setEntry(const uint8_t index, uint8_t data[])
{
	_type[index] = data[4];
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	f6 01       	movw	r30, r12
    1ba4:	80 83       	st	Z, r24
    1ba6:	d7 01       	movw	r26, r14
    1ba8:	2d 91       	ld	r18, X+
    1baa:	3d 91       	ld	r19, X+
    1bac:	4d 91       	ld	r20, X+
    1bae:	5c 91       	ld	r21, X
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	3c 96       	adiw	r30, 0x0c	; 12
	for (uint8_t i = 0; i < 4; i++) {
		_addr[index] <<= 8;
    1bb4:	54 2f       	mov	r21, r20
    1bb6:	43 2f       	mov	r20, r19
    1bb8:	32 2f       	mov	r19, r18
    1bba:	22 27       	eor	r18, r18
		_addr[index] |= data[8 + (3 - i)];
    1bbc:	80 81       	ld	r24, Z
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a0 e0       	ldi	r26, 0x00	; 0
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	28 2b       	or	r18, r24
    1bc6:	39 2b       	or	r19, r25
    1bc8:	4a 2b       	or	r20, r26
    1bca:	5b 2b       	or	r21, r27
    1bcc:	31 97       	sbiw	r30, 0x01	; 1
}

inline void mbr_t::setEntry(const uint8_t index, uint8_t data[])
{
	_type[index] = data[4];
	for (uint8_t i = 0; i < 4; i++) {
    1bce:	24 96       	adiw	r28, 0x04	; 4
    1bd0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bd2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bd4:	24 97       	sbiw	r28, 0x04	; 4
    1bd6:	e8 17       	cp	r30, r24
    1bd8:	f9 07       	cpc	r31, r25
    1bda:	61 f7       	brne	.-40     	; 0x1bb4 <main+0x210>
    1bdc:	d7 01       	movw	r26, r14
    1bde:	2d 93       	st	X+, r18
    1be0:	3d 93       	st	X+, r19
    1be2:	4d 93       	st	X+, r20
    1be4:	5d 93       	st	X+, r21
    1be6:	7d 01       	movw	r14, r26
    1be8:	08 94       	sec
    1bea:	c1 1c       	adc	r12, r1
    1bec:	d1 1c       	adc	r13, r1
	if (!hw->streamStart(hw_t::Read, 0)) {
		errno = 1;
		return;
	}
	hw->skipBytes(446);
	for (uint8_t j = 0; j < 4; j++) {
    1bee:	aa 15       	cp	r26, r10
    1bf0:	bb 05       	cpc	r27, r11
    1bf2:	21 f0       	breq	.+8      	; 0x1bfc <main+0x258>
    1bf4:	8e 01       	movw	r16, r28
    1bf6:	0f 5f       	subi	r16, 0xFF	; 255
    1bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfa:	c2 cf       	rjmp	.-124    	; 0x1b80 <main+0x1dc>
		uint8_t data[16];
		for (uint8_t i = 0; i < 16; i++)
			data[i] = hw->nextByte();
		setEntry(j, data);
	}
	if (hw->nextBytes(2) != 0xAA55)
    1bfc:	e0 91 17 03 	lds	r30, 0x0317
    1c00:	f0 91 18 03 	lds	r31, 0x0318
    1c04:	00 84       	ldd	r0, Z+8	; 0x08
    1c06:	f1 85       	ldd	r31, Z+9	; 0x09
    1c08:	e0 2d       	mov	r30, r0
    1c0a:	87 e1       	ldi	r24, 0x17	; 23
    1c0c:	93 e0       	ldi	r25, 0x03	; 3
    1c0e:	62 e0       	ldi	r22, 0x02	; 2
    1c10:	09 95       	icall
    1c12:	65 55       	subi	r22, 0x55	; 85
    1c14:	7a 4a       	sbci	r23, 0xAA	; 170
    1c16:	80 40       	sbci	r24, 0x00	; 0
    1c18:	90 40       	sbci	r25, 0x00	; 0
    1c1a:	11 f4       	brne	.+4      	; 0x1c20 <main+0x27c>
    1c1c:	10 e0       	ldi	r17, 0x00	; 0
    1c1e:	01 c0       	rjmp	.+2      	; 0x1c22 <main+0x27e>
    1c20:	12 e0       	ldi	r17, 0x02	; 2
		errno = 2;
	else
		errno = 0;
	if (!hw->streamStop(hw_t::Read)) {
    1c22:	e0 91 17 03 	lds	r30, 0x0317
    1c26:	f0 91 18 03 	lds	r31, 0x0318
    1c2a:	02 80       	ldd	r0, Z+2	; 0x02
    1c2c:	f3 81       	ldd	r31, Z+3	; 0x03
    1c2e:	e0 2d       	mov	r30, r0
    1c30:	87 e1       	ldi	r24, 0x17	; 23
    1c32:	93 e0       	ldi	r25, 0x03	; 3
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	09 95       	icall
    1c38:	88 23       	and	r24, r24
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <main+0x29a>
    1c3c:	c0 c0       	rjmp	.+384    	; 0x1dbe <main+0x41a>

	class mbr_t mbr(&sd);
	if (mbr.err()) {
    1c3e:	11 23       	and	r17, r17
    1c40:	79 f0       	breq	.+30     	; 0x1c60 <main+0x2bc>
		printf("Read MBR failed: %u\n", mbr.err());
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <main+0x2a0>
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <main+0x2a2>
    1c46:	ed b7       	in	r30, 0x3d	; 61
    1c48:	fe b7       	in	r31, 0x3e	; 62
    1c4a:	31 96       	adiw	r30, 0x01	; 1
    1c4c:	20 ee       	ldi	r18, 0xE0	; 224
    1c4e:	31 e0       	ldi	r19, 0x01	; 1
    1c50:	ad b7       	in	r26, 0x3d	; 61
    1c52:	be b7       	in	r27, 0x3e	; 62
    1c54:	12 96       	adiw	r26, 0x02	; 2
    1c56:	3c 93       	st	X, r19
    1c58:	2e 93       	st	-X, r18
    1c5a:	11 97       	sbiw	r26, 0x01	; 1
    1c5c:	12 83       	std	Z+2, r17	; 0x02
    1c5e:	0f c0       	rjmp	.+30     	; 0x1c7e <main+0x2da>
	enum FSTypes {Empty = 0x00, FAT32_OLD = 0x0B, FAT32 = 0x0C};
	enum ErrorTypes {Succeed = 0, DataStartFailed = 1, NoMBRExist = 2, DataStopFailed = 3};

	inline mbr_t(hw_t *hw);
	inline uint8_t err(void) const {return errno;}
	inline uint8_t type(const uint8_t index) const {return _type[index];}
    1c60:	89 89       	ldd	r24, Y+17	; 0x11
		goto fin;
	}
	if (mbr.type(0) != mbr_t::FAT32) {
    1c62:	8c 30       	cpi	r24, 0x0C	; 12
    1c64:	a1 f0       	breq	.+40     	; 0x1c8e <main+0x2ea>
		printf("Partition 1 (0x%02X) is not FAT32!\n", mbr.type(0));
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <main+0x2c4>
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <main+0x2c6>
    1c6a:	ed b7       	in	r30, 0x3d	; 61
    1c6c:	fe b7       	in	r31, 0x3e	; 62
    1c6e:	31 96       	adiw	r30, 0x01	; 1
    1c70:	ad b7       	in	r26, 0x3d	; 61
    1c72:	be b7       	in	r27, 0x3e	; 62
    1c74:	12 96       	adiw	r26, 0x02	; 2
    1c76:	3c 92       	st	X, r3
    1c78:	2e 92       	st	-X, r2
    1c7a:	11 97       	sbiw	r26, 0x01	; 1
    1c7c:	82 83       	std	Z+2, r24	; 0x02
    1c7e:	13 82       	std	Z+3, r1	; 0x03
    1c80:	0e 94 bc 1a 	call	0x3578	; 0x3578 <printf>
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	c6 ce       	rjmp	.-628    	; 0x1a1a <main+0x76>
		goto fin;
	}
	puts("Partition 1 is FAT32, reading...");
    1c8e:	89 e1       	ldi	r24, 0x19	; 25
    1c90:	92 e0       	ldi	r25, 0x02	; 2
    1c92:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <puts>

	fat32_t fs(&sd, mbr.address(0));
    1c96:	2e 89       	ldd	r18, Y+22	; 0x16
    1c98:	3f 89       	ldd	r19, Y+23	; 0x17
    1c9a:	48 8d       	ldd	r20, Y+24	; 0x18
    1c9c:	59 8d       	ldd	r21, Y+25	; 0x19
    1c9e:	c5 01       	movw	r24, r10
    1ca0:	67 e1       	ldi	r22, 0x17	; 23
    1ca2:	73 e0       	ldi	r23, 0x03	; 3
    1ca4:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN7fat32_tC1EP4hw_tm>
{
public:
	enum ErrorTypes {Succeed = 0, DataStartFailed = 1, BytesPerSec_Failed = 2, NumFATs_Failed = 3, Signature_Failed = 4, DataStopFailed = 5};

	fat32_t(hw_t *hardware, const uint32_t addr);
	inline uint8_t err(void) const {return errno;}
    1ca8:	8d a5       	ldd	r24, Y+45	; 0x2d
	if (fs.err()) {
    1caa:	88 23       	and	r24, r24
    1cac:	61 f0       	breq	.+24     	; 0x1cc6 <main+0x322>
		printf("Read FAT32 file system failed: %u\n", fs.err());
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <main+0x30c>
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <main+0x30e>
    1cb2:	ed b7       	in	r30, 0x3d	; 61
    1cb4:	fe b7       	in	r31, 0x3e	; 62
    1cb6:	31 96       	adiw	r30, 0x01	; 1
    1cb8:	ad b7       	in	r26, 0x3d	; 61
    1cba:	be b7       	in	r27, 0x3e	; 62
    1cbc:	12 96       	adiw	r26, 0x02	; 2
    1cbe:	5c 92       	st	X, r5
    1cc0:	4e 92       	st	-X, r4
    1cc2:	11 97       	sbiw	r26, 0x01	; 1
    1cc4:	db cf       	rjmp	.-74     	; 0x1c7c <main+0x2d8>
		goto fin;
	}
	op::setfs(&fs);
    1cc6:	c5 01       	movw	r24, r10
    1cc8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN2op5setfsEP4fs_t>
	static inline void set(const uint8_t d) {OCR2A = d;}
}

static void pwm::init(void)
{
	DDRD |= _BV(PD7);
    1ccc:	57 9a       	sbi	0x0a, 7	; 10
static inline void pwm::enable(const bool e)
{
	if (e)
		TCCR2A = _BV(COM2A1) | _BV(WGM20) | _BV(WGM21);
	else
		TCCR2A = _BV(WGM20) | _BV(WGM21);
    1cce:	83 e0       	ldi	r24, 0x03	; 3
    1cd0:	80 93 b0 00 	sts	0x00B0, r24
{
	DDRD |= _BV(PD7);

	//TCCR2A = _BV(COM2A1) | _BV(WGM20);
	enable(false);
	TCCR2B = 0;
    1cd4:	10 92 b1 00 	sts	0x00B1, r1
	TCNT2 = 0;
    1cd8:	10 92 b2 00 	sts	0x00B2, r1
	OCR2A = 0;
    1cdc:	10 92 b3 00 	sts	0x00B3, r1
	ASSR = 0;
    1ce0:	10 92 b6 00 	sts	0x00B6, r1
	TIMSK2 = 0;
    1ce4:	10 92 70 00 	sts	0x0070, r1
	TIFR2 = 0xFF;
    1ce8:	8f ef       	ldi	r24, 0xFF	; 255
    1cea:	87 bb       	out	0x17, r24	; 23
	TCCR2B = _BV(CS20);
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	80 93 b1 00 	sts	0x00B1, r24
	TIFR1 |= _BV(OCF1A);
}

static void timer1::init(void)
{
	TCCR1A = 0;
    1cf2:	10 92 80 00 	sts	0x0080, r1
	TCCR1C = 0;
    1cf6:	10 92 82 00 	sts	0x0082, r1
	TIMSK1 = 0;
    1cfa:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = _BV(WGM12) | _BV(CS10);
}

static inline void timer1::stop(void)
{
	TCCR1B = 0;
    1cfe:	10 92 81 00 	sts	0x0081, r1
	TCNT1 = 0;
    1d02:	10 92 85 00 	sts	0x0085, r1
    1d06:	10 92 84 00 	sts	0x0084, r1
	return TIFR1 & _BV(OCF1A);
}

static inline void timer1::clear(void)
{
	TIFR1 |= _BV(OCF1A);
    1d0a:	b1 9a       	sbi	0x16, 1	; 22
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <main+0x36a>
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <main+0x36c>
    1d10:	2d e5       	ldi	r18, 0x5D	; 93
    1d12:	32 e0       	ldi	r19, 0x02	; 2
    1d14:	ed b7       	in	r30, 0x3d	; 61
    1d16:	fe b7       	in	r31, 0x3e	; 62
    1d18:	32 83       	std	Z+2, r19	; 0x02
    1d1a:	21 83       	std	Z+1, r18	; 0x01
    1d1c:	94 82       	std	Z+4, r9	; 0x04
    1d1e:	83 82       	std	Z+3, r8	; 0x03
    1d20:	0e 94 bc 1a 	call	0x3578	; 0x3578 <printf>
	FILE *fp = op::fopen(path, "r");
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	c4 01       	movw	r24, r8
    1d2e:	6c e8       	ldi	r22, 0x8C	; 140
    1d30:	72 e0       	ldi	r23, 0x02	; 2
    1d32:	0e 94 27 0c 	call	0x184e	; 0x184e <_ZN2op5fopenEPKcS1_>
    1d36:	8c 01       	movw	r16, r24
	if (fp == NULL) {
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	81 f4       	brne	.+32     	; 0x1d5c <main+0x3b8>
		printf("apps::wav(): open file failed: %u\n", errno);
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <main+0x39a>
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <main+0x39c>
    1d40:	ed b7       	in	r30, 0x3d	; 61
    1d42:	fe b7       	in	r31, 0x3e	; 62
    1d44:	31 96       	adiw	r30, 0x01	; 1
    1d46:	2e e8       	ldi	r18, 0x8E	; 142
    1d48:	32 e0       	ldi	r19, 0x02	; 2
    1d4a:	ad b7       	in	r26, 0x3d	; 61
    1d4c:	be b7       	in	r27, 0x3e	; 62
    1d4e:	12 96       	adiw	r26, 0x02	; 2
    1d50:	3c 93       	st	X, r19
    1d52:	2e 93       	st	-X, r18
    1d54:	11 97       	sbiw	r26, 0x01	; 1
    1d56:	80 91 0f 03 	lds	r24, 0x030F
    1d5a:	90 cf       	rjmp	.-224    	; 0x1c7c <main+0x2d8>
}

static inline void pwm::enable(const bool e)
{
	if (e)
		TCCR2A = _BV(COM2A1) | _BV(WGM20) | _BV(WGM21);
    1d5c:	83 e8       	ldi	r24, 0x83	; 131
    1d5e:	80 93 b0 00 	sts	0x00B0, r24
	TCCR1B = _BV(WGM12) | _BV(CS11) | _BV(CS10);
}

static inline void timer1::freq8000(void)
{
	OCR1A = TIMER1_FREQ8000;
    1d62:	8c ed       	ldi	r24, 0xDC	; 220
    1d64:	95 e0       	ldi	r25, 0x05	; 5
    1d66:	90 93 89 00 	sts	0x0089, r25
    1d6a:	80 93 88 00 	sts	0x0088, r24
	TCCR1B = _BV(WGM12) | _BV(CS10);
    1d6e:	89 e0       	ldi	r24, 0x09	; 9
    1d70:	80 93 81 00 	sts	0x0081, r24
    1d74:	07 c0       	rjmp	.+14     	; 0x1d84 <main+0x3e0>
	}
	int ch;
	pwm::enable(true);
	timer1::freq8000();
	while ((ch = fgetc(fp)) != -1) {
		while (!timer1::over());
    1d76:	b1 9b       	sbis	0x16, 1	; 22
    1d78:	fe cf       	rjmp	.-4      	; 0x1d76 <main+0x3d2>
	return TIFR1 & _BV(OCF1A);
}

static inline void timer1::clear(void)
{
	TIFR1 |= _BV(OCF1A);
    1d7a:	b1 9a       	sbi	0x16, 1	; 22

namespace pwm
{
	static void init(void);
	static inline void enable(const bool e);
	static inline void set(const uint8_t d) {OCR2A = d;}
    1d7c:	80 93 b3 00 	sts	0x00B3, r24
		timer1::clear();
		pwm::set(ch);
		set_dac(ch);
    1d80:	0e 94 0e 12 	call	0x241c	; 0x241c <set_dac>
		return 1;
	}
	int ch;
	pwm::enable(true);
	timer1::freq8000();
	while ((ch = fgetc(fp)) != -1) {
    1d84:	c8 01       	movw	r24, r16
    1d86:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <fgetc>
    1d8a:	3f ef       	ldi	r19, 0xFF	; 255
    1d8c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d8e:	93 07       	cpc	r25, r19
    1d90:	91 f7       	brne	.-28     	; 0x1d76 <main+0x3d2>
	TCCR1B = _BV(WGM12) | _BV(CS10);
}

static inline void timer1::stop(void)
{
	TCCR1B = 0;
    1d92:	10 92 81 00 	sts	0x0081, r1
	TCNT1 = 0;
    1d96:	10 92 85 00 	sts	0x0085, r1
    1d9a:	10 92 84 00 	sts	0x0084, r1
	return TIFR1 & _BV(OCF1A);
}

static inline void timer1::clear(void)
{
	TIFR1 |= _BV(OCF1A);
    1d9e:	b1 9a       	sbi	0x16, 1	; 22
static inline void pwm::enable(const bool e)
{
	if (e)
		TCCR2A = _BV(COM2A1) | _BV(WGM20) | _BV(WGM21);
	else
		TCCR2A = _BV(WGM20) | _BV(WGM21);
    1da0:	83 e0       	ldi	r24, 0x03	; 3
    1da2:	80 93 b0 00 	sts	0x00B0, r24
		pwm::set(ch);
		set_dac(ch);
	}
	timer1::stop();
	pwm::enable(false);
	op::fclose(fp);
    1da6:	c8 01       	movw	r24, r16
    1da8:	0e 94 0e 0c 	call	0x181c	; 0x181c <_ZN2op6fcloseEP6__file>
	fputs("apps::wav() finished\n", stderr);
    1dac:	60 91 3e 03 	lds	r22, 0x033E
    1db0:	70 91 3f 03 	lds	r23, 0x033F
    1db4:	81 eb       	ldi	r24, 0xB1	; 177
    1db6:	92 e0       	ldi	r25, 0x02	; 2
    1db8:	0e 94 93 1a 	call	0x3526	; 0x3526 <fputs>
    1dbc:	2e ce       	rjmp	.-932    	; 0x1a1a <main+0x76>
    1dbe:	13 e0       	ldi	r17, 0x03	; 3
    1dc0:	40 cf       	rjmp	.-384    	; 0x1c42 <main+0x29e>

00001dc2 <_ZN3spiL4freeEb>:

// Defined as inline to execute faster

inline void spi::free(const bool e)
{
	if (e) {
    1dc2:	88 23       	and	r24, r24
    1dc4:	31 f0       	breq	.+12     	; 0x1dd2 <_ZN3spiL4freeEb+0x10>
		DDRB &= ~(SPI_MOSI | SPI_SCK | SPI_MISO);
    1dc6:	84 b1       	in	r24, 0x04	; 4
    1dc8:	8f 71       	andi	r24, 0x1F	; 31
    1dca:	84 b9       	out	0x04, r24	; 4
		PORTB &= ~(SPI_MOSI | SPI_SCK | SPI_MISO);
    1dcc:	85 b1       	in	r24, 0x05	; 5
    1dce:	8f 71       	andi	r24, 0x1F	; 31
    1dd0:	06 c0       	rjmp	.+12     	; 0x1dde <_ZN3spiL4freeEb+0x1c>
	} else {
		DDRB |= SPI_SS | SPI_MOSI | SPI_SCK;
    1dd2:	84 b1       	in	r24, 0x04	; 4
    1dd4:	80 6b       	ori	r24, 0xB0	; 176
    1dd6:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~SPI_MISO;
    1dd8:	26 98       	cbi	0x04, 6	; 4
		PORTB |= SPI_SS | SPI_MOSI | SPI_MISO | SPI_SCK;
    1dda:	85 b1       	in	r24, 0x05	; 5
    1ddc:	80 6f       	ori	r24, 0xF0	; 240
    1dde:	85 b9       	out	0x05, r24	; 5
    1de0:	08 95       	ret

00001de2 <_ZN3spiL10trans32bigEm>:
	res |= (uint32_t)spi::trans((d >> 8) & 0xFF) << 16;
	res |= (uint32_t)spi::trans(d & 0xFF) << 24;
	return res;
}

inline uint32_t spi::trans32big(const uint32_t d)
    1de2:	ef 92       	push	r14
    1de4:	ff 92       	push	r15
    1de6:	0f 93       	push	r16
    1de8:	1f 93       	push	r17
    1dea:	9b 01       	movw	r18, r22
    1dec:	ac 01       	movw	r20, r24
{
	uint32_t res = (uint32_t)spi::trans((d >> 24) & 0xFF) << 24;
    1dee:	89 2f       	mov	r24, r25
    1df0:	99 27       	eor	r25, r25
    1df2:	aa 27       	eor	r26, r26
    1df4:	bb 27       	eor	r27, r27
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    1df6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    1df8:	0d b4       	in	r0, 0x2d	; 45
    1dfa:	07 fe       	sbrs	r0, 7
    1dfc:	fd cf       	rjmp	.-6      	; 0x1df8 <_ZN3spiL10trans32bigEm+0x16>
	return SPDR;
    1dfe:	ee b5       	in	r30, 0x2e	; 46
}

inline uint32_t spi::trans32big(const uint32_t d)
{
	uint32_t res = (uint32_t)spi::trans((d >> 24) & 0xFF) << 24;
	res |= (uint32_t)spi::trans((d >> 16) & 0xFF) << 16;
    1e00:	ca 01       	movw	r24, r20
    1e02:	aa 27       	eor	r26, r26
    1e04:	bb 27       	eor	r27, r27
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    1e06:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    1e08:	0d b4       	in	r0, 0x2d	; 45
    1e0a:	07 fe       	sbrs	r0, 7
    1e0c:	fd cf       	rjmp	.-6      	; 0x1e08 <_ZN3spiL10trans32bigEm+0x26>
	return SPDR;
    1e0e:	6e b5       	in	r22, 0x2e	; 46

inline uint32_t spi::trans32big(const uint32_t d)
{
	uint32_t res = (uint32_t)spi::trans((d >> 24) & 0xFF) << 24;
	res |= (uint32_t)spi::trans((d >> 16) & 0xFF) << 16;
	res |= (uint32_t)spi::trans((d >> 8) & 0xFF) << 8;
    1e10:	bb 27       	eor	r27, r27
    1e12:	a5 2f       	mov	r26, r21
    1e14:	94 2f       	mov	r25, r20
    1e16:	83 2f       	mov	r24, r19
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    1e18:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    1e1a:	0d b4       	in	r0, 0x2d	; 45
    1e1c:	07 fe       	sbrs	r0, 7
    1e1e:	fd cf       	rjmp	.-6      	; 0x1e1a <_ZN3spiL10trans32bigEm+0x38>
	return SPDR;
    1e20:	7e b5       	in	r23, 0x2e	; 46
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    1e22:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    1e24:	0d b4       	in	r0, 0x2d	; 45
    1e26:	07 fe       	sbrs	r0, 7
    1e28:	fd cf       	rjmp	.-6      	; 0x1e24 <_ZN3spiL10trans32bigEm+0x42>
	return SPDR;
    1e2a:	ee b4       	in	r14, 0x2e	; 46
	return res;
}

inline uint32_t spi::trans32big(const uint32_t d)
{
	uint32_t res = (uint32_t)spi::trans((d >> 24) & 0xFF) << 24;
    1e2c:	2e 2f       	mov	r18, r30
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	50 e0       	ldi	r21, 0x00	; 0
    1e34:	52 2f       	mov	r21, r18
    1e36:	44 27       	eor	r20, r20
    1e38:	33 27       	eor	r19, r19
    1e3a:	22 27       	eor	r18, r18
	res |= (uint32_t)spi::trans((d >> 16) & 0xFF) << 16;
    1e3c:	86 2f       	mov	r24, r22
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a0 e0       	ldi	r26, 0x00	; 0
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	dc 01       	movw	r26, r24
    1e46:	99 27       	eor	r25, r25
    1e48:	88 27       	eor	r24, r24
    1e4a:	28 2b       	or	r18, r24
    1e4c:	39 2b       	or	r19, r25
    1e4e:	4a 2b       	or	r20, r26
    1e50:	5b 2b       	or	r21, r27
	res |= (uint32_t)spi::trans((d >> 8) & 0xFF) << 8;
    1e52:	ff 24       	eor	r15, r15
    1e54:	00 e0       	ldi	r16, 0x00	; 0
    1e56:	10 e0       	ldi	r17, 0x00	; 0
    1e58:	2e 29       	or	r18, r14
    1e5a:	3f 29       	or	r19, r15
    1e5c:	40 2b       	or	r20, r16
    1e5e:	51 2b       	or	r21, r17
    1e60:	87 2f       	mov	r24, r23
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	a0 e0       	ldi	r26, 0x00	; 0
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	ba 2f       	mov	r27, r26
    1e6a:	a9 2f       	mov	r26, r25
    1e6c:	98 2f       	mov	r25, r24
    1e6e:	88 27       	eor	r24, r24
    1e70:	28 2b       	or	r18, r24
    1e72:	39 2b       	or	r19, r25
    1e74:	4a 2b       	or	r20, r26
    1e76:	5b 2b       	or	r21, r27
	res |= (uint32_t)spi::trans(d & 0xFF);
	return res;
}
    1e78:	b9 01       	movw	r22, r18
    1e7a:	ca 01       	movw	r24, r20
    1e7c:	1f 91       	pop	r17
    1e7e:	0f 91       	pop	r16
    1e80:	ff 90       	pop	r15
    1e82:	ef 90       	pop	r14
    1e84:	08 95       	ret

00001e86 <_ZN4hw_t11streamStartEbm>:
public:
	enum RW {Read = 0, Write = 1};

	hw_t(void) {deactivate();}

	virtual inline bool streamStart(const bool rw, const uint32_t addr) {return false;}
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	08 95       	ret

00001e8a <_ZN4hw_t10streamStopEb>:
	virtual inline bool streamStop(const bool rw) {return false;}
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	08 95       	ret

00001e8e <_ZN4hw_t8nextByteEv>:
	virtual inline void skipBytes(uint16_t cnt);
	virtual inline uint8_t nextByte(void) {return 0;}
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	08 95       	ret

00001e92 <_ZN4hw_t8activateEP4fs_t>:
	virtual inline uint32_t nextBytes(const uint8_t cnt);
	virtual inline void activate(fs_t *fs) {act = fs;}
    1e92:	fc 01       	movw	r30, r24
    1e94:	73 83       	std	Z+3, r23	; 0x03
    1e96:	62 83       	std	Z+2, r22	; 0x02
    1e98:	08 95       	ret

00001e9a <_ZN4hw_t9activatedEP4fs_t>:
	virtual inline bool activated(fs_t *fs) {return act == fs;}
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ea0:	93 81       	ldd	r25, Z+3	; 0x03
    1ea2:	86 17       	cp	r24, r22
    1ea4:	97 07       	cpc	r25, r23
    1ea6:	09 f4       	brne	.+2      	; 0x1eaa <_ZN4hw_t9activatedEP4fs_t+0x10>
    1ea8:	21 e0       	ldi	r18, 0x01	; 1
    1eaa:	82 2f       	mov	r24, r18
    1eac:	08 95       	ret

00001eae <_ZN4hw_t10deactivateEv>:
	virtual inline void deactivate(void) {act = 0;}
    1eae:	fc 01       	movw	r30, r24
    1eb0:	13 82       	std	Z+3, r1	; 0x03
    1eb2:	12 82       	std	Z+2, r1	; 0x02
    1eb4:	08 95       	ret

00001eb6 <_ZN4hw_t9skipBytesEj>:

protected:
	fs_t *act;
};

inline void hw_t::skipBytes(uint16_t cnt)
    1eb6:	0f 93       	push	r16
    1eb8:	1f 93       	push	r17
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	8c 01       	movw	r16, r24
    1ec0:	eb 01       	movw	r28, r22
    1ec2:	09 c0       	rjmp	.+18     	; 0x1ed6 <_ZN4hw_t9skipBytesEj+0x20>
{
	while (cnt--)
		nextByte();
    1ec4:	d8 01       	movw	r26, r16
    1ec6:	ed 91       	ld	r30, X+
    1ec8:	fc 91       	ld	r31, X
    1eca:	06 80       	ldd	r0, Z+6	; 0x06
    1ecc:	f7 81       	ldd	r31, Z+7	; 0x07
    1ece:	e0 2d       	mov	r30, r0
    1ed0:	c8 01       	movw	r24, r16
    1ed2:	09 95       	icall
    1ed4:	21 97       	sbiw	r28, 0x01	; 1
	fs_t *act;
};

inline void hw_t::skipBytes(uint16_t cnt)
{
	while (cnt--)
    1ed6:	20 97       	sbiw	r28, 0x00	; 0
    1ed8:	a9 f7       	brne	.-22     	; 0x1ec4 <_ZN4hw_t9skipBytesEj+0xe>
		nextByte();
}
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	1f 91       	pop	r17
    1ee0:	0f 91       	pop	r16
    1ee2:	08 95       	ret

00001ee4 <_ZN4hw_t9nextBytesEh>:

inline uint32_t hw_t::nextBytes(const uint8_t cnt)
    1ee4:	af 92       	push	r10
    1ee6:	bf 92       	push	r11
    1ee8:	cf 92       	push	r12
    1eea:	df 92       	push	r13
    1eec:	ef 92       	push	r14
    1eee:	ff 92       	push	r15
    1ef0:	0f 93       	push	r16
    1ef2:	1f 93       	push	r17
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	5c 01       	movw	r10, r24
    1efa:	c6 2e       	mov	r12, r22
    1efc:	ee 24       	eor	r14, r14
    1efe:	ff 24       	eor	r15, r15
    1f00:	87 01       	movw	r16, r14
    1f02:	dd 24       	eor	r13, r13
    1f04:	c0 e0       	ldi	r28, 0x00	; 0
    1f06:	d0 e0       	ldi	r29, 0x00	; 0
    1f08:	19 c0       	rjmp	.+50     	; 0x1f3c <_ZN4hw_t9nextBytesEh+0x58>
{
	uint32_t res = 0;
	for (uint8_t i = 0; i < cnt; i++)
		res |= ((uint32_t)nextByte()) << (8 * i);
    1f0a:	d5 01       	movw	r26, r10
    1f0c:	ed 91       	ld	r30, X+
    1f0e:	fc 91       	ld	r31, X
    1f10:	06 80       	ldd	r0, Z+6	; 0x06
    1f12:	f7 81       	ldd	r31, Z+7	; 0x07
    1f14:	e0 2d       	mov	r30, r0
    1f16:	c5 01       	movw	r24, r10
    1f18:	09 95       	icall
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a0 e0       	ldi	r26, 0x00	; 0
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	0c 2e       	mov	r0, r28
    1f22:	04 c0       	rjmp	.+8      	; 0x1f2c <_ZN4hw_t9nextBytesEh+0x48>
    1f24:	88 0f       	add	r24, r24
    1f26:	99 1f       	adc	r25, r25
    1f28:	aa 1f       	adc	r26, r26
    1f2a:	bb 1f       	adc	r27, r27
    1f2c:	0a 94       	dec	r0
    1f2e:	d2 f7       	brpl	.-12     	; 0x1f24 <_ZN4hw_t9nextBytesEh+0x40>
    1f30:	e8 2a       	or	r14, r24
    1f32:	f9 2a       	or	r15, r25
    1f34:	0a 2b       	or	r16, r26
    1f36:	1b 2b       	or	r17, r27
}

inline uint32_t hw_t::nextBytes(const uint8_t cnt)
{
	uint32_t res = 0;
	for (uint8_t i = 0; i < cnt; i++)
    1f38:	d3 94       	inc	r13
    1f3a:	28 96       	adiw	r28, 0x08	; 8
    1f3c:	dc 14       	cp	r13, r12
    1f3e:	28 f3       	brcs	.-54     	; 0x1f0a <_ZN4hw_t9nextBytesEh+0x26>
		res |= ((uint32_t)nextByte()) << (8 * i);
	return res;
}
    1f40:	b7 01       	movw	r22, r14
    1f42:	c8 01       	movw	r24, r16
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	1f 91       	pop	r17
    1f4a:	0f 91       	pop	r16
    1f4c:	ff 90       	pop	r15
    1f4e:	ef 90       	pop	r14
    1f50:	df 90       	pop	r13
    1f52:	cf 90       	pop	r12
    1f54:	bf 90       	pop	r11
    1f56:	af 90       	pop	r10
    1f58:	08 95       	ret

00001f5a <_ZN6sdhw_t4freeEh>:
		for (uint16_t i = 0; i < 512 + 2; i++)
			spi::trans();
	return free(true);
}

inline uint8_t sdhw_t::free(const uint8_t err)
    1f5a:	1f 93       	push	r17
    1f5c:	18 2f       	mov	r17, r24
{
	spi::free(true);
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN3spiL4freeEb>
inline void spi::assert(const bool e)
{
	if (e)
		SPI_PORT &= ~SPI_SS;
	else
		SPI_PORT |= SPI_SS;
    1f64:	2c 9a       	sbi	0x05, 4	; 5
	spi::assert(false);
	return err;
}
    1f66:	81 2f       	mov	r24, r17
    1f68:	1f 91       	pop	r17
    1f6a:	08 95       	ret

00001f6c <_ZN6sdhw_t4sendEhmh>:
	uint8_t res;
	while ((res = spi::trans()) == 0xFF);
	return res;
}

inline void sdhw_t::send(const uint8_t index, const uint32_t arg, const uint8_t crc)
    1f6c:	98 2f       	mov	r25, r24
    1f6e:	2c 9a       	sbi	0x05, 4	; 5
}

inline void spi::assert(const bool e)
{
	if (e)
		SPI_PORT &= ~SPI_SS;
    1f70:	2c 98       	cbi	0x05, 4	; 5
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    1f72:	8f ef       	ldi	r24, 0xFF	; 255
    1f74:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    1f76:	0d b4       	in	r0, 0x2d	; 45
    1f78:	07 fe       	sbrs	r0, 7
    1f7a:	fd cf       	rjmp	.-6      	; 0x1f76 <_ZN6sdhw_t4sendEhmh+0xa>
	return SPDR;
    1f7c:	8e b5       	in	r24, 0x2e	; 46
{
	spi::assert(false);
	//spi::trans();
	spi::assert(true);
	spi::trans();
	spi::trans(index | _BV(6));
    1f7e:	90 64       	ori	r25, 0x40	; 64
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    1f80:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & _BV(SPIF)));
    1f82:	0d b4       	in	r0, 0x2d	; 45
    1f84:	07 fe       	sbrs	r0, 7
    1f86:	fd cf       	rjmp	.-6      	; 0x1f82 <_ZN6sdhw_t4sendEhmh+0x16>
	return SPDR;
    1f88:	8e b5       	in	r24, 0x2e	; 46
	return res;
}

inline uint32_t spi::trans32(const uint32_t d)
{
	uint32_t res = spi::trans((d >> 24) & 0xFF);
    1f8a:	87 2f       	mov	r24, r23
    1f8c:	99 27       	eor	r25, r25
    1f8e:	aa 27       	eor	r26, r26
    1f90:	bb 27       	eor	r27, r27
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    1f92:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    1f94:	0d b4       	in	r0, 0x2d	; 45
    1f96:	07 fe       	sbrs	r0, 7
    1f98:	fd cf       	rjmp	.-6      	; 0x1f94 <_ZN6sdhw_t4sendEhmh+0x28>
	return SPDR;
    1f9a:	8e b5       	in	r24, 0x2e	; 46
}

inline uint32_t spi::trans32(const uint32_t d)
{
	uint32_t res = spi::trans((d >> 24) & 0xFF);
	res |= (uint32_t)spi::trans((d >> 16) & 0xFF) << 8;
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	aa 27       	eor	r26, r26
    1fa0:	bb 27       	eor	r27, r27
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    1fa2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    1fa4:	0d b4       	in	r0, 0x2d	; 45
    1fa6:	07 fe       	sbrs	r0, 7
    1fa8:	fd cf       	rjmp	.-6      	; 0x1fa4 <_ZN6sdhw_t4sendEhmh+0x38>
	return SPDR;
    1faa:	8e b5       	in	r24, 0x2e	; 46

inline uint32_t spi::trans32(const uint32_t d)
{
	uint32_t res = spi::trans((d >> 24) & 0xFF);
	res |= (uint32_t)spi::trans((d >> 16) & 0xFF) << 8;
	res |= (uint32_t)spi::trans((d >> 8) & 0xFF) << 16;
    1fac:	bb 27       	eor	r27, r27
    1fae:	a7 2f       	mov	r26, r23
    1fb0:	96 2f       	mov	r25, r22
    1fb2:	85 2f       	mov	r24, r21
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    1fb4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    1fb6:	0d b4       	in	r0, 0x2d	; 45
    1fb8:	07 fe       	sbrs	r0, 7
    1fba:	fd cf       	rjmp	.-6      	; 0x1fb6 <_ZN6sdhw_t4sendEhmh+0x4a>
	return SPDR;
    1fbc:	8e b5       	in	r24, 0x2e	; 46
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    1fbe:	4e bd       	out	0x2e, r20	; 46
	while(!(SPSR & _BV(SPIF)));
    1fc0:	0d b4       	in	r0, 0x2d	; 45
    1fc2:	07 fe       	sbrs	r0, 7
    1fc4:	fd cf       	rjmp	.-6      	; 0x1fc0 <_ZN6sdhw_t4sendEhmh+0x54>
	return SPDR;
    1fc6:	8e b5       	in	r24, 0x2e	; 46
	spi::trans32(arg);
	spi::trans((crc << 1) | 1);
    1fc8:	22 0f       	add	r18, r18
    1fca:	21 60       	ori	r18, 0x01	; 1
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    1fcc:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    1fce:	0d b4       	in	r0, 0x2d	; 45
    1fd0:	07 fe       	sbrs	r0, 7
    1fd2:	fd cf       	rjmp	.-6      	; 0x1fce <_ZN6sdhw_t4sendEhmh+0x62>
	return SPDR;
    1fd4:	8e b5       	in	r24, 0x2e	; 46
}
    1fd6:	08 95       	ret

00001fd8 <_ZN6sdhw_t10streamStopEb>:
	inline uint32_t size(void) const {return _size;}
	static inline uint16_t readCRC(void) {return spi::trans16big();}

	virtual inline uint8_t nextByte(void);
	virtual inline bool streamStart(const bool rw, const uint32_t addr);
	virtual inline bool streamStop(const bool rw) {return dataStop(rw, Multiple);}
    1fd8:	1f 93       	push	r17
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	ec 01       	movw	r28, r24
    1fe0:	16 2f       	mov	r17, r22
}

inline bool sdhw_t::dataStop(const bool rw, const bool multi)
{
	if (multi) {
		send(STOP_TRANSMISSION);
    1fe2:	8c e0       	ldi	r24, 0x0C	; 12
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	50 e0       	ldi	r21, 0x00	; 0
    1fe8:	60 e0       	ldi	r22, 0x00	; 0
    1fea:	70 e0       	ldi	r23, 0x00	; 0
    1fec:	2f ef       	ldi	r18, 0xFF	; 255
    1fee:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <_ZN6sdhw_t4sendEhmh>
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    1ff2:	8f ef       	ldi	r24, 0xFF	; 255
    1ff4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    1ff6:	0d b4       	in	r0, 0x2d	; 45
    1ff8:	07 fe       	sbrs	r0, 7
    1ffa:	fd cf       	rjmp	.-6      	; 0x1ff6 <_ZN6sdhw_t10streamStopEb+0x1e>
	return SPDR;
    1ffc:	8e b5       	in	r24, 0x2e	; 46
		spi::trans();
		if (rw == Read && (errno = response()) != 0x00)
    1ffe:	11 23       	and	r17, r17
    2000:	69 f4       	brne	.+26     	; 0x201c <_ZN6sdhw_t10streamStopEb+0x44>
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    2002:	9f ef       	ldi	r25, 0xFF	; 255
    2004:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & _BV(SPIF)));
    2006:	0d b4       	in	r0, 0x2d	; 45
    2008:	07 fe       	sbrs	r0, 7
    200a:	fd cf       	rjmp	.-6      	; 0x2006 <_ZN6sdhw_t10streamStopEb+0x2e>
	return SPDR;
    200c:	8e b5       	in	r24, 0x2e	; 46
}

inline uint8_t sdhw_t::response(void)
{
	uint8_t res;
	while ((res = spi::trans()) == 0xFF);
    200e:	8f 3f       	cpi	r24, 0xFF	; 255
    2010:	c9 f3       	breq	.-14     	; 0x2004 <_ZN6sdhw_t10streamStopEb+0x2c>
inline bool sdhw_t::dataStop(const bool rw, const bool multi)
{
	if (multi) {
		send(STOP_TRANSMISSION);
		spi::trans();
		if (rw == Read && (errno = response()) != 0x00)
    2012:	8a 87       	std	Y+10, r24	; 0x0a
    2014:	88 23       	and	r24, r24
    2016:	11 f0       	breq	.+4      	; 0x201c <_ZN6sdhw_t10streamStopEb+0x44>
			return free(false);
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	09 c0       	rjmp	.+18     	; 0x202e <_ZN6sdhw_t10streamStopEb+0x56>
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    201c:	9f ef       	ldi	r25, 0xFF	; 255
    201e:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & _BV(SPIF)));
    2020:	0d b4       	in	r0, 0x2d	; 45
    2022:	07 fe       	sbrs	r0, 7
    2024:	fd cf       	rjmp	.-6      	; 0x2020 <_ZN6sdhw_t10streamStopEb+0x48>
	return SPDR;
    2026:	8e b5       	in	r24, 0x2e	; 46
	virtual inline uint8_t nextByte(void);
	virtual inline bool streamStart(const bool rw, const uint32_t addr);
	virtual inline bool streamStop(const bool rw) {return dataStop(rw, Multiple);}

protected:
	static inline void wait(void) {while (spi::trans() != 0xFF);}
    2028:	8f 3f       	cpi	r24, 0xFF	; 255
    202a:	c9 f7       	brne	.-14     	; 0x201e <_ZN6sdhw_t10streamStopEb+0x46>
			return free(false);
		wait();
	} else
		for (uint16_t i = 0; i < 512 + 2; i++)
			spi::trans();
	return free(true);
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZN6sdhw_t4freeEh>
    2032:	81 11       	cpse	r24, r1
    2034:	81 e0       	ldi	r24, 0x01	; 1
	inline uint32_t size(void) const {return _size;}
	static inline uint16_t readCRC(void) {return spi::trans16big();}

	virtual inline uint8_t nextByte(void);
	virtual inline bool streamStart(const bool rw, const uint32_t addr);
	virtual inline bool streamStop(const bool rw) {return dataStop(rw, Multiple);}
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	1f 91       	pop	r17
    203c:	08 95       	ret

0000203e <_ZN6sdhw_t3cmdEhmh>:
	spi::trans((crc << 1) | 1);
}

inline uint8_t sdhw_t::cmd(const uint8_t index, const uint32_t arg, const uint8_t crc)
{
	send(index, arg, crc);
    203e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <_ZN6sdhw_t4sendEhmh>
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    2042:	9f ef       	ldi	r25, 0xFF	; 255
    2044:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & _BV(SPIF)));
    2046:	0d b4       	in	r0, 0x2d	; 45
    2048:	07 fe       	sbrs	r0, 7
    204a:	fd cf       	rjmp	.-6      	; 0x2046 <_ZN6sdhw_t3cmdEhmh+0x8>
	return SPDR;
    204c:	8e b5       	in	r24, 0x2e	; 46
}

inline uint8_t sdhw_t::response(void)
{
	uint8_t res;
	while ((res = spi::trans()) == 0xFF);
    204e:	8f 3f       	cpi	r24, 0xFF	; 255
    2050:	c9 f3       	breq	.-14     	; 0x2044 <_ZN6sdhw_t3cmdEhmh+0x6>

inline uint8_t sdhw_t::cmd(const uint8_t index, const uint32_t arg, const uint8_t crc)
{
	send(index, arg, crc);
	return response();
}
    2052:	08 95       	ret

00002054 <_ZN6sdhw_t11streamStartEbm>:
	if (res > 0x01)
		return res;
	return cmd(index, arg, crc);
}

inline bool sdhw_t::streamStart(const bool rw, const uint32_t addr)
    2054:	cf 92       	push	r12
    2056:	df 92       	push	r13
    2058:	ef 92       	push	r14
    205a:	ff 92       	push	r15
    205c:	1f 93       	push	r17
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	ec 01       	movw	r28, r24
    2064:	16 2f       	mov	r17, r22
    2066:	69 01       	movw	r12, r18
    2068:	7a 01       	movw	r14, r20
	uint8_t errno;
};

inline bool sdhw_t::dataInit(const bool rw, const bool multi, const uint32_t addr)
{
	spi::free(false);
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN3spiL4freeEb>
	counter = 0;
    2070:	19 86       	std	Y+9, r1	; 0x09
    2072:	18 86       	std	Y+8, r1	; 0x08
	uint8_t command;
	if (rw)
    2074:	11 23       	and	r17, r17
    2076:	11 f4       	brne	.+4      	; 0x207c <_ZN6sdhw_t11streamStartEbm+0x28>
    2078:	81 e1       	ldi	r24, 0x11	; 17
    207a:	01 c0       	rjmp	.+2      	; 0x207e <_ZN6sdhw_t11streamStartEbm+0x2a>
    207c:	88 e1       	ldi	r24, 0x18	; 24
		command = WRITE_SINGLE_BLOCK;
	else
		command = READ_SINGLE_BLOCK;
	if (multi)
		command++;
	if ((errno = cmd(command, addr)) != 0x00)
    207e:	8f 5f       	subi	r24, 0xFF	; 255
    2080:	b7 01       	movw	r22, r14
    2082:	a6 01       	movw	r20, r12
    2084:	2f ef       	ldi	r18, 0xFF	; 255
    2086:	0e 94 1f 10 	call	0x203e	; 0x203e <_ZN6sdhw_t3cmdEhmh>
    208a:	8a 87       	std	Y+10, r24	; 0x0a
    208c:	88 23       	and	r24, r24
    208e:	21 f0       	breq	.+8      	; 0x2098 <_ZN6sdhw_t11streamStartEbm+0x44>
		return free(false);
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZN6sdhw_t4freeEh>
    2096:	81 11       	cpse	r24, r1
    2098:	81 e0       	ldi	r24, 0x01	; 1
inline bool sdhw_t::streamStart(const bool rw, const uint32_t addr)
{
	if (!dataInit(rw, Multiple, addr))
		return false;
	return true;
}
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	1f 91       	pop	r17
    20a0:	ff 90       	pop	r15
    20a2:	ef 90       	pop	r14
    20a4:	df 90       	pop	r13
    20a6:	cf 90       	pop	r12
    20a8:	08 95       	ret

000020aa <_ZN6sdhw_t8nextByteEv>:

inline uint8_t sdhw_t::nextByte(void)
    20aa:	fc 01       	movw	r30, r24
{
	if (counter % 512 == 0) {
    20ac:	80 85       	ldd	r24, Z+8	; 0x08
    20ae:	91 85       	ldd	r25, Z+9	; 0x09
    20b0:	91 70       	andi	r25, 0x01	; 1
    20b2:	89 2b       	or	r24, r25
    20b4:	a9 f4       	brne	.+42     	; 0x20e0 <_ZN6sdhw_t8nextByteEv+0x36>
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    20b6:	8f ef       	ldi	r24, 0xFF	; 255
    20b8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    20ba:	0d b4       	in	r0, 0x2d	; 45
    20bc:	07 fe       	sbrs	r0, 7
    20be:	fd cf       	rjmp	.-6      	; 0x20ba <_ZN6sdhw_t8nextByteEv+0x10>
	return SPDR;
    20c0:	8e b5       	in	r24, 0x2e	; 46
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    20c2:	8f ef       	ldi	r24, 0xFF	; 255
    20c4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    20c6:	0d b4       	in	r0, 0x2d	; 45
    20c8:	07 fe       	sbrs	r0, 7
    20ca:	fd cf       	rjmp	.-6      	; 0x20c6 <_ZN6sdhw_t8nextByteEv+0x1c>
	return SPDR;
    20cc:	8e b5       	in	r24, 0x2e	; 46
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    20ce:	9f ef       	ldi	r25, 0xFF	; 255
    20d0:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & _BV(SPIF)));
    20d2:	0d b4       	in	r0, 0x2d	; 45
    20d4:	07 fe       	sbrs	r0, 7
    20d6:	fd cf       	rjmp	.-6      	; 0x20d2 <_ZN6sdhw_t8nextByteEv+0x28>
	return SPDR;
    20d8:	8e b5       	in	r24, 0x2e	; 46
}

inline uint8_t sdhw_t::response(void)
{
	uint8_t res;
	while ((res = spi::trans()) == 0xFF);
    20da:	8f 3f       	cpi	r24, 0xFF	; 255
    20dc:	c9 f3       	breq	.-14     	; 0x20d0 <_ZN6sdhw_t8nextByteEv+0x26>
	return true;
}

inline bool sdhw_t::readInit(void)
{
	if ((errno = response()) != 0xFE)
    20de:	82 87       	std	Z+10, r24	; 0x0a
{
	if (counter % 512 == 0) {
		readCRC();
		readInit();
	}
	counter++;
    20e0:	80 85       	ldd	r24, Z+8	; 0x08
    20e2:	91 85       	ldd	r25, Z+9	; 0x09
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	91 87       	std	Z+9, r25	; 0x09
    20e8:	80 87       	std	Z+8, r24	; 0x08
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    20ea:	8f ef       	ldi	r24, 0xFF	; 255
    20ec:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    20ee:	0d b4       	in	r0, 0x2d	; 45
    20f0:	07 fe       	sbrs	r0, 7
    20f2:	fd cf       	rjmp	.-6      	; 0x20ee <_ZN6sdhw_t8nextByteEv+0x44>
	return SPDR;
    20f4:	8e b5       	in	r24, 0x2e	; 46
	return spi::trans();
}
    20f6:	08 95       	ret

000020f8 <_ZN6sdhw_tC2Ev>:
#include "sd.h"
#include <util/delay.h>

sdhw_t::sdhw_t(void) : hw_t()
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	8c 01       	movw	r16, r24
	virtual inline void skipBytes(uint16_t cnt);
	virtual inline uint8_t nextByte(void) {return 0;}
	virtual inline uint32_t nextBytes(const uint8_t cnt);
	virtual inline void activate(fs_t *fs) {act = fs;}
	virtual inline bool activated(fs_t *fs) {return act == fs;}
	virtual inline void deactivate(void) {act = 0;}
    20fe:	fc 01       	movw	r30, r24
    2100:	13 82       	std	Z+3, r1	; 0x03
    2102:	12 82       	std	Z+2, r1	; 0x02
    2104:	8b ec       	ldi	r24, 0xCB	; 203
    2106:	92 e0       	ldi	r25, 0x02	; 2
    2108:	91 83       	std	Z+1, r25	; 0x01
    210a:	80 83       	st	Z, r24
{
	SD_DDR &= ~(SD_CD | SD_WP);
    210c:	84 b1       	in	r24, 0x04	; 4
    210e:	8c 7f       	andi	r24, 0xFC	; 252
    2110:	84 b9       	out	0x04, r24	; 4
	SD_PORT |= SD_CD | SD_WP;
    2112:	85 b1       	in	r24, 0x05	; 5
    2114:	83 60       	ori	r24, 0x03	; 3
    2116:	85 b9       	out	0x05, r24	; 5
namespace spi
{
	static inline void slow(void);
	static inline void fast(void);
	static inline void free(const bool e);
	static inline void init(void) {spi::free(false);}
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN3spiL4freeEb>
}

inline void spi::slow(void)
{
	// F_SCK = F_CPU / 32 = 375 kHz
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1);
    211e:	82 e5       	ldi	r24, 0x52	; 82
    2120:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1 << SPI2X);
    2122:	8d b5       	in	r24, 0x2d	; 45
    2124:	81 60       	ori	r24, 0x01	; 1
    2126:	8d bd       	out	0x2d, r24	; 45
	spi::init();
	spi::slow();
	spi::free(true);
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN3spiL4freeEb>
	errno = 0;
    212e:	f8 01       	movw	r30, r16
    2130:	12 86       	std	Z+10, r1	; 0x0a
}
    2132:	1f 91       	pop	r17
    2134:	0f 91       	pop	r16
    2136:	08 95       	ret

00002138 <_ZN6sdhw_tC1Ev>:
#include "sd.h"
#include <util/delay.h>

sdhw_t::sdhw_t(void) : hw_t()
    2138:	0f 93       	push	r16
    213a:	1f 93       	push	r17
    213c:	8c 01       	movw	r16, r24
    213e:	fc 01       	movw	r30, r24
    2140:	13 82       	std	Z+3, r1	; 0x03
    2142:	12 82       	std	Z+2, r1	; 0x02
    2144:	8b ec       	ldi	r24, 0xCB	; 203
    2146:	92 e0       	ldi	r25, 0x02	; 2
    2148:	91 83       	std	Z+1, r25	; 0x01
    214a:	80 83       	st	Z, r24
{
	SD_DDR &= ~(SD_CD | SD_WP);
    214c:	84 b1       	in	r24, 0x04	; 4
    214e:	8c 7f       	andi	r24, 0xFC	; 252
    2150:	84 b9       	out	0x04, r24	; 4
	SD_PORT |= SD_CD | SD_WP;
    2152:	85 b1       	in	r24, 0x05	; 5
    2154:	83 60       	ori	r24, 0x03	; 3
    2156:	85 b9       	out	0x05, r24	; 5
namespace spi
{
	static inline void slow(void);
	static inline void fast(void);
	static inline void free(const bool e);
	static inline void init(void) {spi::free(false);}
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN3spiL4freeEb>
}

inline void spi::slow(void)
{
	// F_SCK = F_CPU / 32 = 375 kHz
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1);
    215e:	82 e5       	ldi	r24, 0x52	; 82
    2160:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1 << SPI2X);
    2162:	8d b5       	in	r24, 0x2d	; 45
    2164:	81 60       	ori	r24, 0x01	; 1
    2166:	8d bd       	out	0x2d, r24	; 45
	spi::init();
	spi::slow();
	spi::free(true);
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN3spiL4freeEb>
	errno = 0;
    216e:	f8 01       	movw	r30, r16
    2170:	12 86       	std	Z+10, r1	; 0x0a
}
    2172:	1f 91       	pop	r17
    2174:	0f 91       	pop	r16
    2176:	08 95       	ret

00002178 <_ZN6sdhw_t6detectEv>:

bool sdhw_t::detect(void)
{
	if (SD_PIN & SD_CD)
    2178:	19 9b       	sbis	0x03, 1	; 3
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <_ZN6sdhw_t6detectEv+0x8>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	08 95       	ret
    2180:	88 e8       	ldi	r24, 0x88	; 136
    2182:	93 e1       	ldi	r25, 0x13	; 19
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2184:	2c e2       	ldi	r18, 0x2C	; 44
    2186:	31 e0       	ldi	r19, 0x01	; 1
    2188:	f9 01       	movw	r30, r18
    218a:	31 97       	sbiw	r30, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <_ZN6sdhw_t6detectEv+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2190:	d9 f7       	brne	.-10     	; 0x2188 <_ZN6sdhw_t6detectEv+0x10>
    2192:	4c e2       	ldi	r20, 0x2C	; 44
    2194:	51 e0       	ldi	r21, 0x01	; 1
	sdhw_t(void);
	uint8_t init(void);
	bool detect(void);
	uint32_t getSize(void);
	struct reg_t readRegister(const uint8_t type);
	inline bool writeProtected(void) {return SD_PIN & SD_WP;}
    2196:	23 b1       	in	r18, 0x03	; 3
    2198:	80 ed       	ldi	r24, 0xD0	; 208
    219a:	97 e0       	ldi	r25, 0x07	; 7
    219c:	fa 01       	movw	r30, r20
    219e:	31 97       	sbiw	r30, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <_ZN6sdhw_t6detectEv+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a4:	d9 f7       	brne	.-10     	; 0x219c <_ZN6sdhw_t6detectEv+0x24>
    21a6:	83 b1       	in	r24, 0x03	; 3
	_delay_ms(500);
	bool wp;
loop:
        wp = writeProtected();
        _delay_ms(200);
        if (writeProtected() != wp)
    21a8:	81 70       	andi	r24, 0x01	; 1
    21aa:	21 70       	andi	r18, 0x01	; 1
    21ac:	28 17       	cp	r18, r24
    21ae:	99 f7       	brne	.-26     	; 0x2196 <_ZN6sdhw_t6detectEv+0x1e>
                goto loop;
    21b0:	81 e0       	ldi	r24, 0x01	; 1
        return true;
}
    21b2:	08 95       	ret

000021b4 <_ZN6sdhw_t12readRegisterEh>:
		return 0;
	else
		return (((uint32_t)csd.data[7] << 16) | ((uint32_t)csd.data[8] << 8) | csd.data[9]) * 512;
}

struct reg_t sdhw_t::readRegister(const uint8_t type)
    21b4:	ef 92       	push	r14
    21b6:	ff 92       	push	r15
    21b8:	1f 93       	push	r17
    21ba:	cf 93       	push	r28
    21bc:	df 93       	push	r29
    21be:	7c 01       	movw	r14, r24
    21c0:	eb 01       	movw	r28, r22
    21c2:	14 2f       	mov	r17, r20
{
	struct reg_t r;
	spi::free(false);
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN3spiL4freeEb>
	if ((errno = cmd(type)) != 0x00)
    21ca:	81 2f       	mov	r24, r17
    21cc:	40 e0       	ldi	r20, 0x00	; 0
    21ce:	50 e0       	ldi	r21, 0x00	; 0
    21d0:	60 e0       	ldi	r22, 0x00	; 0
    21d2:	70 e0       	ldi	r23, 0x00	; 0
    21d4:	2f ef       	ldi	r18, 0xFF	; 255
    21d6:	0e 94 1f 10 	call	0x203e	; 0x203e <_ZN6sdhw_t3cmdEhmh>
    21da:	8a 87       	std	Y+10, r24	; 0x0a
    21dc:	88 23       	and	r24, r24
    21de:	31 f5       	brne	.+76     	; 0x222c <_ZN6sdhw_t12readRegisterEh+0x78>
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    21e0:	9f ef       	ldi	r25, 0xFF	; 255
    21e2:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & _BV(SPIF)));
    21e4:	0d b4       	in	r0, 0x2d	; 45
    21e6:	07 fe       	sbrs	r0, 7
    21e8:	fd cf       	rjmp	.-6      	; 0x21e4 <_ZN6sdhw_t12readRegisterEh+0x30>
	return SPDR;
    21ea:	8e b5       	in	r24, 0x2e	; 46
}

inline uint8_t sdhw_t::response(void)
{
	uint8_t res;
	while ((res = spi::trans()) == 0xFF);
    21ec:	8f 3f       	cpi	r24, 0xFF	; 255
    21ee:	c9 f3       	breq	.-14     	; 0x21e2 <_ZN6sdhw_t12readRegisterEh+0x2e>
		goto ret;
	if ((errno = response()) != 0xFE)
    21f0:	8a 87       	std	Y+10, r24	; 0x0a
    21f2:	8e 3f       	cpi	r24, 0xFE	; 254
    21f4:	d9 f4       	brne	.+54     	; 0x222c <_ZN6sdhw_t12readRegisterEh+0x78>
		goto ret;
    21f6:	f7 01       	movw	r30, r14
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    21f8:	9f ef       	ldi	r25, 0xFF	; 255
	for (uint8_t i = 0; i < 16; i++)
    21fa:	97 01       	movw	r18, r14
    21fc:	20 5f       	subi	r18, 0xF0	; 240
    21fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2200:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & _BV(SPIF)));
    2202:	0d b4       	in	r0, 0x2d	; 45
    2204:	07 fe       	sbrs	r0, 7
    2206:	fd cf       	rjmp	.-6      	; 0x2202 <_ZN6sdhw_t12readRegisterEh+0x4e>
	return SPDR;
    2208:	8e b5       	in	r24, 0x2e	; 46
		r.data[i] = spi::trans();
    220a:	81 93       	st	Z+, r24
	spi::free(false);
	if ((errno = cmd(type)) != 0x00)
		goto ret;
	if ((errno = response()) != 0xFE)
		goto ret;
	for (uint8_t i = 0; i < 16; i++)
    220c:	e2 17       	cp	r30, r18
    220e:	f3 07       	cpc	r31, r19
    2210:	b9 f7       	brne	.-18     	; 0x2200 <_ZN6sdhw_t12readRegisterEh+0x4c>
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    2212:	8f ef       	ldi	r24, 0xFF	; 255
    2214:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    2216:	0d b4       	in	r0, 0x2d	; 45
    2218:	07 fe       	sbrs	r0, 7
    221a:	fd cf       	rjmp	.-6      	; 0x2216 <_ZN6sdhw_t12readRegisterEh+0x62>
	return SPDR;
    221c:	8e b5       	in	r24, 0x2e	; 46
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    221e:	8f ef       	ldi	r24, 0xFF	; 255
    2220:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    2222:	0d b4       	in	r0, 0x2d	; 45
    2224:	07 fe       	sbrs	r0, 7
    2226:	fd cf       	rjmp	.-6      	; 0x2222 <_ZN6sdhw_t12readRegisterEh+0x6e>
	return SPDR;
    2228:	8e b5       	in	r24, 0x2e	; 46
		r.data[i] = spi::trans();
	readCRC();
	errno = 0;
    222a:	1a 86       	std	Y+10, r1	; 0x0a
ret:
	free();
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZN6sdhw_t4freeEh>
	return r;
}
    2232:	c7 01       	movw	r24, r14
    2234:	df 91       	pop	r29
    2236:	cf 91       	pop	r28
    2238:	1f 91       	pop	r17
    223a:	ff 90       	pop	r15
    223c:	ef 90       	pop	r14
    223e:	08 95       	ret

00002240 <_ZN6sdhw_t7getSizeEv>:
	spi::fast();
	_size = getSize();
	return free(0);
}

uint32_t sdhw_t::getSize(void)
    2240:	0f 93       	push	r16
    2242:	1f 93       	push	r17
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	60 97       	sbiw	r28, 0x10	; 16
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	8c 01       	movw	r16, r24
{
	struct reg_t csd = readRegister(SEND_CSD);
    225a:	ce 01       	movw	r24, r28
    225c:	01 96       	adiw	r24, 0x01	; 1
    225e:	b8 01       	movw	r22, r16
    2260:	49 e0       	ldi	r20, 0x09	; 9
    2262:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_ZN6sdhw_t12readRegisterEh>
	if (errno)
    2266:	f8 01       	movw	r30, r16
    2268:	82 85       	ldd	r24, Z+10	; 0x0a
    226a:	88 23       	and	r24, r24
    226c:	29 f0       	breq	.+10     	; 0x2278 <_ZN6sdhw_t7getSizeEv+0x38>
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e0       	ldi	r20, 0x00	; 0
    2274:	50 e0       	ldi	r21, 0x00	; 0
    2276:	22 c0       	rjmp	.+68     	; 0x22bc <_ZN6sdhw_t7getSizeEv+0x7c>
		return 0;
	else
		return (((uint32_t)csd.data[7] << 16) | ((uint32_t)csd.data[8] << 8) | csd.data[9]) * 512;
    2278:	88 85       	ldd	r24, Y+8	; 0x08
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	a0 e0       	ldi	r26, 0x00	; 0
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	ac 01       	movw	r20, r24
    2282:	33 27       	eor	r19, r19
    2284:	22 27       	eor	r18, r18
    2286:	89 85       	ldd	r24, Y+9	; 0x09
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	a0 e0       	ldi	r26, 0x00	; 0
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	ba 2f       	mov	r27, r26
    2290:	a9 2f       	mov	r26, r25
    2292:	98 2f       	mov	r25, r24
    2294:	88 27       	eor	r24, r24
    2296:	28 2b       	or	r18, r24
    2298:	39 2b       	or	r19, r25
    229a:	4a 2b       	or	r20, r26
    229c:	5b 2b       	or	r21, r27
    229e:	8a 85       	ldd	r24, Y+10	; 0x0a
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	a0 e0       	ldi	r26, 0x00	; 0
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	28 2b       	or	r18, r24
    22a8:	39 2b       	or	r19, r25
    22aa:	4a 2b       	or	r20, r26
    22ac:	5b 2b       	or	r21, r27
    22ae:	69 e0       	ldi	r22, 0x09	; 9
    22b0:	22 0f       	add	r18, r18
    22b2:	33 1f       	adc	r19, r19
    22b4:	44 1f       	adc	r20, r20
    22b6:	55 1f       	adc	r21, r21
    22b8:	6a 95       	dec	r22
    22ba:	d1 f7       	brne	.-12     	; 0x22b0 <_ZN6sdhw_t7getSizeEv+0x70>
}
    22bc:	b9 01       	movw	r22, r18
    22be:	ca 01       	movw	r24, r20
    22c0:	60 96       	adiw	r28, 0x10	; 16
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	1f 91       	pop	r17
    22d2:	0f 91       	pop	r16
    22d4:	08 95       	ret

000022d6 <_ZN6sdhw_t4initEv>:
        if (writeProtected() != wp)
                goto loop;
        return true;
}

uint8_t sdhw_t::init(void)
    22d6:	cf 93       	push	r28
    22d8:	df 93       	push	r29
    22da:	ec 01       	movw	r28, r24
{
	if (SD_PIN & SD_CD)
    22dc:	19 9b       	sbis	0x03, 1	; 3
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <_ZN6sdhw_t4initEv+0xe>
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	80 c0       	rjmp	.+256    	; 0x23e4 <_ZN6sdhw_t4initEv+0x10e>
		return 1;
	spi::free(false);
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN3spiL4freeEb>
}

inline void spi::slow(void)
{
	// F_SCK = F_CPU / 32 = 375 kHz
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1);
    22ea:	82 e5       	ldi	r24, 0x52	; 82
    22ec:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1 << SPI2X);
    22ee:	8d b5       	in	r24, 0x2d	; 45
    22f0:	81 60       	ori	r24, 0x01	; 1
    22f2:	8d bd       	out	0x2d, r24	; 45
    22f4:	88 eb       	ldi	r24, 0xB8	; 184
    22f6:	9b e0       	ldi	r25, 0x0B	; 11
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <_ZN6sdhw_t4initEv+0x22>
inline void spi::assert(const bool e)
{
	if (e)
		SPI_PORT &= ~SPI_SS;
	else
		SPI_PORT |= SPI_SS;
    22fc:	2c 9a       	sbi	0x05, 4	; 5
    22fe:	80 e0       	ldi	r24, 0x00	; 0
	SPSR |= (1 << SPI2X);
}

inline uint8_t spi::trans(const uint8_t d)
{
	SPDR = d;
    2300:	9f ef       	ldi	r25, 0xFF	; 255
    2302:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & _BV(SPIF)));
    2304:	0d b4       	in	r0, 0x2d	; 45
    2306:	07 fe       	sbrs	r0, 7
    2308:	fd cf       	rjmp	.-6      	; 0x2304 <_ZN6sdhw_t4initEv+0x2e>
	return SPDR;
    230a:	2e b5       	in	r18, 0x2e	; 46
	spi::slow();
	_delay_ms(1);				// Wait >= 1ms
	spi::assert(false);
	for (uint8_t i = 0; i < 10; i++)
    230c:	8f 5f       	subi	r24, 0xFF	; 255
    230e:	8a 30       	cpi	r24, 0x0A	; 10
    2310:	c1 f7       	brne	.-16     	; 0x2302 <_ZN6sdhw_t4initEv+0x2c>
		spi::trans();			// >= 74 dummy clock
	if ((errno = cmd(GO_IDLE_STATE, 0, GO_IDLE_STATE_CRC)) > 0x01)
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	50 e0       	ldi	r21, 0x00	; 0
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	70 e0       	ldi	r23, 0x00	; 0
    231c:	2a e4       	ldi	r18, 0x4A	; 74
    231e:	0e 94 1f 10 	call	0x203e	; 0x203e <_ZN6sdhw_t3cmdEhmh>
    2322:	8a 87       	std	Y+10, r24	; 0x0a
    2324:	82 30       	cpi	r24, 0x02	; 2
    2326:	10 f0       	brcs	.+4      	; 0x232c <_ZN6sdhw_t4initEv+0x56>
		return free(2);
    2328:	82 e0       	ldi	r24, 0x02	; 2
    232a:	5a c0       	rjmp	.+180    	; 0x23e0 <_ZN6sdhw_t4initEv+0x10a>
	if ((errno = cmd(SEND_IF_COND, SEND_IF_COND_ARG, SEND_IF_COND_CRC)) > 0x01)
    232c:	88 e0       	ldi	r24, 0x08	; 8
    232e:	4a ea       	ldi	r20, 0xAA	; 170
    2330:	51 e0       	ldi	r21, 0x01	; 1
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	70 e0       	ldi	r23, 0x00	; 0
    2336:	23 e4       	ldi	r18, 0x43	; 67
    2338:	0e 94 1f 10 	call	0x203e	; 0x203e <_ZN6sdhw_t3cmdEhmh>
    233c:	8a 87       	std	Y+10, r24	; 0x0a
    233e:	82 30       	cpi	r24, 0x02	; 2
    2340:	10 f0       	brcs	.+4      	; 0x2346 <_ZN6sdhw_t4initEv+0x70>
		return free(3);
    2342:	83 e0       	ldi	r24, 0x03	; 3
    2344:	4d c0       	rjmp	.+154    	; 0x23e0 <_ZN6sdhw_t4initEv+0x10a>
	if ((spi::trans32big() & ~(0xFFFFFFFF << 12)) != SEND_IF_COND_ARG)
    2346:	6f ef       	ldi	r22, 0xFF	; 255
    2348:	7f ef       	ldi	r23, 0xFF	; 255
    234a:	8f ef       	ldi	r24, 0xFF	; 255
    234c:	9f ef       	ldi	r25, 0xFF	; 255
    234e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <_ZN3spiL10trans32bigEm>
    2352:	7f 70       	andi	r23, 0x0F	; 15
    2354:	80 70       	andi	r24, 0x00	; 0
    2356:	90 70       	andi	r25, 0x00	; 0
    2358:	6a 5a       	subi	r22, 0xAA	; 170
    235a:	71 40       	sbci	r23, 0x01	; 1
    235c:	80 40       	sbci	r24, 0x00	; 0
    235e:	90 40       	sbci	r25, 0x00	; 0
    2360:	11 f0       	breq	.+4      	; 0x2366 <_ZN6sdhw_t4initEv+0x90>
		return free(4);
    2362:	84 e0       	ldi	r24, 0x04	; 4
    2364:	3d c0       	rjmp	.+122    	; 0x23e0 <_ZN6sdhw_t4initEv+0x10a>
	return response();
}

inline uint8_t sdhw_t::acmd(const uint8_t index, const uint32_t arg, const uint8_t crc)
{
	uint8_t res = cmd(APP_CMD);
    2366:	87 e3       	ldi	r24, 0x37	; 55
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	60 e0       	ldi	r22, 0x00	; 0
    236e:	70 e0       	ldi	r23, 0x00	; 0
    2370:	2f ef       	ldi	r18, 0xFF	; 255
    2372:	0e 94 1f 10 	call	0x203e	; 0x203e <_ZN6sdhw_t3cmdEhmh>
	if (res > 0x01)
    2376:	82 30       	cpi	r24, 0x02	; 2
    2378:	40 f4       	brcc	.+16     	; 0x238a <_ZN6sdhw_t4initEv+0xb4>
		return res;
	return cmd(index, arg, crc);
    237a:	89 e2       	ldi	r24, 0x29	; 41
    237c:	40 e0       	ldi	r20, 0x00	; 0
    237e:	50 e0       	ldi	r21, 0x00	; 0
    2380:	60 e0       	ldi	r22, 0x00	; 0
    2382:	70 e4       	ldi	r23, 0x40	; 64
    2384:	2f ef       	ldi	r18, 0xFF	; 255
    2386:	0e 94 1f 10 	call	0x203e	; 0x203e <_ZN6sdhw_t3cmdEhmh>
init:
	switch (errno = acmd(APP_SEND_OP_COND, 0x40000000)) {
    238a:	8a 87       	std	Y+10, r24	; 0x0a
    238c:	88 23       	and	r24, r24
    238e:	21 f0       	breq	.+8      	; 0x2398 <_ZN6sdhw_t4initEv+0xc2>
    2390:	81 30       	cpi	r24, 0x01	; 1
    2392:	49 f3       	breq	.-46     	; 0x2366 <_ZN6sdhw_t4initEv+0x90>
	case 0x00:
		goto initFin;
	case 0x01:
		goto init;
	default:
		return free(5);
    2394:	85 e0       	ldi	r24, 0x05	; 5
    2396:	24 c0       	rjmp	.+72     	; 0x23e0 <_ZN6sdhw_t4initEv+0x10a>
	}
initFin:
	if ((errno = cmd(READ_OCR)) != 0x00)
    2398:	8a e3       	ldi	r24, 0x3A	; 58
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	50 e0       	ldi	r21, 0x00	; 0
    239e:	60 e0       	ldi	r22, 0x00	; 0
    23a0:	70 e0       	ldi	r23, 0x00	; 0
    23a2:	2f ef       	ldi	r18, 0xFF	; 255
    23a4:	0e 94 1f 10 	call	0x203e	; 0x203e <_ZN6sdhw_t3cmdEhmh>
    23a8:	8a 87       	std	Y+10, r24	; 0x0a
    23aa:	88 23       	and	r24, r24
    23ac:	11 f0       	breq	.+4      	; 0x23b2 <_ZN6sdhw_t4initEv+0xdc>
		return free(6);
    23ae:	86 e0       	ldi	r24, 0x06	; 6
    23b0:	17 c0       	rjmp	.+46     	; 0x23e0 <_ZN6sdhw_t4initEv+0x10a>
	if (!(spi::trans32big() & 0x40000000))
    23b2:	6f ef       	ldi	r22, 0xFF	; 255
    23b4:	7f ef       	ldi	r23, 0xFF	; 255
    23b6:	8f ef       	ldi	r24, 0xFF	; 255
    23b8:	9f ef       	ldi	r25, 0xFF	; 255
    23ba:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <_ZN3spiL10trans32bigEm>
    23be:	96 fd       	sbrc	r25, 6
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <_ZN6sdhw_t4initEv+0xf0>
		return free(7);
    23c2:	87 e0       	ldi	r24, 0x07	; 7
    23c4:	0d c0       	rjmp	.+26     	; 0x23e0 <_ZN6sdhw_t4initEv+0x10a>
}

inline void spi::fast(void)
{
	// F_SCK = F_CPU / 2 = 6 MHz		// Fast SPI speed
	SPCR = (1 << SPE) | (1 << MSTR);
    23c6:	80 e5       	ldi	r24, 0x50	; 80
    23c8:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1 << SPI2X);
    23ca:	8d b5       	in	r24, 0x2d	; 45
    23cc:	81 60       	ori	r24, 0x01	; 1
    23ce:	8d bd       	out	0x2d, r24	; 45
	spi::fast();
	_size = getSize();
    23d0:	ce 01       	movw	r24, r28
    23d2:	0e 94 20 11 	call	0x2240	; 0x2240 <_ZN6sdhw_t7getSizeEv>
    23d6:	6c 83       	std	Y+4, r22	; 0x04
    23d8:	7d 83       	std	Y+5, r23	; 0x05
    23da:	8e 83       	std	Y+6, r24	; 0x06
    23dc:	9f 83       	std	Y+7, r25	; 0x07
	return free(0);
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZN6sdhw_t4freeEh>
}
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	08 95       	ret

000023ea <init_dac>:

static volatile uint8_t dac_data, dac_tx_status;

void init_dac(void)
{
	dac_tx_status = 0;
    23ea:	10 92 23 03 	sts	0x0323, r1

	// Port initialisation
	DDRD |= DAC_LOAD | DAC_DATA | DAC_CLK;
    23ee:	8a b1       	in	r24, 0x0a	; 10
    23f0:	8c 61       	ori	r24, 0x1C	; 28
    23f2:	8a b9       	out	0x0a, r24	; 10
	PORTD |= DAC_LOAD | DAC_DATA | DAC_CLK;
    23f4:	8b b1       	in	r24, 0x0b	; 11
    23f6:	8c 61       	ori	r24, 0x1C	; 28
    23f8:	8b b9       	out	0x0b, r24	; 11
	// Configure UART1 in SPI mode
	// Enable transmit only
	UCSR1B = _BV(TXEN1);
    23fa:	88 e0       	ldi	r24, 0x08	; 8
    23fc:	80 93 c9 00 	sts	0x00C9, r24
	// Master SPI mode, MSB first, data setup at rising edge
	UCSR1C = _BV(UMSEL11) | _BV(UMSEL10) | _BV(UCPHA1);
    2400:	82 ec       	ldi	r24, 0xC2	; 194
    2402:	80 93 ca 00 	sts	0x00CA, r24
	// BAUD = FOSC / (2 * (UBRR1 + 1))
	UBRR1H = 0;
    2406:	10 92 cd 00 	sts	0x00CD, r1
	// Clock frequency max. 1MHz
	UBRR1L = F_CPU / 1000000 / 2 - 1;
    240a:	85 e0       	ldi	r24, 0x05	; 5
    240c:	80 93 cc 00 	sts	0x00CC, r24
	// Clear transmit complete flag
	UCSR1A |= _BV(TXC1);
    2410:	e8 ec       	ldi	r30, 0xC8	; 200
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	80 64       	ori	r24, 0x40	; 64
    2418:	80 83       	st	Z, r24
}
    241a:	08 95       	ret

0000241c <set_dac>:

void set_dac(uint8_t data)
{
	UDR1 = DAC_CHANNEL * 2 + 1;	// RNG = 1 for gain of 2x from ref
    241c:	91 e0       	ldi	r25, 0x01	; 1
    241e:	90 93 ce 00 	sts	0x00CE, r25
	dac_data = data;
    2422:	80 93 22 03 	sts	0x0322, r24
	// Enable data register empty interrupt
	UCSR1B |= _BV(UDRE1);
    2426:	e9 ec       	ldi	r30, 0xC9	; 201
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	80 62       	ori	r24, 0x20	; 32
    242e:	80 83       	st	Z, r24
	return;
}
    2430:	08 95       	ret

00002432 <__vector_29>:

// USART1 Data register empty interrupt
ISR(USART1_UDRE_vect)
{
    2432:	1f 92       	push	r1
    2434:	0f 92       	push	r0
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	0f 92       	push	r0
    243a:	11 24       	eor	r1, r1
    243c:	8f 93       	push	r24
    243e:	ef 93       	push	r30
    2440:	ff 93       	push	r31
	UDR1 = dac_data;
    2442:	80 91 22 03 	lds	r24, 0x0322
    2446:	80 93 ce 00 	sts	0x00CE, r24
	// Disable data register empty interrupt
	UCSR1B &= ~_BV(UDRE1);
    244a:	e9 ec       	ldi	r30, 0xC9	; 201
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	8f 7d       	andi	r24, 0xDF	; 223
    2452:	80 83       	st	Z, r24
	// Enable transmit complete interrupt
	UCSR1B |= _BV(TXC1);
    2454:	80 81       	ld	r24, Z
    2456:	80 64       	ori	r24, 0x40	; 64
    2458:	80 83       	st	Z, r24
}
    245a:	ff 91       	pop	r31
    245c:	ef 91       	pop	r30
    245e:	8f 91       	pop	r24
    2460:	0f 90       	pop	r0
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	0f 90       	pop	r0
    2466:	1f 90       	pop	r1
    2468:	18 95       	reti

0000246a <__vector_30>:

// USART1 Transmit complete interrupt
ISR(USART1_TX_vect, ISR_NOBLOCK)
{
    246a:	78 94       	sei
    246c:	1f 92       	push	r1
    246e:	0f 92       	push	r0
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	0f 92       	push	r0
    2474:	11 24       	eor	r1, r1
    2476:	8f 93       	push	r24
	if (!dac_tx_status) {	// Transmitted channel configure byte
    2478:	80 91 23 03 	lds	r24, 0x0323
    247c:	88 23       	and	r24, r24
    247e:	31 f4       	brne	.+12     	; 0x248c <__vector_30+0x22>
		dac_tx_status++;
    2480:	80 91 23 03 	lds	r24, 0x0323
    2484:	8f 5f       	subi	r24, 0xFF	; 255
    2486:	80 93 23 03 	sts	0x0323, r24
    248a:	0a c0       	rjmp	.+20     	; 0x24a0 <__vector_30+0x36>
		return;
	}
	PORTD &= ~DAC_LOAD;	// Lowing DAC_LOAD to load
    248c:	5a 98       	cbi	0x0b, 2	; 11
	_NOP();		// tW(LOAD) min. 250ns
    248e:	00 00       	nop
	dac_tx_status = 0;
    2490:	10 92 23 03 	sts	0x0323, r1
	// Disable transmit complete interrupt
	UCSR1B &= ~_BV(TXC1);
    2494:	80 91 c9 00 	lds	r24, 0x00C9
    2498:	8f 7b       	andi	r24, 0xBF	; 191
    249a:	80 93 c9 00 	sts	0x00C9, r24
	PORTD |= DAC_LOAD;
    249e:	5a 9a       	sbi	0x0b, 2	; 11
}
    24a0:	8f 91       	pop	r24
    24a2:	0f 90       	pop	r0
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	0f 90       	pop	r0
    24a8:	1f 90       	pop	r1
    24aa:	18 95       	reti

000024ac <_ZN5tfthwL7write16Ej>:
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    24ac:	98 b9       	out	0x08, r25	; 8
	TFT_WCTRL &= ~TFT_WR;
    24ae:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    24b0:	13 9a       	sbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    24b2:	88 b9       	out	0x08, r24	; 8
	TFT_WCTRL &= ~TFT_WR;
    24b4:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    24b6:	13 9a       	sbi	0x02, 3	; 2
	// 0x2c Write, 0x2e Read, 0x3c / 0x3e Continue, 0x00 NOP
	static inline void memWrite() {cmd(0x2c);}
	static inline void memRead() {cmd(0x2e);}
	static inline void mode(bool read);
	static inline void write(const uint8_t d) {data(d);}
	static inline void write16(const uint16_t c) {write(c >> 8); write(c & 0xff);}
    24b8:	08 95       	ret

000024ba <_ZN5tfthwL3cmdEh>:
	data(orient);
}

static inline void tfthw::cmd(uint8_t dat)
{
	TFT_WCTRL &= ~TFT_RS;
    24ba:	14 98       	cbi	0x02, 4	; 2
	TFT_WDATA = dat;
    24bc:	88 b9       	out	0x08, r24	; 8
	TFT_WCTRL &= ~TFT_WR;
    24be:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    24c0:	13 9a       	sbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_RS;
    24c2:	14 9a       	sbi	0x02, 4	; 2
}
    24c4:	08 95       	ret

000024c6 <_ZN5tfthwL9setOrientEh>:
{
	using namespace tft;
	static const uint8_t base = 0x08;
	static const uint8_t MY = 1U << 7, MX = 1U << 6, MV = 1U << 5;
	static uint8_t orient;
	orient = o & Portrait ?  base | MX : base | MV;
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	a9 01       	movw	r20, r18
    24cc:	41 70       	andi	r20, 0x01	; 1
    24ce:	50 70       	andi	r21, 0x00	; 0
    24d0:	80 fd       	sbrc	r24, 0
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <_ZN5tfthwL9setOrientEh+0x12>
    24d4:	98 e2       	ldi	r25, 0x28	; 40
    24d6:	01 c0       	rjmp	.+2      	; 0x24da <_ZN5tfthwL9setOrientEh+0x14>
    24d8:	98 e4       	ldi	r25, 0x48	; 72
    24da:	90 93 35 03 	sts	0x0335, r25
	if (o & Flipped)
    24de:	21 ff       	sbrs	r18, 1
    24e0:	04 c0       	rjmp	.+8      	; 0x24ea <_ZN5tfthwL9setOrientEh+0x24>
		orient ^= MY | MX;
    24e2:	80 ec       	ldi	r24, 0xC0	; 192
    24e4:	98 27       	eor	r25, r24
    24e6:	90 93 35 03 	sts	0x0335, r25
	if (o & BMPMode)
    24ea:	22 ff       	sbrs	r18, 2
    24ec:	0a c0       	rjmp	.+20     	; 0x2502 <_ZN5tfthwL9setOrientEh+0x3c>
		orient ^= o & Portrait ? MY : MX;
    24ee:	90 91 35 03 	lds	r25, 0x0335
    24f2:	45 2b       	or	r20, r21
    24f4:	11 f4       	brne	.+4      	; 0x24fa <_ZN5tfthwL9setOrientEh+0x34>
    24f6:	80 e4       	ldi	r24, 0x40	; 64
    24f8:	01 c0       	rjmp	.+2      	; 0x24fc <_ZN5tfthwL9setOrientEh+0x36>
    24fa:	80 e8       	ldi	r24, 0x80	; 128
    24fc:	89 27       	eor	r24, r25
    24fe:	80 93 35 03 	sts	0x0335, r24
	cmd(0x36);			// Memory Access Control
    2502:	86 e3       	ldi	r24, 0x36	; 54
    2504:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
	data(orient);
    2508:	80 91 35 03 	lds	r24, 0x0335
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    250c:	88 b9       	out	0x08, r24	; 8
	TFT_WCTRL &= ~TFT_WR;
    250e:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2510:	13 9a       	sbi	0x02, 3	; 2
		orient ^= MY | MX;
	if (o & BMPMode)
		orient ^= o & Portrait ? MY : MX;
	cmd(0x36);			// Memory Access Control
	data(orient);
}
    2512:	08 95       	ret

00002514 <_ZN5tfthwL4areaEjjjj>:
	area(x, y, 1, 1);
	memWrite();
	write16(c);
}

inline void tfthw::area(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
    2514:	af 92       	push	r10
    2516:	bf 92       	push	r11
    2518:	cf 92       	push	r12
    251a:	df 92       	push	r13
    251c:	ef 92       	push	r14
    251e:	ff 92       	push	r15
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	8c 01       	movw	r16, r24
    2526:	7b 01       	movw	r14, r22
    2528:	6a 01       	movw	r12, r20
    252a:	59 01       	movw	r10, r18
}
#endif

static inline void tfthw::setColumn(const uint16_t start, const uint16_t end)
{
	cmd(0x2a);	// Set column address
    252c:	8a e2       	ldi	r24, 0x2A	; 42
    252e:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
	write16(start);
    2532:	c8 01       	movw	r24, r16
    2534:	0e 94 56 12 	call	0x24ac	; 0x24ac <_ZN5tfthwL7write16Ej>
	write16(end);
    2538:	01 50       	subi	r16, 0x01	; 1
    253a:	10 40       	sbci	r17, 0x00	; 0
    253c:	c8 01       	movw	r24, r16
    253e:	8c 0d       	add	r24, r12
    2540:	9d 1d       	adc	r25, r13
    2542:	0e 94 56 12 	call	0x24ac	; 0x24ac <_ZN5tfthwL7write16Ej>
}

static inline void tfthw::setPage(const uint16_t start, const uint16_t end)
{
	cmd(0x2b);	// Set page(row) address
    2546:	8b e2       	ldi	r24, 0x2B	; 43
    2548:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
	write16(start);
    254c:	c7 01       	movw	r24, r14
    254e:	0e 94 56 12 	call	0x24ac	; 0x24ac <_ZN5tfthwL7write16Ej>
	write16(end);
    2552:	08 94       	sec
    2554:	e1 08       	sbc	r14, r1
    2556:	f1 08       	sbc	r15, r1
    2558:	c7 01       	movw	r24, r14
    255a:	8a 0d       	add	r24, r10
    255c:	9b 1d       	adc	r25, r11
    255e:	0e 94 56 12 	call	0x24ac	; 0x24ac <_ZN5tfthwL7write16Ej>
{
	using namespace tfthw;
	setColumn(x, x + w - 1);
	setPage(y, y + h - 1);
}
    2562:	1f 91       	pop	r17
    2564:	0f 91       	pop	r16
    2566:	ff 90       	pop	r15
    2568:	ef 90       	pop	r14
    256a:	df 90       	pop	r13
    256c:	cf 90       	pop	r12
    256e:	bf 90       	pop	r11
    2570:	af 90       	pop	r10
    2572:	08 95       	ret

00002574 <_ZN3tftL5pointEjjj>:
		drawChar(c);
		next();
	}
}

inline void tft::point(uint16_t x, uint16_t y, uint16_t c)
    2574:	cf 93       	push	r28
    2576:	df 93       	push	r29
    2578:	9c 01       	movw	r18, r24
    257a:	ea 01       	movw	r28, r20
{
	using namespace tfthw;
	if (x >= width || y >= height)
    257c:	80 91 2b 03 	lds	r24, 0x032B
    2580:	90 91 2c 03 	lds	r25, 0x032C
    2584:	28 17       	cp	r18, r24
    2586:	39 07       	cpc	r19, r25
    2588:	a0 f4       	brcc	.+40     	; 0x25b2 <_ZN3tftL5pointEjjj+0x3e>
    258a:	80 91 2d 03 	lds	r24, 0x032D
    258e:	90 91 2e 03 	lds	r25, 0x032E
    2592:	68 17       	cp	r22, r24
    2594:	79 07       	cpc	r23, r25
    2596:	68 f4       	brcc	.+26     	; 0x25b2 <_ZN3tftL5pointEjjj+0x3e>
		return;
	area(x, y, 1, 1);
    2598:	c9 01       	movw	r24, r18
    259a:	41 e0       	ldi	r20, 0x01	; 1
    259c:	50 e0       	ldi	r21, 0x00	; 0
    259e:	21 e0       	ldi	r18, 0x01	; 1
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	0e 94 8a 12 	call	0x2514	; 0x2514 <_ZN5tfthwL4areaEjjjj>
	static inline void setBGLight(bool ctrl);
	static inline void setOrient(uint8_t o);
	static inline void setPage(const uint16_t start, const uint16_t end);
	static inline void setColumn(const uint16_t start, const uint16_t end);
	// 0x2c Write, 0x2e Read, 0x3c / 0x3e Continue, 0x00 NOP
	static inline void memWrite() {cmd(0x2c);}
    25a6:	8c e2       	ldi	r24, 0x2C	; 44
    25a8:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
	memWrite();
	write16(c);
    25ac:	ce 01       	movw	r24, r28
    25ae:	0e 94 56 12 	call	0x24ac	; 0x24ac <_ZN5tfthwL7write16Ej>
}
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	08 95       	ret

000025b8 <_ZN3tft7setFontEhh>:
	Type tmp = a;
	a = b;
	b = tmp;
}

bool tft::setFont(uint8_t w, uint8_t h)
    25b8:	98 2f       	mov	r25, r24
{
	if (font->width == w && font->height == h)
    25ba:	e0 91 f7 02 	lds	r30, 0x02F7
    25be:	f0 91 f8 02 	lds	r31, 0x02F8
    25c2:	80 81       	ld	r24, Z
    25c4:	89 17       	cp	r24, r25
    25c6:	19 f4       	brne	.+6      	; 0x25ce <_ZN3tft7setFontEhh+0x16>
    25c8:	81 81       	ldd	r24, Z+1	; 0x01
    25ca:	86 17       	cp	r24, r22
    25cc:	61 f0       	breq	.+24     	; 0x25e6 <_ZN3tft7setFontEhh+0x2e>
    25ce:	ef ee       	ldi	r30, 0xEF	; 239
    25d0:	f2 e0       	ldi	r31, 0x02	; 2
		return true;
	const struct font_t *ptr = &fonts;
	while (ptr != 0)
		if (ptr->width == w && ptr->height == h) {
    25d2:	80 81       	ld	r24, Z
    25d4:	89 17       	cp	r24, r25
    25d6:	49 f4       	brne	.+18     	; 0x25ea <_ZN3tft7setFontEhh+0x32>
    25d8:	81 81       	ldd	r24, Z+1	; 0x01
    25da:	86 17       	cp	r24, r22
    25dc:	31 f4       	brne	.+12     	; 0x25ea <_ZN3tft7setFontEhh+0x32>
			font = ptr;
    25de:	f0 93 f8 02 	sts	0x02F8, r31
    25e2:	e0 93 f7 02 	sts	0x02F7, r30
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	08 95       	ret
			return true;
		} else
			ptr = ptr->next;
    25ea:	06 80       	ldd	r0, Z+6	; 0x06
    25ec:	f7 81       	ldd	r31, Z+7	; 0x07
    25ee:	e0 2d       	mov	r30, r0
bool tft::setFont(uint8_t w, uint8_t h)
{
	if (font->width == w && font->height == h)
		return true;
	const struct font_t *ptr = &fonts;
	while (ptr != 0)
    25f0:	30 97       	sbiw	r30, 0x00	; 0
    25f2:	79 f7       	brne	.-34     	; 0x25d2 <_ZN3tft7setFontEhh+0x1a>
    25f4:	80 e0       	ldi	r24, 0x00	; 0
			font = ptr;
			return true;
		} else
			ptr = ptr->next;
	return false;
}
    25f6:	08 95       	ret

000025f8 <_ZN3tft9rectangleEjjjjj>:
			point(x, y0 + dy * (x - x0) / dx * \
					(y0 > y1 ? -1 : 1), c);
	}
}

void tft::rectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
    25f8:	cf 92       	push	r12
    25fa:	df 92       	push	r13
    25fc:	ef 92       	push	r14
    25fe:	ff 92       	push	r15
    2600:	0f 93       	push	r16
    2602:	1f 93       	push	r17
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	fc 01       	movw	r30, r24
    260a:	6a 01       	movw	r12, r20
    260c:	79 01       	movw	r14, r18
{
	if ((int16_t)w <= 0 || (int16_t)h <= 0)
    260e:	14 16       	cp	r1, r20
    2610:	15 06       	cpc	r1, r21
    2612:	0c f0       	brlt	.+2      	; 0x2616 <_ZN3tft9rectangleEjjjjj+0x1e>
    2614:	4f c0       	rjmp	.+158    	; 0x26b4 <_ZN3tft9rectangleEjjjjj+0xbc>
    2616:	12 16       	cp	r1, r18
    2618:	13 06       	cpc	r1, r19
    261a:	0c f0       	brlt	.+2      	; 0x261e <_ZN3tft9rectangleEjjjjj+0x26>
    261c:	4b c0       	rjmp	.+150    	; 0x26b4 <_ZN3tft9rectangleEjjjjj+0xbc>
		goto draw;
	}

disp:
#endif
	if ((int16_t)x < 0) {
    261e:	97 ff       	sbrs	r25, 7
    2620:	04 c0       	rjmp	.+8      	; 0x262a <_ZN3tft9rectangleEjjjjj+0x32>
		w -= -(int16_t)x;
    2622:	c8 0e       	add	r12, r24
    2624:	d9 1e       	adc	r13, r25
    2626:	e0 e0       	ldi	r30, 0x00	; 0
    2628:	f0 e0       	ldi	r31, 0x00	; 0
		x = 0;
	}
	if ((int16_t)y < 0) {
    262a:	77 ff       	sbrs	r23, 7
    262c:	04 c0       	rjmp	.+8      	; 0x2636 <_ZN3tft9rectangleEjjjjj+0x3e>
		h -= -(int16_t)y;
    262e:	e6 0e       	add	r14, r22
    2630:	f7 1e       	adc	r15, r23
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	70 e0       	ldi	r23, 0x00	; 0
		y = 0;
	}
	if ((int16_t)w <= 0 || (int16_t)h <= 0)
    2636:	1c 14       	cp	r1, r12
    2638:	1d 04       	cpc	r1, r13
    263a:	e4 f5       	brge	.+120    	; 0x26b4 <_ZN3tft9rectangleEjjjjj+0xbc>
    263c:	1e 14       	cp	r1, r14
    263e:	1f 04       	cpc	r1, r15
    2640:	cc f5       	brge	.+114    	; 0x26b4 <_ZN3tft9rectangleEjjjjj+0xbc>
		return;
	if (x + w > width)
    2642:	20 91 2b 03 	lds	r18, 0x032B
    2646:	30 91 2c 03 	lds	r19, 0x032C
    264a:	c6 01       	movw	r24, r12
    264c:	8e 0f       	add	r24, r30
    264e:	9f 1f       	adc	r25, r31
    2650:	28 17       	cp	r18, r24
    2652:	39 07       	cpc	r19, r25
    2654:	18 f4       	brcc	.+6      	; 0x265c <_ZN3tft9rectangleEjjjjj+0x64>
		w = width - x;
    2656:	69 01       	movw	r12, r18
    2658:	ce 1a       	sub	r12, r30
    265a:	df 0a       	sbc	r13, r31
	if (y + h > height)
    265c:	20 91 2d 03 	lds	r18, 0x032D
    2660:	30 91 2e 03 	lds	r19, 0x032E
    2664:	c7 01       	movw	r24, r14
    2666:	86 0f       	add	r24, r22
    2668:	97 1f       	adc	r25, r23
    266a:	28 17       	cp	r18, r24
    266c:	39 07       	cpc	r19, r25
    266e:	18 f4       	brcc	.+6      	; 0x2676 <_ZN3tft9rectangleEjjjjj+0x7e>
		h = height - y;
    2670:	79 01       	movw	r14, r18
    2672:	e6 1a       	sub	r14, r22
    2674:	f7 0a       	sbc	r15, r23
	if ((int16_t)w <= 0 || (int16_t)h <= 0)
    2676:	1c 14       	cp	r1, r12
    2678:	1d 04       	cpc	r1, r13
    267a:	e4 f4       	brge	.+56     	; 0x26b4 <_ZN3tft9rectangleEjjjjj+0xbc>
    267c:	1e 14       	cp	r1, r14
    267e:	1f 04       	cpc	r1, r15
    2680:	cc f4       	brge	.+50     	; 0x26b4 <_ZN3tft9rectangleEjjjjj+0xbc>
		return;

	tfthw::area(x, y, w, h);
    2682:	cf 01       	movw	r24, r30
    2684:	a6 01       	movw	r20, r12
    2686:	97 01       	movw	r18, r14
    2688:	0e 94 8a 12 	call	0x2514	; 0x2514 <_ZN5tfthwL4areaEjjjj>
    268c:	8c e2       	ldi	r24, 0x2C	; 44
    268e:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
    2692:	0a c0       	rjmp	.+20     	; 0x26a8 <_ZN3tft9rectangleEjjjjj+0xb0>
draw:
#endif
	tfthw::memWrite();
	while (h--)
		for (uint16_t xx = 0; xx < w; xx++)
			tfthw::write16(c);
    2694:	c8 01       	movw	r24, r16
    2696:	0e 94 56 12 	call	0x24ac	; 0x24ac <_ZN5tfthwL7write16Ej>
#ifdef TFT_VERTICAL_SCROLLING
draw:
#endif
	tfthw::memWrite();
	while (h--)
		for (uint16_t xx = 0; xx < w; xx++)
    269a:	21 96       	adiw	r28, 0x01	; 1
    269c:	cc 15       	cp	r28, r12
    269e:	dd 05       	cpc	r29, r13
    26a0:	c8 f3       	brcs	.-14     	; 0x2694 <_ZN3tft9rectangleEjjjjj+0x9c>
    26a2:	08 94       	sec
    26a4:	e1 08       	sbc	r14, r1
    26a6:	f1 08       	sbc	r15, r1
	tfthw::area(x, y, w, h);
#ifdef TFT_VERTICAL_SCROLLING
draw:
#endif
	tfthw::memWrite();
	while (h--)
    26a8:	e1 14       	cp	r14, r1
    26aa:	f1 04       	cpc	r15, r1
    26ac:	19 f0       	breq	.+6      	; 0x26b4 <_ZN3tft9rectangleEjjjjj+0xbc>
    26ae:	c0 e0       	ldi	r28, 0x00	; 0
    26b0:	d0 e0       	ldi	r29, 0x00	; 0
    26b2:	f4 cf       	rjmp	.-24     	; 0x269c <_ZN3tft9rectangleEjjjjj+0xa4>
		for (uint16_t xx = 0; xx < w; xx++)
			tfthw::write16(c);
}
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	1f 91       	pop	r17
    26ba:	0f 91       	pop	r16
    26bc:	ff 90       	pop	r15
    26be:	ef 90       	pop	r14
    26c0:	df 90       	pop	r13
    26c2:	cf 90       	pop	r12
    26c4:	08 95       	ret

000026c6 <_ZN3tft5frameEjjjjhj>:
#endif
	}
}

void tft::frame(uint16_t x, uint16_t y, uint16_t w, uint16_t h, \
		uint8_t s, uint16_t c)
    26c6:	2f 92       	push	r2
    26c8:	3f 92       	push	r3
    26ca:	4f 92       	push	r4
    26cc:	5f 92       	push	r5
    26ce:	6f 92       	push	r6
    26d0:	7f 92       	push	r7
    26d2:	8f 92       	push	r8
    26d4:	9f 92       	push	r9
    26d6:	af 92       	push	r10
    26d8:	bf 92       	push	r11
    26da:	cf 92       	push	r12
    26dc:	df 92       	push	r13
    26de:	ef 92       	push	r14
    26e0:	ff 92       	push	r15
    26e2:	0f 93       	push	r16
    26e4:	1f 93       	push	r17
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	2c 01       	movw	r4, r24
    26ec:	3b 01       	movw	r6, r22
    26ee:	5a 01       	movw	r10, r20
    26f0:	49 01       	movw	r8, r18
{
	rectangle(x, y, w - s, s, c);
    26f2:	c0 2e       	mov	r12, r16
    26f4:	dd 24       	eor	r13, r13
    26f6:	ea 01       	movw	r28, r20
    26f8:	cc 19       	sub	r28, r12
    26fa:	dd 09       	sbc	r29, r13
    26fc:	ae 01       	movw	r20, r28
    26fe:	96 01       	movw	r18, r12
    2700:	87 01       	movw	r16, r14
    2702:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZN3tft9rectangleEjjjjj>
	rectangle(x + w - s, y, s, h - s, c);
    2706:	14 01       	movw	r2, r8
    2708:	2c 18       	sub	r2, r12
    270a:	3d 08       	sbc	r3, r13
    270c:	a4 0c       	add	r10, r4
    270e:	b5 1c       	adc	r11, r5
    2710:	c5 01       	movw	r24, r10
    2712:	8c 19       	sub	r24, r12
    2714:	9d 09       	sbc	r25, r13
    2716:	b3 01       	movw	r22, r6
    2718:	a6 01       	movw	r20, r12
    271a:	91 01       	movw	r18, r2
    271c:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZN3tft9rectangleEjjjjj>
	rectangle(x, y + s, s, h - s, c);
    2720:	b6 01       	movw	r22, r12
    2722:	66 0d       	add	r22, r6
    2724:	77 1d       	adc	r23, r7
    2726:	c2 01       	movw	r24, r4
    2728:	a6 01       	movw	r20, r12
    272a:	91 01       	movw	r18, r2
    272c:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZN3tft9rectangleEjjjjj>
	rectangle(x + s, y + h - s, w - s, s, c);
    2730:	86 0c       	add	r8, r6
    2732:	97 1c       	adc	r9, r7
    2734:	8c 18       	sub	r8, r12
    2736:	9d 08       	sbc	r9, r13
    2738:	c6 01       	movw	r24, r12
    273a:	84 0d       	add	r24, r4
    273c:	95 1d       	adc	r25, r5
    273e:	b4 01       	movw	r22, r8
    2740:	ae 01       	movw	r20, r28
    2742:	96 01       	movw	r18, r12
    2744:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZN3tft9rectangleEjjjjj>
}
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	1f 91       	pop	r17
    274e:	0f 91       	pop	r16
    2750:	ff 90       	pop	r15
    2752:	ef 90       	pop	r14
    2754:	df 90       	pop	r13
    2756:	cf 90       	pop	r12
    2758:	bf 90       	pop	r11
    275a:	af 90       	pop	r10
    275c:	9f 90       	pop	r9
    275e:	8f 90       	pop	r8
    2760:	7f 90       	pop	r7
    2762:	6f 90       	pop	r6
    2764:	5f 90       	pop	r5
    2766:	4f 90       	pop	r4
    2768:	3f 90       	pop	r3
    276a:	2f 90       	pop	r2
    276c:	08 95       	ret

0000276e <_ZN3tft4lineEjjjjj>:

void tft::line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, \
		uint16_t c)
    276e:	4f 92       	push	r4
    2770:	5f 92       	push	r5
    2772:	6f 92       	push	r6
    2774:	7f 92       	push	r7
    2776:	8f 92       	push	r8
    2778:	9f 92       	push	r9
    277a:	af 92       	push	r10
    277c:	bf 92       	push	r11
    277e:	cf 92       	push	r12
    2780:	df 92       	push	r13
    2782:	ef 92       	push	r14
    2784:	ff 92       	push	r15
    2786:	0f 93       	push	r16
    2788:	1f 93       	push	r17
    278a:	cf 93       	push	r28
    278c:	df 93       	push	r29
    278e:	ec 01       	movw	r28, r24
    2790:	7b 01       	movw	r14, r22
    2792:	6a 01       	movw	r12, r20
    2794:	59 01       	movw	r10, r18
    2796:	28 01       	movw	r4, r16
{
	if (x0 > width)
    2798:	80 91 2b 03 	lds	r24, 0x032B
    279c:	90 91 2c 03 	lds	r25, 0x032C
    27a0:	8c 17       	cp	r24, r28
    27a2:	9d 07       	cpc	r25, r29
    27a4:	10 f4       	brcc	.+4      	; 0x27aa <_ZN3tft4lineEjjjjj+0x3c>
		x0 = width - 1;
    27a6:	ec 01       	movw	r28, r24
    27a8:	21 97       	sbiw	r28, 0x01	; 1
	if (x1 > width)
    27aa:	8c 15       	cp	r24, r12
    27ac:	9d 05       	cpc	r25, r13
    27ae:	20 f4       	brcc	.+8      	; 0x27b8 <_ZN3tft4lineEjjjjj+0x4a>
		x1 = width - 1;
    27b0:	6c 01       	movw	r12, r24
    27b2:	08 94       	sec
    27b4:	c1 08       	sbc	r12, r1
    27b6:	d1 08       	sbc	r13, r1
	if (y0 > height)
    27b8:	80 91 2d 03 	lds	r24, 0x032D
    27bc:	90 91 2e 03 	lds	r25, 0x032E
    27c0:	8e 15       	cp	r24, r14
    27c2:	9f 05       	cpc	r25, r15
    27c4:	20 f4       	brcc	.+8      	; 0x27ce <_ZN3tft4lineEjjjjj+0x60>
		y0 = height - 1;
    27c6:	7c 01       	movw	r14, r24
    27c8:	08 94       	sec
    27ca:	e1 08       	sbc	r14, r1
    27cc:	f1 08       	sbc	r15, r1
	if (y1 > height)
    27ce:	8a 15       	cp	r24, r10
    27d0:	9b 05       	cpc	r25, r11
    27d2:	20 f4       	brcc	.+8      	; 0x27dc <_ZN3tft4lineEjjjjj+0x6e>
		y1 = height - 1;
    27d4:	5c 01       	movw	r10, r24
    27d6:	08 94       	sec
    27d8:	a1 08       	sbc	r10, r1
    27da:	b1 08       	sbc	r11, r1
	if (x0 == x1) {
    27dc:	cc 15       	cp	r28, r12
    27de:	dd 05       	cpc	r29, r13
    27e0:	89 f4       	brne	.+34     	; 0x2804 <_ZN3tft4lineEjjjjj+0x96>
		if (y0 > y1)
    27e2:	ae 14       	cp	r10, r14
    27e4:	bf 04       	cpc	r11, r15
    27e6:	18 f4       	brcc	.+6      	; 0x27ee <_ZN3tft4lineEjjjjj+0x80>
    27e8:	c5 01       	movw	r24, r10
    27ea:	57 01       	movw	r10, r14
    27ec:	7c 01       	movw	r14, r24
			swap(y0, y1);
		rectangle(x0, y0, 1, y1 - y0 + 1, c);
    27ee:	08 94       	sec
    27f0:	a1 1c       	adc	r10, r1
    27f2:	b1 1c       	adc	r11, r1
    27f4:	ae 18       	sub	r10, r14
    27f6:	bf 08       	sbc	r11, r15
    27f8:	ce 01       	movw	r24, r28
    27fa:	b7 01       	movw	r22, r14
    27fc:	41 e0       	ldi	r20, 0x01	; 1
    27fe:	50 e0       	ldi	r21, 0x00	; 0
    2800:	95 01       	movw	r18, r10
    2802:	13 c0       	rjmp	.+38     	; 0x282a <_ZN3tft4lineEjjjjj+0xbc>
		return;
	}
	if (y0 == y1) {
    2804:	ea 14       	cp	r14, r10
    2806:	fb 04       	cpc	r15, r11
    2808:	a1 f4       	brne	.+40     	; 0x2832 <_ZN3tft4lineEjjjjj+0xc4>
		if (x0 > x1)
    280a:	cc 16       	cp	r12, r28
    280c:	dd 06       	cpc	r13, r29
    280e:	18 f4       	brcc	.+6      	; 0x2816 <_ZN3tft4lineEjjjjj+0xa8>
    2810:	c6 01       	movw	r24, r12
    2812:	6e 01       	movw	r12, r28
    2814:	ec 01       	movw	r28, r24
			swap(x0, x1);
		rectangle(x0, y0, x1 - x0 + 1, 1, c);
    2816:	08 94       	sec
    2818:	c1 1c       	adc	r12, r1
    281a:	d1 1c       	adc	r13, r1
    281c:	cc 1a       	sub	r12, r28
    281e:	dd 0a       	sbc	r13, r29
    2820:	ce 01       	movw	r24, r28
    2822:	b7 01       	movw	r22, r14
    2824:	a6 01       	movw	r20, r12
    2826:	21 e0       	ldi	r18, 0x01	; 1
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	82 01       	movw	r16, r4
    282c:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZN3tft9rectangleEjjjjj>
    2830:	6f c0       	rjmp	.+222    	; 0x2910 <_ZN3tft4lineEjjjjj+0x1a2>
		return;
	}
	uint16_t dx = abs(x1 - x0), dy = abs(y1 - y0);
    2832:	36 01       	movw	r6, r12
    2834:	6c 1a       	sub	r6, r28
    2836:	7d 0a       	sbc	r7, r29
    2838:	77 fe       	sbrs	r7, 7
    283a:	04 c0       	rjmp	.+8      	; 0x2844 <_ZN3tft4lineEjjjjj+0xd6>
    283c:	70 94       	com	r7
    283e:	61 94       	neg	r6
    2840:	71 08       	sbc	r7, r1
    2842:	73 94       	inc	r7
    2844:	45 01       	movw	r8, r10
    2846:	8e 18       	sub	r8, r14
    2848:	9f 08       	sbc	r9, r15
    284a:	97 fe       	sbrs	r9, 7
    284c:	04 c0       	rjmp	.+8      	; 0x2856 <_ZN3tft4lineEjjjjj+0xe8>
    284e:	90 94       	com	r9
    2850:	81 94       	neg	r8
    2852:	91 08       	sbc	r9, r1
    2854:	93 94       	inc	r9
	if (dx < dy) {
    2856:	68 14       	cp	r6, r8
    2858:	79 04       	cpc	r7, r9
    285a:	70 f5       	brcc	.+92     	; 0x28b8 <_ZN3tft4lineEjjjjj+0x14a>
		if (y0 > y1) {
    285c:	ae 14       	cp	r10, r14
    285e:	bf 04       	cpc	r11, r15
    2860:	30 f4       	brcc	.+12     	; 0x286e <_ZN3tft4lineEjjjjj+0x100>
    2862:	c6 01       	movw	r24, r12
    2864:	6e 01       	movw	r12, r28
    2866:	ec 01       	movw	r28, r24
    2868:	c5 01       	movw	r24, r10
    286a:	57 01       	movw	r10, r14
    286c:	7c 01       	movw	r14, r24
    286e:	00 e0       	ldi	r16, 0x00	; 0
    2870:	10 e0       	ldi	r17, 0x00	; 0
    2872:	1e c0       	rjmp	.+60     	; 0x28b0 <_ZN3tft4lineEjjjjj+0x142>
			swap(x0, x1);
			swap(y0, y1);
		}
		for (uint16_t y = y0; y <= y1; y++)
			point(x0 + dx * (y - y0) / dy * \
					(x0 > x1 ? -1 : 1), y, c);
    2874:	cc 16       	cp	r12, r28
    2876:	dd 06       	cpc	r13, r29
    2878:	18 f0       	brcs	.+6      	; 0x2880 <_ZN3tft4lineEjjjjj+0x112>
    287a:	21 e0       	ldi	r18, 0x01	; 1
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	02 c0       	rjmp	.+4      	; 0x2884 <_ZN3tft4lineEjjjjj+0x116>
    2880:	2f ef       	ldi	r18, 0xFF	; 255
    2882:	3f ef       	ldi	r19, 0xFF	; 255
    2884:	c8 01       	movw	r24, r16
    2886:	b4 01       	movw	r22, r8
    2888:	0e 94 87 18 	call	0x310e	; 0x310e <__udivmodhi4>
    288c:	26 9f       	mul	r18, r22
    288e:	c0 01       	movw	r24, r0
    2890:	27 9f       	mul	r18, r23
    2892:	90 0d       	add	r25, r0
    2894:	36 9f       	mul	r19, r22
    2896:	90 0d       	add	r25, r0
    2898:	11 24       	eor	r1, r1
    289a:	8c 0f       	add	r24, r28
    289c:	9d 1f       	adc	r25, r29
    289e:	b7 01       	movw	r22, r14
    28a0:	a2 01       	movw	r20, r4
    28a2:	0e 94 ba 12 	call	0x2574	; 0x2574 <_ZN3tftL5pointEjjj>
	if (dx < dy) {
		if (y0 > y1) {
			swap(x0, x1);
			swap(y0, y1);
		}
		for (uint16_t y = y0; y <= y1; y++)
    28a6:	08 94       	sec
    28a8:	e1 1c       	adc	r14, r1
    28aa:	f1 1c       	adc	r15, r1
    28ac:	06 0d       	add	r16, r6
    28ae:	17 1d       	adc	r17, r7
    28b0:	ae 14       	cp	r10, r14
    28b2:	bf 04       	cpc	r11, r15
    28b4:	f8 f6       	brcc	.-66     	; 0x2874 <_ZN3tft4lineEjjjjj+0x106>
    28b6:	2c c0       	rjmp	.+88     	; 0x2910 <_ZN3tft4lineEjjjjj+0x1a2>
			point(x0 + dx * (y - y0) / dy * \
					(x0 > x1 ? -1 : 1), y, c);
	} else {
		if (x0 > x1) {
    28b8:	cc 16       	cp	r12, r28
    28ba:	dd 06       	cpc	r13, r29
    28bc:	30 f4       	brcc	.+12     	; 0x28ca <_ZN3tft4lineEjjjjj+0x15c>
    28be:	c6 01       	movw	r24, r12
    28c0:	6e 01       	movw	r12, r28
    28c2:	ec 01       	movw	r28, r24
    28c4:	c5 01       	movw	r24, r10
    28c6:	57 01       	movw	r10, r14
    28c8:	7c 01       	movw	r14, r24
    28ca:	00 e0       	ldi	r16, 0x00	; 0
    28cc:	10 e0       	ldi	r17, 0x00	; 0
    28ce:	1d c0       	rjmp	.+58     	; 0x290a <_ZN3tft4lineEjjjjj+0x19c>
			swap(x0, x1);
			swap(y0, y1);
		}
		for (uint16_t x = x0; x <= x1; x++)
			point(x, y0 + dy * (x - x0) / dx * \
					(y0 > y1 ? -1 : 1), c);
    28d0:	ae 14       	cp	r10, r14
    28d2:	bf 04       	cpc	r11, r15
    28d4:	18 f0       	brcs	.+6      	; 0x28dc <_ZN3tft4lineEjjjjj+0x16e>
    28d6:	21 e0       	ldi	r18, 0x01	; 1
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <_ZN3tft4lineEjjjjj+0x172>
    28dc:	2f ef       	ldi	r18, 0xFF	; 255
    28de:	3f ef       	ldi	r19, 0xFF	; 255
    28e0:	c8 01       	movw	r24, r16
    28e2:	b3 01       	movw	r22, r6
    28e4:	0e 94 87 18 	call	0x310e	; 0x310e <__udivmodhi4>
    28e8:	cb 01       	movw	r24, r22
    28ea:	28 9f       	mul	r18, r24
    28ec:	b0 01       	movw	r22, r0
    28ee:	29 9f       	mul	r18, r25
    28f0:	70 0d       	add	r23, r0
    28f2:	38 9f       	mul	r19, r24
    28f4:	70 0d       	add	r23, r0
    28f6:	11 24       	eor	r1, r1
    28f8:	6e 0d       	add	r22, r14
    28fa:	7f 1d       	adc	r23, r15
    28fc:	ce 01       	movw	r24, r28
    28fe:	a2 01       	movw	r20, r4
    2900:	0e 94 ba 12 	call	0x2574	; 0x2574 <_ZN3tftL5pointEjjj>
	} else {
		if (x0 > x1) {
			swap(x0, x1);
			swap(y0, y1);
		}
		for (uint16_t x = x0; x <= x1; x++)
    2904:	21 96       	adiw	r28, 0x01	; 1
    2906:	08 0d       	add	r16, r8
    2908:	19 1d       	adc	r17, r9
    290a:	cc 16       	cp	r12, r28
    290c:	dd 06       	cpc	r13, r29
    290e:	00 f7       	brcc	.-64     	; 0x28d0 <_ZN3tft4lineEjjjjj+0x162>
			point(x, y0 + dy * (x - x0) / dx * \
					(y0 > y1 ? -1 : 1), c);
	}
}
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	1f 91       	pop	r17
    2916:	0f 91       	pop	r16
    2918:	ff 90       	pop	r15
    291a:	ef 90       	pop	r14
    291c:	df 90       	pop	r13
    291e:	cf 90       	pop	r12
    2920:	bf 90       	pop	r11
    2922:	af 90       	pop	r10
    2924:	9f 90       	pop	r9
    2926:	8f 90       	pop	r8
    2928:	7f 90       	pop	r7
    292a:	6f 90       	pop	r6
    292c:	5f 90       	pop	r5
    292e:	4f 90       	pop	r4
    2930:	08 95       	ret

00002932 <_ZN3tft9setOrientEh>:
			tfthw::write16(c);
}

void tft::setOrient(uint8_t o)
{
	width = TFT_SIZE_WIDTH;
    2932:	40 e4       	ldi	r20, 0x40	; 64
    2934:	51 e0       	ldi	r21, 0x01	; 1
    2936:	50 93 2c 03 	sts	0x032C, r21
    293a:	40 93 2b 03 	sts	0x032B, r20
	height = TFT_SIZE_HEIGHT;
    293e:	20 ef       	ldi	r18, 0xF0	; 240
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	30 93 2e 03 	sts	0x032E, r19
    2946:	20 93 2d 03 	sts	0x032D, r18
	if (o & Portrait)
    294a:	80 ff       	sbrs	r24, 0
    294c:	08 c0       	rjmp	.+16     	; 0x295e <_ZN3tft9setOrientEh+0x2c>

template <typename Type>
inline void tft::swap(Type &a, Type &b)
{
	Type tmp = a;
	a = b;
    294e:	30 93 2c 03 	sts	0x032C, r19
    2952:	20 93 2b 03 	sts	0x032B, r18
	b = tmp;
    2956:	50 93 2e 03 	sts	0x032E, r21
    295a:	40 93 2d 03 	sts	0x032D, r20
{
	width = TFT_SIZE_WIDTH;
	height = TFT_SIZE_HEIGHT;
	if (o & Portrait)
		swap(width, height);
	x = 0;
    295e:	10 92 28 03 	sts	0x0328, r1
    2962:	10 92 27 03 	sts	0x0327, r1
	y = 0;
    2966:	10 92 2a 03 	sts	0x032A, r1
    296a:	10 92 29 03 	sts	0x0329, r1
	orient = o;
    296e:	80 93 25 03 	sts	0x0325, r24
	tfthw::setOrient(o);
    2972:	0e 94 63 12 	call	0x24c6	; 0x24c6 <_ZN5tfthwL9setOrientEh>
}
    2976:	08 95       	ret

00002978 <_ZN3tft4initEv>:
		for (uint16_t c = width; c; c--)
			write16(background);
}
#endif

void tft::init()
    2978:	1f 93       	push	r17
static inline void tfthw::init()
{
	uint8_t c;
	uint16_t r;

	if (TFT_WCTRL == PORTC || TFT_WDATA == PORTC) {
    297a:	92 b1       	in	r25, 0x02	; 2
    297c:	88 b1       	in	r24, 0x08	; 8
    297e:	98 17       	cp	r25, r24
    2980:	21 f0       	breq	.+8      	; 0x298a <_ZN3tft4initEv+0x12>
    2982:	98 b1       	in	r25, 0x08	; 8
    2984:	88 b1       	in	r24, 0x08	; 8
    2986:	98 17       	cp	r25, r24
    2988:	31 f4       	brne	.+12     	; 0x2996 <_ZN3tft4initEv+0x1e>
		MCUCR |= 0x80;			// Disable JTAG
    298a:	85 b7       	in	r24, 0x35	; 53
    298c:	80 68       	ori	r24, 0x80	; 128
    298e:	85 bf       	out	0x35, r24	; 53
		MCUCR |= 0x80;
    2990:	85 b7       	in	r24, 0x35	; 53
    2992:	80 68       	ori	r24, 0x80	; 128
    2994:	85 bf       	out	0x35, r24	; 53
	}

	TFT_PCTRL = 0xFF & ~TFT_FMK;
    2996:	8f e7       	ldi	r24, 0x7F	; 127
    2998:	81 b9       	out	0x01, r24	; 1
	TFT_WCTRL = 0xFF & ~TFT_BLC;	// Disable background light
    299a:	8d ef       	ldi	r24, 0xFD	; 253
    299c:	82 b9       	out	0x02, r24	; 2
}

static inline void tfthw::mode(bool read)
{
	if (read) {
		TFT_PDATA = 0x00;
    299e:	17 b8       	out	0x07, r1	; 7
		TFT_WDATA = 0xFF;
    29a0:	8f ef       	ldi	r24, 0xFF	; 255
    29a2:	88 b9       	out	0x08, r24	; 8

	TFT_PCTRL = 0xFF & ~TFT_FMK;
	TFT_WCTRL = 0xFF & ~TFT_BLC;	// Disable background light
	mode(true);			// Read mode

	TFT_WCTRL &= ~TFT_RST;	// Hardware reset
    29a4:	12 98       	cbi	0x02, 2	; 2
	TFT_WCTRL &= ~TFT_CS;
    29a6:	10 98       	cbi	0x02, 0	; 2
	TFT_WCTRL |= TFT_WR;
    29a8:	13 9a       	sbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_RD;
    29aa:	15 9a       	sbi	0x02, 5	; 2
	TFT_WCTRL |= TFT_RS;
    29ac:	14 9a       	sbi	0x02, 4	; 2
	TFT_WCTRL |= TFT_VSY;
    29ae:	16 9a       	sbi	0x02, 6	; 2
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    29b0:	88 e2       	ldi	r24, 0x28	; 40
    29b2:	8a 95       	dec	r24
    29b4:	f1 f7       	brne	.-4      	; 0x29b2 <_ZN3tft4initEv+0x3a>
	_delay_us(10);		// Min: 10us
	TFT_WCTRL |= TFT_RST;
    29b6:	12 9a       	sbi	0x02, 2	; 2
    29b8:	80 eb       	ldi	r24, 0xB0	; 176
    29ba:	94 e0       	ldi	r25, 0x04	; 4
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    29bc:	2c e2       	ldi	r18, 0x2C	; 44
    29be:	31 e0       	ldi	r19, 0x01	; 1
    29c0:	f9 01       	movw	r30, r18
    29c2:	31 97       	sbiw	r30, 0x01	; 1
    29c4:	f1 f7       	brne	.-4      	; 0x29c2 <_ZN3tft4initEv+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c8:	d9 f7       	brne	.-10     	; 0x29c0 <_ZN3tft4initEv+0x48>
{
	if (read) {
		TFT_PDATA = 0x00;
		TFT_WDATA = 0xFF;
	} else
		TFT_PDATA = 0xFF;
    29ca:	8f ef       	ldi	r24, 0xFF	; 255
    29cc:	87 b9       	out	0x07, r24	; 7
	TFT_WCTRL |= TFT_VSY;
	_delay_us(10);		// Min: 10us
	TFT_WCTRL |= TFT_RST;
	_delay_ms(120);
	mode(false);		// Write mode
	cmd(0x28);		// Display OFF
    29ce:	88 e2       	ldi	r24, 0x28	; 40
    29d0:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
	cmd(0x11);		// Sleep Out
    29d4:	81 e1       	ldi	r24, 0x11	; 17
    29d6:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
    29da:	80 eb       	ldi	r24, 0xB0	; 176
    29dc:	94 e0       	ldi	r25, 0x04	; 4
    29de:	2c e2       	ldi	r18, 0x2C	; 44
    29e0:	31 e0       	ldi	r19, 0x01	; 1
    29e2:	f9 01       	movw	r30, r18
    29e4:	31 97       	sbiw	r30, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <_ZN3tft4initEv+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ea:	d9 f7       	brne	.-10     	; 0x29e2 <_ZN3tft4initEv+0x6a>
	_delay_ms(120);
	cmd(0x34);		// Tearing Effect Line OFF
    29ec:	84 e3       	ldi	r24, 0x34	; 52
    29ee:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
	cmd(0x38);		// Idle Mode OFF
    29f2:	88 e3       	ldi	r24, 0x38	; 56
    29f4:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
	cmd(0x13);		// Normal Display Mode ON
    29f8:	83 e1       	ldi	r24, 0x13	; 19
    29fa:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
	cmd(0x20);		// Display Inversion OFF
    29fe:	80 e2       	ldi	r24, 0x20	; 32
    2a00:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
	cmd(0x3A);		// COLMOD: Pixel Format Set
    2a04:	8a e3       	ldi	r24, 0x3A	; 58
    2a06:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    2a0a:	85 e5       	ldi	r24, 0x55	; 85
    2a0c:	88 b9       	out	0x08, r24	; 8
	TFT_WCTRL &= ~TFT_WR;
    2a0e:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2a10:	13 9a       	sbi	0x02, 3	; 2
	cmd(0x38);		// Idle Mode OFF
	cmd(0x13);		// Normal Display Mode ON
	cmd(0x20);		// Display Inversion OFF
	cmd(0x3A);		// COLMOD: Pixel Format Set
	data(0x55);		// 16 bits/pixel
	cmd(0x36);		// Memory Access Control
    2a12:	86 e3       	ldi	r24, 0x36	; 54
    2a14:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    2a18:	88 e4       	ldi	r24, 0x48	; 72
    2a1a:	88 b9       	out	0x08, r24	; 8
	TFT_WCTRL &= ~TFT_WR;
    2a1c:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2a1e:	13 9a       	sbi	0x02, 3	; 2
	cmd(0x20);		// Display Inversion OFF
	cmd(0x3A);		// COLMOD: Pixel Format Set
	data(0x55);		// 16 bits/pixel
	cmd(0x36);		// Memory Access Control
	data(0x48);		// Column Adress Order, BGR
	cmd(0x2C);		// Memory Write
    2a20:	8c e2       	ldi	r24, 0x2C	; 44
    2a22:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	0e c0       	rjmp	.+28     	; 0x2a48 <_ZN3tft4initEv+0xd0>
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    2a2c:	18 b8       	out	0x08, r1	; 8
	TFT_WCTRL &= ~TFT_WR;
    2a2e:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2a30:	13 9a       	sbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    2a32:	18 b8       	out	0x08, r1	; 8
	TFT_WCTRL &= ~TFT_WR;
    2a34:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2a36:	13 9a       	sbi	0x02, 3	; 2
	data(0x55);		// 16 bits/pixel
	cmd(0x36);		// Memory Access Control
	data(0x48);		// Column Adress Order, BGR
	cmd(0x2C);		// Memory Write
	for (r = 0; r < 320; r++)	// Black screen
		for (c = 0; c < 240; c++) {
    2a38:	2f 5f       	subi	r18, 0xFF	; 255
    2a3a:	20 3f       	cpi	r18, 0xF0	; 240
    2a3c:	b9 f7       	brne	.-18     	; 0x2a2c <_ZN3tft4initEv+0xb4>
	cmd(0x3A);		// COLMOD: Pixel Format Set
	data(0x55);		// 16 bits/pixel
	cmd(0x36);		// Memory Access Control
	data(0x48);		// Column Adress Order, BGR
	cmd(0x2C);		// Memory Write
	for (r = 0; r < 320; r++)	// Black screen
    2a3e:	01 96       	adiw	r24, 0x01	; 1
    2a40:	21 e0       	ldi	r18, 0x01	; 1
    2a42:	80 34       	cpi	r24, 0x40	; 64
    2a44:	92 07       	cpc	r25, r18
    2a46:	11 f0       	breq	.+4      	; 0x2a4c <_ZN3tft4initEv+0xd4>
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	f0 cf       	rjmp	.-32     	; 0x2a2c <_ZN3tft4initEv+0xb4>
		for (c = 0; c < 240; c++) {
			data(0x00);
			data(0x00);
		}
	cmd(0xB1);		// Frame Rate control, normal
    2a4c:	81 eb       	ldi	r24, 0xB1	; 177
    2a4e:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    2a52:	18 b8       	out	0x08, r1	; 8
	TFT_WCTRL &= ~TFT_WR;
    2a54:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2a56:	13 9a       	sbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    2a58:	18 e1       	ldi	r17, 0x18	; 24
    2a5a:	18 b9       	out	0x08, r17	; 8
	TFT_WCTRL &= ~TFT_WR;
    2a5c:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2a5e:	13 9a       	sbi	0x02, 3	; 2
			data(0x00);
		}
	cmd(0xB1);		// Frame Rate control, normal
	data(0x00);		// Faster
	data(0x18);
	cmd(0xB3);		// Frame Rate control, partial
    2a60:	83 eb       	ldi	r24, 0xB3	; 179
    2a62:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    2a66:	18 b8       	out	0x08, r1	; 8
	TFT_WCTRL &= ~TFT_WR;
    2a68:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2a6a:	13 9a       	sbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    2a6c:	18 b9       	out	0x08, r17	; 8
	TFT_WCTRL &= ~TFT_WR;
    2a6e:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2a70:	13 9a       	sbi	0x02, 3	; 2
	data(0x00);		// Faster
	data(0x18);
	cmd(0xB3);		// Frame Rate control, partial
	data(0x00);		// Faster
	data(0x18);
	cmd(0x29);		// Display On
    2a72:	89 e2       	ldi	r24, 0x29	; 41
    2a74:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
{
	tfthw::init();
	x = 0;
    2a78:	10 92 28 03 	sts	0x0328, r1
    2a7c:	10 92 27 03 	sts	0x0327, r1
	y = 0;
    2a80:	10 92 2a 03 	sts	0x032A, r1
    2a84:	10 92 29 03 	sts	0x0329, r1
	d.vsp = vsMaximum();
	setTopMask(0);
	setBottomMask(0);
	setTransform(false);
#endif
	zoom = 1;
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	80 93 24 03 	sts	0x0324, r24
	setOrient(TFT_DEF_ORIENT);
    2a8e:	0e 94 99 14 	call	0x2932	; 0x2932 <_ZN3tft9setOrientEh>
	tabSize = 4;
    2a92:	84 e0       	ldi	r24, 0x04	; 4
    2a94:	80 93 26 03 	sts	0x0326, r24
	//width = SIZE_W;
	//height = SIZE_H;
	foreground = DEF_FGC;
    2a98:	8f ef       	ldi	r24, 0xFF	; 255
    2a9a:	9f ef       	ldi	r25, 0xFF	; 255
    2a9c:	90 93 30 03 	sts	0x0330, r25
    2aa0:	80 93 2f 03 	sts	0x032F, r24
	background = DEF_BGC;
    2aa4:	10 92 32 03 	sts	0x0332, r1
    2aa8:	10 92 31 03 	sts	0x0331, r1
}
    2aac:	1f 91       	pop	r17
    2aae:	08 95       	ret

00002ab0 <_ZN3tft8drawCharEc>:
		clean();
#endif
	}
}

void tft::drawChar(char ch)
    2ab0:	bf 92       	push	r11
    2ab2:	cf 92       	push	r12
    2ab4:	df 92       	push	r13
    2ab6:	ef 92       	push	r14
    2ab8:	ff 92       	push	r15
    2aba:	0f 93       	push	r16
    2abc:	1f 93       	push	r17
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
    2ac2:	18 2f       	mov	r17, r24
	using namespace tfthw;
#ifdef TFT_CHECKING
	if ((int16_t)x() >= (int16_t)width() || (int16_t)y() >= (int16_t)height())
		return;
#endif
	if ((int16_t)(x + FONT_WIDTH * zoom) < 0)
    2ac4:	20 91 27 03 	lds	r18, 0x0327
    2ac8:	30 91 28 03 	lds	r19, 0x0328
    2acc:	e0 91 f7 02 	lds	r30, 0x02F7
    2ad0:	f0 91 f8 02 	lds	r31, 0x02F8
    2ad4:	50 81       	ld	r21, Z
    2ad6:	40 91 24 03 	lds	r20, 0x0324
    2ada:	45 9f       	mul	r20, r21
    2adc:	c0 01       	movw	r24, r0
    2ade:	11 24       	eor	r1, r1
    2ae0:	82 0f       	add	r24, r18
    2ae2:	93 1f       	adc	r25, r19
    2ae4:	97 fd       	sbrc	r25, 7
    2ae6:	5c c0       	rjmp	.+184    	; 0x2ba0 <_ZN3tft8drawCharEc+0xf0>
		return;
	uint8_t h = FONT_HEIGHT * zoom, w = FONT_WIDTH * zoom;
    2ae8:	81 81       	ldd	r24, Z+1	; 0x01
    2aea:	48 9f       	mul	r20, r24
    2aec:	b0 2c       	mov	r11, r0
    2aee:	11 24       	eor	r1, r1
    2af0:	45 9f       	mul	r20, r21
    2af2:	e0 2c       	mov	r14, r0
    2af4:	11 24       	eor	r1, r1
	bool yTransform = transform() && portrait() && yy < bottomEdge() && yy + yStop - yStart > bottomEdge();
	uint8_t xEnd = xTransform ? bottomEdge() - xx : xStop;
draw:
	area(xx, yy, xEnd - xStart, h);
#else
	area(x, y, w, h);
    2af6:	60 91 29 03 	lds	r22, 0x0329
    2afa:	70 91 2a 03 	lds	r23, 0x032A
    2afe:	c9 01       	movw	r24, r18
    2b00:	4e 2d       	mov	r20, r14
    2b02:	50 e0       	ldi	r21, 0x00	; 0
    2b04:	2b 2d       	mov	r18, r11
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	0e 94 8a 12 	call	0x2514	; 0x2514 <_ZN5tfthwL4areaEjjjj>
	static inline void setBGLight(bool ctrl);
	static inline void setOrient(uint8_t o);
	static inline void setPage(const uint16_t start, const uint16_t end);
	static inline void setColumn(const uint16_t start, const uint16_t end);
	// 0x2c Write, 0x2e Read, 0x3c / 0x3e Continue, 0x00 NOP
	static inline void memWrite() {cmd(0x2c);}
    2b0c:	8c e2       	ldi	r24, 0x2C	; 44
    2b0e:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
    2b12:	ff 24       	eor	r15, r15
		unsigned char c;
#ifdef TFT_VERTICAL_SCROLLING
		c = pgm_read_byte(font->ptr + ((uint8_t)ch - font->offset) * font->size + yi / zoom) << (xStart / zoom);
		for (uint8_t xi = xStart; xi < xEnd; xi++) {
#else
		c = pgm_read_byte(font->ptr + ((uint8_t)ch - font->offset) * font->size + yi / zoom);
    2b14:	c1 2e       	mov	r12, r17
    2b16:	dd 24       	eor	r13, r13
    2b18:	40 c0       	rjmp	.+128    	; 0x2b9a <_ZN3tft8drawCharEc+0xea>
    2b1a:	e0 91 f7 02 	lds	r30, 0x02F7
    2b1e:	f0 91 f8 02 	lds	r31, 0x02F8
    2b22:	60 91 24 03 	lds	r22, 0x0324
    2b26:	8f 2d       	mov	r24, r15
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	70 e0       	ldi	r23, 0x00	; 0
    2b2c:	0e 94 87 18 	call	0x310e	; 0x310e <__udivmodhi4>
    2b30:	83 81       	ldd	r24, Z+3	; 0x03
    2b32:	96 01       	movw	r18, r12
    2b34:	28 1b       	sub	r18, r24
    2b36:	31 09       	sbc	r19, r1
    2b38:	82 81       	ldd	r24, Z+2	; 0x02
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	ac 01       	movw	r20, r24
    2b3e:	24 9f       	mul	r18, r20
    2b40:	c0 01       	movw	r24, r0
    2b42:	25 9f       	mul	r18, r21
    2b44:	90 0d       	add	r25, r0
    2b46:	34 9f       	mul	r19, r20
    2b48:	90 0d       	add	r25, r0
    2b4a:	11 24       	eor	r1, r1
    2b4c:	86 0f       	add	r24, r22
    2b4e:	97 1f       	adc	r25, r23
    2b50:	04 80       	ldd	r0, Z+4	; 0x04
    2b52:	f5 81       	ldd	r31, Z+5	; 0x05
    2b54:	e0 2d       	mov	r30, r0
    2b56:	e8 0f       	add	r30, r24
    2b58:	f9 1f       	adc	r31, r25
    2b5a:	04 91       	lpm	r16, Z+
    2b5c:	10 e0       	ldi	r17, 0x00	; 0
    2b5e:	c1 e0       	ldi	r28, 0x01	; 1
    2b60:	d0 e0       	ldi	r29, 0x00	; 0
    2b62:	18 c0       	rjmp	.+48     	; 0x2b94 <_ZN3tft8drawCharEc+0xe4>
		for (uint8_t xi = 0; xi < w; xi++) {
#endif
			if (c & 0x80)
    2b64:	07 ff       	sbrs	r16, 7
    2b66:	05 c0       	rjmp	.+10     	; 0x2b72 <_ZN3tft8drawCharEc+0xc2>
				write16(foreground);
    2b68:	80 91 2f 03 	lds	r24, 0x032F
    2b6c:	90 91 30 03 	lds	r25, 0x0330
    2b70:	04 c0       	rjmp	.+8      	; 0x2b7a <_ZN3tft8drawCharEc+0xca>
			else
				write16(background);
    2b72:	80 91 31 03 	lds	r24, 0x0331
    2b76:	90 91 32 03 	lds	r25, 0x0332
    2b7a:	0e 94 56 12 	call	0x24ac	; 0x24ac <_ZN5tfthwL7write16Ej>
			if ((xi + 1) % zoom == 0)
    2b7e:	60 91 24 03 	lds	r22, 0x0324
    2b82:	ce 01       	movw	r24, r28
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	0e 94 9b 18 	call	0x3136	; 0x3136 <__divmodhi4>
    2b8a:	89 2b       	or	r24, r25
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <_ZN3tft8drawCharEc+0xe0>
				c <<= 1;
    2b8e:	00 0f       	add	r16, r16
#ifdef TFT_VERTICAL_SCROLLING
		c = pgm_read_byte(font->ptr + ((uint8_t)ch - font->offset) * font->size + yi / zoom) << (xStart / zoom);
		for (uint8_t xi = xStart; xi < xEnd; xi++) {
#else
		c = pgm_read_byte(font->ptr + ((uint8_t)ch - font->offset) * font->size + yi / zoom);
		for (uint8_t xi = 0; xi < w; xi++) {
    2b90:	1f 5f       	subi	r17, 0xFF	; 255
    2b92:	21 96       	adiw	r28, 0x01	; 1
    2b94:	1e 15       	cp	r17, r14
    2b96:	30 f3       	brcs	.-52     	; 0x2b64 <_ZN3tft8drawCharEc+0xb4>
			area(x, topEdge(), w, h);
			memWrite();
			yTransform = false;
		}
#else
	for (uint8_t yi = 0; yi < h; yi++) {
    2b98:	f3 94       	inc	r15
    2b9a:	fb 14       	cp	r15, r11
    2b9c:	08 f4       	brcc	.+2      	; 0x2ba0 <_ZN3tft8drawCharEc+0xf0>
    2b9e:	bd cf       	rjmp	.-134    	; 0x2b1a <_ZN3tft8drawCharEc+0x6a>
		xTransform = false;
		goto draw;
	}
#endif
#endif
}
    2ba0:	df 91       	pop	r29
    2ba2:	cf 91       	pop	r28
    2ba4:	1f 91       	pop	r17
    2ba6:	0f 91       	pop	r16
    2ba8:	ff 90       	pop	r15
    2baa:	ef 90       	pop	r14
    2bac:	df 90       	pop	r13
    2bae:	cf 90       	pop	r12
    2bb0:	bf 90       	pop	r11
    2bb2:	08 95       	ret

00002bb4 <_ZN3tft10drawImage2EPKhjjjjb>:

void tft::drawImage2(const uint8_t *ptr, uint16_t x, uint16_t y, uint16_t w, uint16_t h, bool progMem)
    2bb4:	9f 92       	push	r9
    2bb6:	af 92       	push	r10
    2bb8:	bf 92       	push	r11
    2bba:	cf 92       	push	r12
    2bbc:	df 92       	push	r13
    2bbe:	ef 92       	push	r14
    2bc0:	ff 92       	push	r15
    2bc2:	0f 93       	push	r16
    2bc4:	1f 93       	push	r17
    2bc6:	cf 93       	push	r28
    2bc8:	df 93       	push	r29
    2bca:	ec 01       	movw	r28, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	59 01       	movw	r10, r18
    2bd0:	68 01       	movw	r12, r16
    2bd2:	9e 2c       	mov	r9, r14
#endif

#ifdef TFT_VERTICAL_SCROLLING
disp:
#endif
	area(x, y, w, h);
    2bd4:	ba 01       	movw	r22, r20
    2bd6:	a9 01       	movw	r20, r18
    2bd8:	98 01       	movw	r18, r16
    2bda:	0e 94 8a 12 	call	0x2514	; 0x2514 <_ZN5tfthwL4areaEjjjj>
    2bde:	8c e2       	ldi	r24, 0x2C	; 44
    2be0:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	10 e0       	ldi	r17, 0x00	; 0
    2be8:	ee 24       	eor	r14, r14
    2bea:	28 c0       	rjmp	.+80     	; 0x2c3c <_ZN3tft10drawImage2EPKhjjjjb+0x88>
			if (i)
				c <<= i;
		}
#endif
		for (uint8_t xx = 0; xx < w; xx++) {
			if (i++ == 0)
    2bec:	02 2f       	mov	r16, r18
    2bee:	0f 5f       	subi	r16, 0xFF	; 255
    2bf0:	22 23       	and	r18, r18
    2bf2:	51 f4       	brne	.+20     	; 0x2c08 <_ZN3tft10drawImage2EPKhjjjjb+0x54>
    2bf4:	ce 01       	movw	r24, r28
    2bf6:	01 96       	adiw	r24, 0x01	; 1
				c = progMem ? pgm_read_byte(ptr++) : *ptr++;
    2bf8:	99 20       	and	r9, r9
    2bfa:	21 f0       	breq	.+8      	; 0x2c04 <_ZN3tft10drawImage2EPKhjjjjb+0x50>
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	ec 01       	movw	r28, r24
    2c00:	14 91       	lpm	r17, Z+
    2c02:	02 c0       	rjmp	.+4      	; 0x2c08 <_ZN3tft10drawImage2EPKhjjjjb+0x54>
    2c04:	18 81       	ld	r17, Y
    2c06:	ec 01       	movw	r28, r24
			if (c & 0x80)
    2c08:	17 ff       	sbrs	r17, 7
    2c0a:	05 c0       	rjmp	.+10     	; 0x2c16 <_ZN3tft10drawImage2EPKhjjjjb+0x62>
				write16(foreground);
    2c0c:	80 91 2f 03 	lds	r24, 0x032F
    2c10:	90 91 30 03 	lds	r25, 0x0330
    2c14:	04 c0       	rjmp	.+8      	; 0x2c1e <_ZN3tft10drawImage2EPKhjjjjb+0x6a>
			else
				write16(background);
    2c16:	80 91 31 03 	lds	r24, 0x0331
    2c1a:	90 91 32 03 	lds	r25, 0x0332
    2c1e:	0e 94 56 12 	call	0x24ac	; 0x24ac <_ZN5tfthwL7write16Ej>
			if (i == 8)
    2c22:	08 30       	cpi	r16, 0x08	; 8
    2c24:	11 f4       	brne	.+4      	; 0x2c2a <_ZN3tft10drawImage2EPKhjjjjb+0x76>
    2c26:	00 e0       	ldi	r16, 0x00	; 0
    2c28:	01 c0       	rjmp	.+2      	; 0x2c2c <_ZN3tft10drawImage2EPKhjjjjb+0x78>
				i = 0;
			else
				c <<= 1;
    2c2a:	11 0f       	add	r17, r17
			i %= 8;
			if (i)
				c <<= i;
		}
#endif
		for (uint8_t xx = 0; xx < w; xx++) {
    2c2c:	f3 94       	inc	r15
    2c2e:	20 2f       	mov	r18, r16
    2c30:	8f 2d       	mov	r24, r15
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	8a 15       	cp	r24, r10
    2c36:	9b 05       	cpc	r25, r11
    2c38:	c8 f2       	brcs	.-78     	; 0x2bec <_ZN3tft10drawImage2EPKhjjjjb+0x38>
	memWrite();
#ifdef TFT_VERTICAL_SCROLLING
	//bool xTransform = transform() && !portrait() && x < bottomEdge() && x + w - xs - xe > bottomEdge();
	bool yTransform = transform() && portrait() && y < bottomEdge() && y + h > bottomEdge();
#endif
	for (uint8_t yy = 0; yy < h; yy++) {
    2c3a:	e3 94       	inc	r14
    2c3c:	8e 2d       	mov	r24, r14
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	8c 15       	cp	r24, r12
    2c42:	9d 05       	cpc	r25, r13
    2c44:	10 f4       	brcc	.+4      	; 0x2c4a <_ZN3tft10drawImage2EPKhjjjjb+0x96>
    2c46:	ff 24       	eor	r15, r15
    2c48:	f3 cf       	rjmp	.-26     	; 0x2c30 <_ZN3tft10drawImage2EPKhjjjjb+0x7c>
				i = 0;
			else
				c <<= 1;
		}
	}
}
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	1f 91       	pop	r17
    2c50:	0f 91       	pop	r16
    2c52:	ff 90       	pop	r15
    2c54:	ef 90       	pop	r14
    2c56:	df 90       	pop	r13
    2c58:	cf 90       	pop	r12
    2c5a:	bf 90       	pop	r11
    2c5c:	af 90       	pop	r10
    2c5e:	9f 90       	pop	r9
    2c60:	08 95       	ret

00002c62 <_ZN3tft17drawImage2AlignedEPKhjjjjb>:

void tft::drawImage2Aligned(const uint8_t *ptr, uint16_t x, uint16_t y, uint16_t w, uint16_t h, bool progMem)
    2c62:	9f 92       	push	r9
    2c64:	af 92       	push	r10
    2c66:	bf 92       	push	r11
    2c68:	cf 92       	push	r12
    2c6a:	df 92       	push	r13
    2c6c:	ef 92       	push	r14
    2c6e:	ff 92       	push	r15
    2c70:	0f 93       	push	r16
    2c72:	1f 93       	push	r17
    2c74:	cf 93       	push	r28
    2c76:	df 93       	push	r29
    2c78:	ec 01       	movw	r28, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	59 01       	movw	r10, r18
    2c7e:	68 01       	movw	r12, r16
    2c80:	9e 2c       	mov	r9, r14
	using namespace tfthw;
	uint8_t i, c = 0;
	// TODO: zooming support
	// TODO: vertical scrolling support

	area(x, y, w, h);
    2c82:	ba 01       	movw	r22, r20
    2c84:	a9 01       	movw	r20, r18
    2c86:	98 01       	movw	r18, r16
    2c88:	0e 94 8a 12 	call	0x2514	; 0x2514 <_ZN5tfthwL4areaEjjjj>
    2c8c:	8c e2       	ldi	r24, 0x2C	; 44
    2c8e:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
    2c92:	10 e0       	ldi	r17, 0x00	; 0
    2c94:	ee 24       	eor	r14, r14
    2c96:	28 c0       	rjmp	.+80     	; 0x2ce8 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x86>
	memWrite();
	for (uint8_t yy = 0; yy < h; yy++) {
		i = 0;
		for (uint8_t xx = 0; xx < w; xx++) {
			if (i++ == 0)
    2c98:	02 2f       	mov	r16, r18
    2c9a:	0f 5f       	subi	r16, 0xFF	; 255
    2c9c:	22 23       	and	r18, r18
    2c9e:	51 f4       	brne	.+20     	; 0x2cb4 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x52>
    2ca0:	ce 01       	movw	r24, r28
    2ca2:	01 96       	adiw	r24, 0x01	; 1
				c = progMem ? pgm_read_byte(ptr++) : *ptr++;
    2ca4:	99 20       	and	r9, r9
    2ca6:	21 f0       	breq	.+8      	; 0x2cb0 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x4e>
    2ca8:	fe 01       	movw	r30, r28
    2caa:	ec 01       	movw	r28, r24
    2cac:	14 91       	lpm	r17, Z+
    2cae:	02 c0       	rjmp	.+4      	; 0x2cb4 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x52>
    2cb0:	18 81       	ld	r17, Y
    2cb2:	ec 01       	movw	r28, r24
			if (c & 0x80)
    2cb4:	17 ff       	sbrs	r17, 7
    2cb6:	05 c0       	rjmp	.+10     	; 0x2cc2 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x60>
				write16(foreground);
    2cb8:	80 91 2f 03 	lds	r24, 0x032F
    2cbc:	90 91 30 03 	lds	r25, 0x0330
    2cc0:	04 c0       	rjmp	.+8      	; 0x2cca <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x68>
			else
				write16(background);
    2cc2:	80 91 31 03 	lds	r24, 0x0331
    2cc6:	90 91 32 03 	lds	r25, 0x0332
    2cca:	0e 94 56 12 	call	0x24ac	; 0x24ac <_ZN5tfthwL7write16Ej>
			if (i == 8)
    2cce:	08 30       	cpi	r16, 0x08	; 8
    2cd0:	11 f4       	brne	.+4      	; 0x2cd6 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x74>
    2cd2:	00 e0       	ldi	r16, 0x00	; 0
    2cd4:	01 c0       	rjmp	.+2      	; 0x2cd8 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x76>
				i = 0;
			else
				c <<= 1;
    2cd6:	11 0f       	add	r17, r17

	area(x, y, w, h);
	memWrite();
	for (uint8_t yy = 0; yy < h; yy++) {
		i = 0;
		for (uint8_t xx = 0; xx < w; xx++) {
    2cd8:	f3 94       	inc	r15
    2cda:	20 2f       	mov	r18, r16
    2cdc:	8f 2d       	mov	r24, r15
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	8a 15       	cp	r24, r10
    2ce2:	9b 05       	cpc	r25, r11
    2ce4:	c8 f2       	brcs	.-78     	; 0x2c98 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x36>
	// TODO: zooming support
	// TODO: vertical scrolling support

	area(x, y, w, h);
	memWrite();
	for (uint8_t yy = 0; yy < h; yy++) {
    2ce6:	e3 94       	inc	r14
    2ce8:	8e 2d       	mov	r24, r14
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	8c 15       	cp	r24, r12
    2cee:	9d 05       	cpc	r25, r13
    2cf0:	18 f4       	brcc	.+6      	; 0x2cf8 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x96>
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	ff 24       	eor	r15, r15
    2cf6:	f2 cf       	rjmp	.-28     	; 0x2cdc <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x7a>
				i = 0;
			else
				c <<= 1;
		}
	}
}
    2cf8:	df 91       	pop	r29
    2cfa:	cf 91       	pop	r28
    2cfc:	1f 91       	pop	r17
    2cfe:	0f 91       	pop	r16
    2d00:	ff 90       	pop	r15
    2d02:	ef 90       	pop	r14
    2d04:	df 90       	pop	r13
    2d06:	cf 90       	pop	r12
    2d08:	bf 90       	pop	r11
    2d0a:	af 90       	pop	r10
    2d0c:	9f 90       	pop	r9
    2d0e:	08 95       	ret

00002d10 <_ZN3tft4fillEj>:
	if (out == NULL)
		out = fdevopen(tftputchar, NULL);
	return out;
}

void tft::fill(uint16_t clr)
    2d10:	0f 93       	push	r16
    2d12:	1f 93       	push	r17
    2d14:	cf 93       	push	r28
    2d16:	df 93       	push	r29
    2d18:	8c 01       	movw	r16, r24
{
	using namespace tfthw;
	uint8_t ch = clr / 0x0100, cl = clr % 0x0100;
	uint16_t x = width, y;
    2d1a:	c0 91 2b 03 	lds	r28, 0x032B
    2d1e:	d0 91 2c 03 	lds	r29, 0x032C
}

namespace tfthw
{
	static inline void area(uint16_t x, uint16_t y, uint16_t w, uint16_t h);
	static inline void all() {area(0, 0, tft::width, tft::height);}
    2d22:	20 91 2d 03 	lds	r18, 0x032D
    2d26:	30 91 2e 03 	lds	r19, 0x032E
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	60 e0       	ldi	r22, 0x00	; 0
    2d30:	70 e0       	ldi	r23, 0x00	; 0
    2d32:	ae 01       	movw	r20, r28
    2d34:	0e 94 8a 12 	call	0x2514	; 0x2514 <_ZN5tfthwL4areaEjjjj>
    2d38:	8c e2       	ldi	r24, 0x2C	; 44
    2d3a:	0e 94 5d 12 	call	0x24ba	; 0x24ba <_ZN5tfthwL3cmdEh>
	all();
	memWrite();
	while (x--) {
		y = height;
    2d3e:	50 91 2d 03 	lds	r21, 0x032D
    2d42:	40 91 2e 03 	lds	r20, 0x032E
    2d46:	0c c0       	rjmp	.+24     	; 0x2d60 <_ZN3tft4fillEj+0x50>
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    2d48:	18 b9       	out	0x08, r17	; 8
	TFT_WCTRL &= ~TFT_WR;
    2d4a:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2d4c:	13 9a       	sbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    2d4e:	08 b9       	out	0x08, r16	; 8
	TFT_WCTRL &= ~TFT_WR;
    2d50:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    2d52:	13 9a       	sbi	0x02, 3	; 2
    2d54:	21 50       	subi	r18, 0x01	; 1
    2d56:	30 40       	sbci	r19, 0x00	; 0
		while (y--) {
    2d58:	21 15       	cp	r18, r1
    2d5a:	31 05       	cpc	r19, r1
    2d5c:	a9 f7       	brne	.-22     	; 0x2d48 <_ZN3tft4fillEj+0x38>
    2d5e:	21 97       	sbiw	r28, 0x01	; 1
	using namespace tfthw;
	uint8_t ch = clr / 0x0100, cl = clr % 0x0100;
	uint16_t x = width, y;
	all();
	memWrite();
	while (x--) {
    2d60:	20 97       	sbiw	r28, 0x00	; 0
    2d62:	21 f0       	breq	.+8      	; 0x2d6c <_ZN3tft4fillEj+0x5c>
    2d64:	85 2f       	mov	r24, r21
    2d66:	94 2f       	mov	r25, r20
    2d68:	9c 01       	movw	r18, r24
    2d6a:	f6 cf       	rjmp	.-20     	; 0x2d58 <_ZN3tft4fillEj+0x48>
		while (y--) {
			data(ch);
			data(cl);
		}
	}
}
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	1f 91       	pop	r17
    2d72:	0f 91       	pop	r16
    2d74:	08 95       	ret

00002d76 <_ZN3tft7newlineEv>:
#endif

void tft::newline()
{
	using namespace tfthw;
	x = 0;
    2d76:	10 92 28 03 	sts	0x0328, r1
    2d7a:	10 92 27 03 	sts	0x0327, r1
	y += FONT_HEIGHT * zoom;
    2d7e:	e0 91 f7 02 	lds	r30, 0x02F7
    2d82:	f0 91 f8 02 	lds	r31, 0x02F8
    2d86:	20 91 24 03 	lds	r18, 0x0324
    2d8a:	81 81       	ldd	r24, Z+1	; 0x01
    2d8c:	28 9f       	mul	r18, r24
    2d8e:	90 01       	movw	r18, r0
    2d90:	11 24       	eor	r1, r1
    2d92:	80 91 29 03 	lds	r24, 0x0329
    2d96:	90 91 2a 03 	lds	r25, 0x032A
    2d9a:	82 0f       	add	r24, r18
    2d9c:	93 1f       	adc	r25, r19
    2d9e:	90 93 2a 03 	sts	0x032A, r25
    2da2:	80 93 29 03 	sts	0x0329, r24
	if (y + FONT_HEIGHT * zoom > height) {
    2da6:	82 0f       	add	r24, r18
    2da8:	93 1f       	adc	r25, r19
    2daa:	20 91 2d 03 	lds	r18, 0x032D
    2dae:	30 91 2e 03 	lds	r19, 0x032E
    2db2:	28 17       	cp	r18, r24
    2db4:	39 07       	cpc	r19, r25
    2db6:	70 f4       	brcc	.+28     	; 0x2dd4 <_ZN3tft7newlineEv+0x5e>
#endif

	void line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t c);
	void frame(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t s, uint16_t c);
	void fill(uint16_t clr);
	static inline void clean() {fill(background); x = 0; y = 0;}
    2db8:	80 91 31 03 	lds	r24, 0x0331
    2dbc:	90 91 32 03 	lds	r25, 0x0332
    2dc0:	0e 94 88 16 	call	0x2d10	; 0x2d10 <_ZN3tft4fillEj>
    2dc4:	10 92 28 03 	sts	0x0328, r1
    2dc8:	10 92 27 03 	sts	0x0327, r1
    2dcc:	10 92 2a 03 	sts	0x032A, r1
    2dd0:	10 92 29 03 	sts	0x0329, r1
    2dd4:	08 95       	ret

00002dd6 <_ZN3tftL7putCharEc>:
	static inline void all() {area(0, 0, tft::width, tft::height);}
}

// Defined as inline to execute faster

static inline void tft::putChar(const char c)
    2dd6:	1f 93       	push	r17
    2dd8:	cf 93       	push	r28
    2dda:	df 93       	push	r29
    2ddc:	18 2f       	mov	r17, r24
{
	switch (c) {
    2dde:	89 30       	cpi	r24, 0x09	; 9
    2de0:	29 f0       	breq	.+10     	; 0x2dec <_ZN3tftL7putCharEc+0x16>
    2de2:	8a 30       	cpi	r24, 0x0A	; 10
    2de4:	d1 f5       	brne	.+116    	; 0x2e5a <_ZN3tftL7putCharEc+0x84>
	case '\n':
		newline();
    2de6:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <_ZN3tft7newlineEv>
    2dea:	69 c0       	rjmp	.+210    	; 0x2ebe <_ZN3tftL7putCharEc+0xe8>
#endif
}

inline void tft::tab()
{
	if (x % (FONT_WIDTH * zoom))
    2dec:	c0 91 27 03 	lds	r28, 0x0327
    2df0:	d0 91 28 03 	lds	r29, 0x0328
    2df4:	e0 91 f7 02 	lds	r30, 0x02F7
    2df8:	f0 91 f8 02 	lds	r31, 0x02F8
    2dfc:	90 91 24 03 	lds	r25, 0x0324
    2e00:	80 81       	ld	r24, Z
    2e02:	98 9f       	mul	r25, r24
    2e04:	f0 01       	movw	r30, r0
    2e06:	11 24       	eor	r1, r1
    2e08:	ce 01       	movw	r24, r28
    2e0a:	bf 01       	movw	r22, r30
    2e0c:	0e 94 87 18 	call	0x310e	; 0x310e <__udivmodhi4>
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	31 f0       	breq	.+12     	; 0x2e20 <_ZN3tftL7putCharEc+0x4a>
		x -= x % (FONT_WIDTH * zoom);
    2e14:	c8 1b       	sub	r28, r24
    2e16:	d9 0b       	sbc	r29, r25
    2e18:	d0 93 28 03 	sts	0x0328, r29
    2e1c:	c0 93 27 03 	sts	0x0327, r28
	do
    2e20:	40 91 26 03 	lds	r20, 0x0326
    2e24:	20 91 27 03 	lds	r18, 0x0327
    2e28:	30 91 28 03 	lds	r19, 0x0328
    2e2c:	2e 0f       	add	r18, r30
    2e2e:	3f 1f       	adc	r19, r31
    2e30:	e9 01       	movw	r28, r18
    2e32:	ce 0f       	add	r28, r30
    2e34:	df 1f       	adc	r29, r31
    2e36:	c9 01       	movw	r24, r18
    2e38:	bf 01       	movw	r22, r30
    2e3a:	0e 94 87 18 	call	0x310e	; 0x310e <__udivmodhi4>
    2e3e:	cb 01       	movw	r24, r22
    2e40:	64 2f       	mov	r22, r20
    2e42:	70 e0       	ldi	r23, 0x00	; 0
    2e44:	0e 94 87 18 	call	0x310e	; 0x310e <__udivmodhi4>
    2e48:	89 2b       	or	r24, r25
    2e4a:	11 f0       	breq	.+4      	; 0x2e50 <_ZN3tftL7putCharEc+0x7a>
    2e4c:	9e 01       	movw	r18, r28
    2e4e:	f0 cf       	rjmp	.-32     	; 0x2e30 <_ZN3tftL7putCharEc+0x5a>
    2e50:	30 93 28 03 	sts	0x0328, r19
    2e54:	20 93 27 03 	sts	0x0327, r18
    2e58:	32 c0       	rjmp	.+100    	; 0x2ebe <_ZN3tftL7putCharEc+0xe8>
		break;
	case '\t':
		tab();
		break;
	default:
		if ((unsigned)c < ' ')
    2e5a:	80 32       	cpi	r24, 0x20	; 32
    2e5c:	80 f1       	brcs	.+96     	; 0x2ebe <_ZN3tftL7putCharEc+0xe8>
			break;
		if (x + FONT_WIDTH * zoom > width)
    2e5e:	e0 91 f7 02 	lds	r30, 0x02F7
    2e62:	f0 91 f8 02 	lds	r31, 0x02F8
    2e66:	80 91 24 03 	lds	r24, 0x0324
    2e6a:	20 81       	ld	r18, Z
    2e6c:	82 9f       	mul	r24, r18
    2e6e:	c0 01       	movw	r24, r0
    2e70:	11 24       	eor	r1, r1
    2e72:	20 91 27 03 	lds	r18, 0x0327
    2e76:	30 91 28 03 	lds	r19, 0x0328
    2e7a:	82 0f       	add	r24, r18
    2e7c:	93 1f       	adc	r25, r19
    2e7e:	20 91 2b 03 	lds	r18, 0x032B
    2e82:	30 91 2c 03 	lds	r19, 0x032C
    2e86:	28 17       	cp	r18, r24
    2e88:	39 07       	cpc	r19, r25
    2e8a:	10 f4       	brcc	.+4      	; 0x2e90 <_ZN3tftL7putCharEc+0xba>
			newline();
    2e8c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <_ZN3tft7newlineEv>
		drawChar(c);
    2e90:	81 2f       	mov	r24, r17
    2e92:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <_ZN3tft8drawCharEc>
	if (transform() && !portrait()) {
		uint16_t xt = vsTransformBack(x);
		x = vsTransform(xt + FONT_WIDTH * zoom);
	} else {
#endif
		x += FONT_WIDTH * zoom;
    2e96:	e0 91 f7 02 	lds	r30, 0x02F7
    2e9a:	f0 91 f8 02 	lds	r31, 0x02F8
    2e9e:	20 91 24 03 	lds	r18, 0x0324
    2ea2:	80 81       	ld	r24, Z
    2ea4:	28 9f       	mul	r18, r24
    2ea6:	90 01       	movw	r18, r0
    2ea8:	11 24       	eor	r1, r1
    2eaa:	80 91 27 03 	lds	r24, 0x0327
    2eae:	90 91 28 03 	lds	r25, 0x0328
    2eb2:	82 0f       	add	r24, r18
    2eb4:	93 1f       	adc	r25, r19
    2eb6:	90 93 28 03 	sts	0x0328, r25
    2eba:	80 93 27 03 	sts	0x0327, r24
		if (x + FONT_WIDTH * zoom > width)
			newline();
		drawChar(c);
		next();
	}
}
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	1f 91       	pop	r17
    2ec4:	08 95       	ret

00002ec6 <_ZL10tftputcharcP6__file>:
	}
}

static int tftputchar(const char c, FILE *stream)
{
	tft::putChar(c);
    2ec6:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <_ZN3tftL7putCharEc>
	return 0;
}
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	08 95       	ret

00002ed0 <_ZN3tft9putStringEPKcb>:
	//height = SIZE_H;
	foreground = DEF_FGC;
	background = DEF_BGC;
}

void tft::putString(const char *str, bool progMem)
    2ed0:	1f 93       	push	r17
    2ed2:	cf 93       	push	r28
    2ed4:	df 93       	push	r29
    2ed6:	16 2f       	mov	r17, r22
    2ed8:	ec 01       	movw	r28, r24
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <_ZN3tft9putStringEPKcb+0x10>
	}
#endif

	char c;
	while ((c = progMem ? pgm_read_byte(str++) : *str++) != '\0') {
		putChar(c);
    2edc:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <_ZN3tftL7putCharEc>
		clip = xt < bottomEdge();
	}
#endif

	char c;
	while ((c = progMem ? pgm_read_byte(str++) : *str++) != '\0') {
    2ee0:	11 23       	and	r17, r17
    2ee2:	19 f0       	breq	.+6      	; 0x2eea <_ZN3tft9putStringEPKcb+0x1a>
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	84 91       	lpm	r24, Z+
    2ee8:	01 c0       	rjmp	.+2      	; 0x2eec <_ZN3tft9putStringEPKcb+0x1c>
    2eea:	88 81       	ld	r24, Y
    2eec:	21 96       	adiw	r28, 0x01	; 1
    2eee:	88 23       	and	r24, r24
    2ef0:	a9 f7       	brne	.-22     	; 0x2edc <_ZN3tft9putStringEPKcb+0xc>
			if (xt >= bottomEdge())
				break;
		}
#endif
	}
}
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	1f 91       	pop	r17
    2ef8:	08 95       	ret

00002efa <_ZN3tft6devoutEv>:
}

FILE *tft::devout()
{
	static FILE *out = NULL;
	if (out == NULL)
    2efa:	80 91 33 03 	lds	r24, 0x0333
    2efe:	90 91 34 03 	lds	r25, 0x0334
    2f02:	89 2b       	or	r24, r25
    2f04:	51 f4       	brne	.+20     	; 0x2f1a <_ZN3tft6devoutEv+0x20>
		out = fdevopen(tftputchar, NULL);
    2f06:	83 e6       	ldi	r24, 0x63	; 99
    2f08:	97 e1       	ldi	r25, 0x17	; 23
    2f0a:	60 e0       	ldi	r22, 0x00	; 0
    2f0c:	70 e0       	ldi	r23, 0x00	; 0
    2f0e:	0e 94 05 1a 	call	0x340a	; 0x340a <fdevopen>
    2f12:	90 93 34 03 	sts	0x0334, r25
    2f16:	80 93 33 03 	sts	0x0333, r24
	return out;
}
    2f1a:	80 91 33 03 	lds	r24, 0x0333
    2f1e:	90 91 34 03 	lds	r25, 0x0334
    2f22:	08 95       	ret

00002f24 <colour_hsv_to_rgb>:
#include <stdint.h>
#include "colours.h"

uint32_t colour_hsv_to_rgb(uint32_t hsv)
{
    2f24:	9f 92       	push	r9
    2f26:	af 92       	push	r10
    2f28:	bf 92       	push	r11
    2f2a:	cf 92       	push	r12
    2f2c:	df 92       	push	r13
    2f2e:	ef 92       	push	r14
    2f30:	ff 92       	push	r15
    2f32:	0f 93       	push	r16
    2f34:	1f 93       	push	r17
    2f36:	cf 93       	push	r28
    2f38:	df 93       	push	r29
    2f3a:	5b 01       	movw	r10, r22
    2f3c:	6c 01       	movw	r12, r24
	uint8_t h = H_888(hsv);
	uint8_t s = S_888(hsv);
    2f3e:	bb 27       	eor	r27, r27
    2f40:	a9 2f       	mov	r26, r25
    2f42:	98 2f       	mov	r25, r24
    2f44:	87 2f       	mov	r24, r23
    2f46:	48 2f       	mov	r20, r24
	uint8_t v = V_888(hsv);
    2f48:	9a 2c       	mov	r9, r10

	// http://web.mit.edu/storborg/Public/hsvtorgb.c

	if (s == 0)
    2f4a:	88 23       	and	r24, r24
    2f4c:	81 f4       	brne	.+32     	; 0x2f6e <colour_hsv_to_rgb+0x4a>
		return COLOUR_888(v, v, v);	// Colour is grayscale
    2f4e:	8a 2d       	mov	r24, r10
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	a0 e0       	ldi	r26, 0x00	; 0
    2f54:	b0 e0       	ldi	r27, 0x00	; 0
    2f56:	8c 01       	movw	r16, r24
    2f58:	ff 24       	eor	r15, r15
    2f5a:	ee 24       	eor	r14, r14
    2f5c:	22 27       	eor	r18, r18
    2f5e:	38 2f       	mov	r19, r24
    2f60:	49 2f       	mov	r20, r25
    2f62:	5a 2f       	mov	r21, r26
    2f64:	e2 2a       	or	r14, r18
    2f66:	f3 2a       	or	r15, r19
    2f68:	04 2b       	or	r16, r20
    2f6a:	15 2b       	or	r17, r21
    2f6c:	93 c0       	rjmp	.+294    	; 0x3094 <colour_hsv_to_rgb+0x170>
#include <stdint.h>
#include "colours.h"

uint32_t colour_hsv_to_rgb(uint32_t hsv)
{
	uint8_t h = H_888(hsv);
    2f6e:	76 01       	movw	r14, r12
    2f70:	00 27       	eor	r16, r16
    2f72:	11 27       	eor	r17, r17
	// http://web.mit.edu/storborg/Public/hsvtorgb.c

	if (s == 0)
		return COLOUR_888(v, v, v);	// Colour is grayscale

	uint8_t region = h / 43;
    2f74:	8e 2d       	mov	r24, r14
    2f76:	6b e2       	ldi	r22, 0x2B	; 43
    2f78:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__udivmodqi4>
    2f7c:	18 2f       	mov	r17, r24
	uint8_t fpart = (h - (region * 43)) * 6;
    2f7e:	28 2f       	mov	r18, r24
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	85 ed       	ldi	r24, 0xD5	; 213
    2f84:	9f ef       	ldi	r25, 0xFF	; 255
    2f86:	bc 01       	movw	r22, r24
    2f88:	26 9f       	mul	r18, r22
    2f8a:	c0 01       	movw	r24, r0
    2f8c:	27 9f       	mul	r18, r23
    2f8e:	90 0d       	add	r25, r0
    2f90:	36 9f       	mul	r19, r22
    2f92:	90 0d       	add	r25, r0
    2f94:	11 24       	eor	r1, r1
    2f96:	8e 0d       	add	r24, r14
    2f98:	91 1d       	adc	r25, r1
    2f9a:	9c 01       	movw	r18, r24
    2f9c:	22 0f       	add	r18, r18
    2f9e:	33 1f       	adc	r19, r19
    2fa0:	28 0f       	add	r18, r24
    2fa2:	39 1f       	adc	r19, r25
    2fa4:	22 0f       	add	r18, r18
	
	uint8_t p = ((uint16_t)v * (255 - s)) >> 8;
    2fa6:	ea 2d       	mov	r30, r10
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	64 2f       	mov	r22, r20
    2fac:	70 e0       	ldi	r23, 0x00	; 0
    2fae:	4f ef       	ldi	r20, 0xFF	; 255
    2fb0:	50 e0       	ldi	r21, 0x00	; 0
    2fb2:	ca 01       	movw	r24, r20
    2fb4:	86 1b       	sub	r24, r22
    2fb6:	97 0b       	sbc	r25, r23
    2fb8:	8e 9f       	mul	r24, r30
    2fba:	e0 01       	movw	r28, r0
    2fbc:	8f 9f       	mul	r24, r31
    2fbe:	d0 0d       	add	r29, r0
    2fc0:	9e 9f       	mul	r25, r30
    2fc2:	d0 0d       	add	r29, r0
    2fc4:	11 24       	eor	r1, r1
    2fc6:	0d 2f       	mov	r16, r29
	uint8_t q = ((uint16_t)v * (255 - (((uint16_t)s * fpart) >> 8))) >> 8;
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	26 9f       	mul	r18, r22
    2fcc:	c0 01       	movw	r24, r0
    2fce:	27 9f       	mul	r18, r23
    2fd0:	90 0d       	add	r25, r0
    2fd2:	36 9f       	mul	r19, r22
    2fd4:	90 0d       	add	r25, r0
    2fd6:	11 24       	eor	r1, r1
    2fd8:	89 2f       	mov	r24, r25
    2fda:	99 27       	eor	r25, r25
    2fdc:	da 01       	movw	r26, r20
    2fde:	a8 1b       	sub	r26, r24
    2fe0:	b9 0b       	sbc	r27, r25
    2fe2:	cd 01       	movw	r24, r26
    2fe4:	8e 9f       	mul	r24, r30
    2fe6:	d0 01       	movw	r26, r0
    2fe8:	8f 9f       	mul	r24, r31
    2fea:	b0 0d       	add	r27, r0
    2fec:	9e 9f       	mul	r25, r30
    2fee:	b0 0d       	add	r27, r0
    2ff0:	11 24       	eor	r1, r1
    2ff2:	eb 2e       	mov	r14, r27
	uint8_t t = ((uint16_t)v * (255 - (((uint16_t)s * (255 - fpart)) >> 8))) >> 8;
    2ff4:	ca 01       	movw	r24, r20
    2ff6:	82 1b       	sub	r24, r18
    2ff8:	93 0b       	sbc	r25, r19
    2ffa:	9c 01       	movw	r18, r24
    2ffc:	26 9f       	mul	r18, r22
    2ffe:	c0 01       	movw	r24, r0
    3000:	27 9f       	mul	r18, r23
    3002:	90 0d       	add	r25, r0
    3004:	36 9f       	mul	r19, r22
    3006:	90 0d       	add	r25, r0
    3008:	11 24       	eor	r1, r1
    300a:	89 2f       	mov	r24, r25
    300c:	99 27       	eor	r25, r25
    300e:	48 1b       	sub	r20, r24
    3010:	59 0b       	sbc	r21, r25
    3012:	4e 9f       	mul	r20, r30
    3014:	c0 01       	movw	r24, r0
    3016:	4f 9f       	mul	r20, r31
    3018:	90 0d       	add	r25, r0
    301a:	5e 9f       	mul	r21, r30
    301c:	90 0d       	add	r25, r0
    301e:	11 24       	eor	r1, r1

	uint8_t r, g, b;
	switch (region) {
    3020:	12 30       	cpi	r17, 0x02	; 2
    3022:	99 f0       	breq	.+38     	; 0x304a <colour_hsv_to_rgb+0x126>
    3024:	13 30       	cpi	r17, 0x03	; 3
    3026:	28 f4       	brcc	.+10     	; 0x3032 <colour_hsv_to_rgb+0x10e>
    3028:	11 23       	and	r17, r17
    302a:	59 f0       	breq	.+22     	; 0x3042 <colour_hsv_to_rgb+0x11e>
    302c:	11 30       	cpi	r17, 0x01	; 1
    302e:	c1 f4       	brne	.+48     	; 0x3060 <colour_hsv_to_rgb+0x13c>
    3030:	05 c0       	rjmp	.+10     	; 0x303c <colour_hsv_to_rgb+0x118>
    3032:	13 30       	cpi	r17, 0x03	; 3
    3034:	71 f0       	breq	.+28     	; 0x3052 <colour_hsv_to_rgb+0x12e>
    3036:	14 30       	cpi	r17, 0x04	; 4
    3038:	99 f4       	brne	.+38     	; 0x3060 <colour_hsv_to_rgb+0x13c>
    303a:	0e c0       	rjmp	.+28     	; 0x3058 <colour_hsv_to_rgb+0x134>
    303c:	eb 2f       	mov	r30, r27
    303e:	2a 2d       	mov	r18, r10
    3040:	02 c0       	rjmp	.+4      	; 0x3046 <colour_hsv_to_rgb+0x122>
    3042:	ea 2d       	mov	r30, r10
    3044:	29 2f       	mov	r18, r25
    3046:	4d 2f       	mov	r20, r29
    3048:	0e c0       	rjmp	.+28     	; 0x3066 <colour_hsv_to_rgb+0x142>
    304a:	ed 2f       	mov	r30, r29
    304c:	2a 2d       	mov	r18, r10
    304e:	49 2f       	mov	r20, r25
    3050:	0a c0       	rjmp	.+20     	; 0x3066 <colour_hsv_to_rgb+0x142>
		case 0:
			r = v; g = t; b = p; break;
		case 1:
			r = q; g = v; b = p; break;
		case 2:
			r = p; g = v; b = t; break;
    3052:	ed 2f       	mov	r30, r29
    3054:	2b 2f       	mov	r18, r27
    3056:	02 c0       	rjmp	.+4      	; 0x305c <colour_hsv_to_rgb+0x138>
		case 3:
			r = p; g = q; b = v; break;
    3058:	e9 2f       	mov	r30, r25
    305a:	2d 2f       	mov	r18, r29
    305c:	4a 2d       	mov	r20, r10
    305e:	03 c0       	rjmp	.+6      	; 0x3066 <colour_hsv_to_rgb+0x142>
		case 4:
			r = t; g = p; b = v; break;
    3060:	e9 2d       	mov	r30, r9
    3062:	20 2f       	mov	r18, r16
    3064:	4e 2d       	mov	r20, r14
		default:
			r = v; g = p; b = q; break;
	}

	return COLOUR_888(r, g, b);
    3066:	8e 2f       	mov	r24, r30
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	a0 e0       	ldi	r26, 0x00	; 0
    306c:	b0 e0       	ldi	r27, 0x00	; 0
    306e:	8c 01       	movw	r16, r24
    3070:	ff 24       	eor	r15, r15
    3072:	ee 24       	eor	r14, r14
    3074:	82 2f       	mov	r24, r18
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	a0 e0       	ldi	r26, 0x00	; 0
    307a:	b0 e0       	ldi	r27, 0x00	; 0
    307c:	ba 2f       	mov	r27, r26
    307e:	a9 2f       	mov	r26, r25
    3080:	98 2f       	mov	r25, r24
    3082:	88 27       	eor	r24, r24
    3084:	e8 2a       	or	r14, r24
    3086:	f9 2a       	or	r15, r25
    3088:	0a 2b       	or	r16, r26
    308a:	1b 2b       	or	r17, r27
    308c:	84 2f       	mov	r24, r20
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	a0 e0       	ldi	r26, 0x00	; 0
    3092:	b0 e0       	ldi	r27, 0x00	; 0
    3094:	e8 2a       	or	r14, r24
    3096:	f9 2a       	or	r15, r25
    3098:	0a 2b       	or	r16, r26
    309a:	1b 2b       	or	r17, r27
}
    309c:	b7 01       	movw	r22, r14
    309e:	c8 01       	movw	r24, r16
    30a0:	df 91       	pop	r29
    30a2:	cf 91       	pop	r28
    30a4:	1f 91       	pop	r17
    30a6:	0f 91       	pop	r16
    30a8:	ff 90       	pop	r15
    30aa:	ef 90       	pop	r14
    30ac:	df 90       	pop	r13
    30ae:	cf 90       	pop	r12
    30b0:	bf 90       	pop	r11
    30b2:	af 90       	pop	r10
    30b4:	9f 90       	pop	r9
    30b6:	08 95       	ret

000030b8 <__mulsi3>:
    30b8:	62 9f       	mul	r22, r18
    30ba:	d0 01       	movw	r26, r0
    30bc:	73 9f       	mul	r23, r19
    30be:	f0 01       	movw	r30, r0
    30c0:	82 9f       	mul	r24, r18
    30c2:	e0 0d       	add	r30, r0
    30c4:	f1 1d       	adc	r31, r1
    30c6:	64 9f       	mul	r22, r20
    30c8:	e0 0d       	add	r30, r0
    30ca:	f1 1d       	adc	r31, r1
    30cc:	92 9f       	mul	r25, r18
    30ce:	f0 0d       	add	r31, r0
    30d0:	83 9f       	mul	r24, r19
    30d2:	f0 0d       	add	r31, r0
    30d4:	74 9f       	mul	r23, r20
    30d6:	f0 0d       	add	r31, r0
    30d8:	65 9f       	mul	r22, r21
    30da:	f0 0d       	add	r31, r0
    30dc:	99 27       	eor	r25, r25
    30de:	72 9f       	mul	r23, r18
    30e0:	b0 0d       	add	r27, r0
    30e2:	e1 1d       	adc	r30, r1
    30e4:	f9 1f       	adc	r31, r25
    30e6:	63 9f       	mul	r22, r19
    30e8:	b0 0d       	add	r27, r0
    30ea:	e1 1d       	adc	r30, r1
    30ec:	f9 1f       	adc	r31, r25
    30ee:	bd 01       	movw	r22, r26
    30f0:	cf 01       	movw	r24, r30
    30f2:	11 24       	eor	r1, r1
    30f4:	08 95       	ret

000030f6 <__udivmodqi4>:
    30f6:	99 1b       	sub	r25, r25
    30f8:	79 e0       	ldi	r23, 0x09	; 9
    30fa:	04 c0       	rjmp	.+8      	; 0x3104 <__udivmodqi4_ep>

000030fc <__udivmodqi4_loop>:
    30fc:	99 1f       	adc	r25, r25
    30fe:	96 17       	cp	r25, r22
    3100:	08 f0       	brcs	.+2      	; 0x3104 <__udivmodqi4_ep>
    3102:	96 1b       	sub	r25, r22

00003104 <__udivmodqi4_ep>:
    3104:	88 1f       	adc	r24, r24
    3106:	7a 95       	dec	r23
    3108:	c9 f7       	brne	.-14     	; 0x30fc <__udivmodqi4_loop>
    310a:	80 95       	com	r24
    310c:	08 95       	ret

0000310e <__udivmodhi4>:
    310e:	aa 1b       	sub	r26, r26
    3110:	bb 1b       	sub	r27, r27
    3112:	51 e1       	ldi	r21, 0x11	; 17
    3114:	07 c0       	rjmp	.+14     	; 0x3124 <__udivmodhi4_ep>

00003116 <__udivmodhi4_loop>:
    3116:	aa 1f       	adc	r26, r26
    3118:	bb 1f       	adc	r27, r27
    311a:	a6 17       	cp	r26, r22
    311c:	b7 07       	cpc	r27, r23
    311e:	10 f0       	brcs	.+4      	; 0x3124 <__udivmodhi4_ep>
    3120:	a6 1b       	sub	r26, r22
    3122:	b7 0b       	sbc	r27, r23

00003124 <__udivmodhi4_ep>:
    3124:	88 1f       	adc	r24, r24
    3126:	99 1f       	adc	r25, r25
    3128:	5a 95       	dec	r21
    312a:	a9 f7       	brne	.-22     	; 0x3116 <__udivmodhi4_loop>
    312c:	80 95       	com	r24
    312e:	90 95       	com	r25
    3130:	bc 01       	movw	r22, r24
    3132:	cd 01       	movw	r24, r26
    3134:	08 95       	ret

00003136 <__divmodhi4>:
    3136:	97 fb       	bst	r25, 7
    3138:	09 2e       	mov	r0, r25
    313a:	07 26       	eor	r0, r23
    313c:	0a d0       	rcall	.+20     	; 0x3152 <__divmodhi4_neg1>
    313e:	77 fd       	sbrc	r23, 7
    3140:	04 d0       	rcall	.+8      	; 0x314a <__divmodhi4_neg2>
    3142:	e5 df       	rcall	.-54     	; 0x310e <__udivmodhi4>
    3144:	06 d0       	rcall	.+12     	; 0x3152 <__divmodhi4_neg1>
    3146:	00 20       	and	r0, r0
    3148:	1a f4       	brpl	.+6      	; 0x3150 <__divmodhi4_exit>

0000314a <__divmodhi4_neg2>:
    314a:	70 95       	com	r23
    314c:	61 95       	neg	r22
    314e:	7f 4f       	sbci	r23, 0xFF	; 255

00003150 <__divmodhi4_exit>:
    3150:	08 95       	ret

00003152 <__divmodhi4_neg1>:
    3152:	f6 f7       	brtc	.-4      	; 0x3150 <__divmodhi4_exit>
    3154:	90 95       	com	r25
    3156:	81 95       	neg	r24
    3158:	9f 4f       	sbci	r25, 0xFF	; 255
    315a:	08 95       	ret

0000315c <__udivmodsi4>:
    315c:	a1 e2       	ldi	r26, 0x21	; 33
    315e:	1a 2e       	mov	r1, r26
    3160:	aa 1b       	sub	r26, r26
    3162:	bb 1b       	sub	r27, r27
    3164:	fd 01       	movw	r30, r26
    3166:	0d c0       	rjmp	.+26     	; 0x3182 <__udivmodsi4_ep>

00003168 <__udivmodsi4_loop>:
    3168:	aa 1f       	adc	r26, r26
    316a:	bb 1f       	adc	r27, r27
    316c:	ee 1f       	adc	r30, r30
    316e:	ff 1f       	adc	r31, r31
    3170:	a2 17       	cp	r26, r18
    3172:	b3 07       	cpc	r27, r19
    3174:	e4 07       	cpc	r30, r20
    3176:	f5 07       	cpc	r31, r21
    3178:	20 f0       	brcs	.+8      	; 0x3182 <__udivmodsi4_ep>
    317a:	a2 1b       	sub	r26, r18
    317c:	b3 0b       	sbc	r27, r19
    317e:	e4 0b       	sbc	r30, r20
    3180:	f5 0b       	sbc	r31, r21

00003182 <__udivmodsi4_ep>:
    3182:	66 1f       	adc	r22, r22
    3184:	77 1f       	adc	r23, r23
    3186:	88 1f       	adc	r24, r24
    3188:	99 1f       	adc	r25, r25
    318a:	1a 94       	dec	r1
    318c:	69 f7       	brne	.-38     	; 0x3168 <__udivmodsi4_loop>
    318e:	60 95       	com	r22
    3190:	70 95       	com	r23
    3192:	80 95       	com	r24
    3194:	90 95       	com	r25
    3196:	9b 01       	movw	r18, r22
    3198:	ac 01       	movw	r20, r24
    319a:	bd 01       	movw	r22, r26
    319c:	cf 01       	movw	r24, r30
    319e:	08 95       	ret

000031a0 <__tablejump2__>:
    31a0:	ee 0f       	add	r30, r30
    31a2:	ff 1f       	adc	r31, r31

000031a4 <__tablejump__>:
    31a4:	05 90       	lpm	r0, Z+
    31a6:	f4 91       	lpm	r31, Z+
    31a8:	e0 2d       	mov	r30, r0
    31aa:	09 94       	ijmp

000031ac <malloc>:
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	bc 01       	movw	r22, r24
    31b2:	82 30       	cpi	r24, 0x02	; 2
    31b4:	91 05       	cpc	r25, r1
    31b6:	10 f4       	brcc	.+4      	; 0x31bc <malloc+0x10>
    31b8:	62 e0       	ldi	r22, 0x02	; 2
    31ba:	70 e0       	ldi	r23, 0x00	; 0
    31bc:	a0 91 38 03 	lds	r26, 0x0338
    31c0:	b0 91 39 03 	lds	r27, 0x0339
    31c4:	ed 01       	movw	r28, r26
    31c6:	e0 e0       	ldi	r30, 0x00	; 0
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	40 e0       	ldi	r20, 0x00	; 0
    31cc:	50 e0       	ldi	r21, 0x00	; 0
    31ce:	21 c0       	rjmp	.+66     	; 0x3212 <malloc+0x66>
    31d0:	88 81       	ld	r24, Y
    31d2:	99 81       	ldd	r25, Y+1	; 0x01
    31d4:	86 17       	cp	r24, r22
    31d6:	97 07       	cpc	r25, r23
    31d8:	69 f4       	brne	.+26     	; 0x31f4 <malloc+0x48>
    31da:	8a 81       	ldd	r24, Y+2	; 0x02
    31dc:	9b 81       	ldd	r25, Y+3	; 0x03
    31de:	30 97       	sbiw	r30, 0x00	; 0
    31e0:	19 f0       	breq	.+6      	; 0x31e8 <malloc+0x3c>
    31e2:	93 83       	std	Z+3, r25	; 0x03
    31e4:	82 83       	std	Z+2, r24	; 0x02
    31e6:	04 c0       	rjmp	.+8      	; 0x31f0 <malloc+0x44>
    31e8:	90 93 39 03 	sts	0x0339, r25
    31ec:	80 93 38 03 	sts	0x0338, r24
    31f0:	fe 01       	movw	r30, r28
    31f2:	34 c0       	rjmp	.+104    	; 0x325c <malloc+0xb0>
    31f4:	68 17       	cp	r22, r24
    31f6:	79 07       	cpc	r23, r25
    31f8:	38 f4       	brcc	.+14     	; 0x3208 <malloc+0x5c>
    31fa:	41 15       	cp	r20, r1
    31fc:	51 05       	cpc	r21, r1
    31fe:	19 f0       	breq	.+6      	; 0x3206 <malloc+0x5a>
    3200:	84 17       	cp	r24, r20
    3202:	95 07       	cpc	r25, r21
    3204:	08 f4       	brcc	.+2      	; 0x3208 <malloc+0x5c>
    3206:	ac 01       	movw	r20, r24
    3208:	fe 01       	movw	r30, r28
    320a:	8a 81       	ldd	r24, Y+2	; 0x02
    320c:	9b 81       	ldd	r25, Y+3	; 0x03
    320e:	9c 01       	movw	r18, r24
    3210:	e9 01       	movw	r28, r18
    3212:	20 97       	sbiw	r28, 0x00	; 0
    3214:	e9 f6       	brne	.-70     	; 0x31d0 <malloc+0x24>
    3216:	41 15       	cp	r20, r1
    3218:	51 05       	cpc	r21, r1
    321a:	a9 f1       	breq	.+106    	; 0x3286 <malloc+0xda>
    321c:	ca 01       	movw	r24, r20
    321e:	86 1b       	sub	r24, r22
    3220:	97 0b       	sbc	r25, r23
    3222:	04 97       	sbiw	r24, 0x04	; 4
    3224:	08 f4       	brcc	.+2      	; 0x3228 <malloc+0x7c>
    3226:	ba 01       	movw	r22, r20
    3228:	e0 e0       	ldi	r30, 0x00	; 0
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	2a c0       	rjmp	.+84     	; 0x3282 <malloc+0xd6>
    322e:	8d 91       	ld	r24, X+
    3230:	9c 91       	ld	r25, X
    3232:	11 97       	sbiw	r26, 0x01	; 1
    3234:	84 17       	cp	r24, r20
    3236:	95 07       	cpc	r25, r21
    3238:	f9 f4       	brne	.+62     	; 0x3278 <malloc+0xcc>
    323a:	64 17       	cp	r22, r20
    323c:	75 07       	cpc	r23, r21
    323e:	81 f4       	brne	.+32     	; 0x3260 <malloc+0xb4>
    3240:	12 96       	adiw	r26, 0x02	; 2
    3242:	8d 91       	ld	r24, X+
    3244:	9c 91       	ld	r25, X
    3246:	13 97       	sbiw	r26, 0x03	; 3
    3248:	30 97       	sbiw	r30, 0x00	; 0
    324a:	19 f0       	breq	.+6      	; 0x3252 <malloc+0xa6>
    324c:	93 83       	std	Z+3, r25	; 0x03
    324e:	82 83       	std	Z+2, r24	; 0x02
    3250:	04 c0       	rjmp	.+8      	; 0x325a <malloc+0xae>
    3252:	90 93 39 03 	sts	0x0339, r25
    3256:	80 93 38 03 	sts	0x0338, r24
    325a:	fd 01       	movw	r30, r26
    325c:	32 96       	adiw	r30, 0x02	; 2
    325e:	4f c0       	rjmp	.+158    	; 0x32fe <malloc+0x152>
    3260:	ca 01       	movw	r24, r20
    3262:	86 1b       	sub	r24, r22
    3264:	97 0b       	sbc	r25, r23
    3266:	fd 01       	movw	r30, r26
    3268:	e8 0f       	add	r30, r24
    326a:	f9 1f       	adc	r31, r25
    326c:	61 93       	st	Z+, r22
    326e:	71 93       	st	Z+, r23
    3270:	02 97       	sbiw	r24, 0x02	; 2
    3272:	8d 93       	st	X+, r24
    3274:	9c 93       	st	X, r25
    3276:	43 c0       	rjmp	.+134    	; 0x32fe <malloc+0x152>
    3278:	fd 01       	movw	r30, r26
    327a:	82 81       	ldd	r24, Z+2	; 0x02
    327c:	93 81       	ldd	r25, Z+3	; 0x03
    327e:	9c 01       	movw	r18, r24
    3280:	d9 01       	movw	r26, r18
    3282:	10 97       	sbiw	r26, 0x00	; 0
    3284:	a1 f6       	brne	.-88     	; 0x322e <malloc+0x82>
    3286:	80 91 36 03 	lds	r24, 0x0336
    328a:	90 91 37 03 	lds	r25, 0x0337
    328e:	89 2b       	or	r24, r25
    3290:	41 f4       	brne	.+16     	; 0x32a2 <malloc+0xf6>
    3292:	80 91 fb 02 	lds	r24, 0x02FB
    3296:	90 91 fc 02 	lds	r25, 0x02FC
    329a:	90 93 37 03 	sts	0x0337, r25
    329e:	80 93 36 03 	sts	0x0336, r24
    32a2:	40 91 fd 02 	lds	r20, 0x02FD
    32a6:	50 91 fe 02 	lds	r21, 0x02FE
    32aa:	41 15       	cp	r20, r1
    32ac:	51 05       	cpc	r21, r1
    32ae:	41 f4       	brne	.+16     	; 0x32c0 <malloc+0x114>
    32b0:	4d b7       	in	r20, 0x3d	; 61
    32b2:	5e b7       	in	r21, 0x3e	; 62
    32b4:	80 91 f9 02 	lds	r24, 0x02F9
    32b8:	90 91 fa 02 	lds	r25, 0x02FA
    32bc:	48 1b       	sub	r20, r24
    32be:	59 0b       	sbc	r21, r25
    32c0:	20 91 36 03 	lds	r18, 0x0336
    32c4:	30 91 37 03 	lds	r19, 0x0337
    32c8:	24 17       	cp	r18, r20
    32ca:	35 07       	cpc	r19, r21
    32cc:	b0 f4       	brcc	.+44     	; 0x32fa <malloc+0x14e>
    32ce:	ca 01       	movw	r24, r20
    32d0:	82 1b       	sub	r24, r18
    32d2:	93 0b       	sbc	r25, r19
    32d4:	86 17       	cp	r24, r22
    32d6:	97 07       	cpc	r25, r23
    32d8:	80 f0       	brcs	.+32     	; 0x32fa <malloc+0x14e>
    32da:	ab 01       	movw	r20, r22
    32dc:	4e 5f       	subi	r20, 0xFE	; 254
    32de:	5f 4f       	sbci	r21, 0xFF	; 255
    32e0:	84 17       	cp	r24, r20
    32e2:	95 07       	cpc	r25, r21
    32e4:	50 f0       	brcs	.+20     	; 0x32fa <malloc+0x14e>
    32e6:	42 0f       	add	r20, r18
    32e8:	53 1f       	adc	r21, r19
    32ea:	50 93 37 03 	sts	0x0337, r21
    32ee:	40 93 36 03 	sts	0x0336, r20
    32f2:	f9 01       	movw	r30, r18
    32f4:	61 93       	st	Z+, r22
    32f6:	71 93       	st	Z+, r23
    32f8:	02 c0       	rjmp	.+4      	; 0x32fe <malloc+0x152>
    32fa:	e0 e0       	ldi	r30, 0x00	; 0
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	cf 01       	movw	r24, r30
    3300:	df 91       	pop	r29
    3302:	cf 91       	pop	r28
    3304:	08 95       	ret

00003306 <free>:
    3306:	cf 93       	push	r28
    3308:	df 93       	push	r29
    330a:	00 97       	sbiw	r24, 0x00	; 0
    330c:	09 f4       	brne	.+2      	; 0x3310 <free+0xa>
    330e:	50 c0       	rjmp	.+160    	; 0x33b0 <free+0xaa>
    3310:	ec 01       	movw	r28, r24
    3312:	22 97       	sbiw	r28, 0x02	; 2
    3314:	1b 82       	std	Y+3, r1	; 0x03
    3316:	1a 82       	std	Y+2, r1	; 0x02
    3318:	a0 91 38 03 	lds	r26, 0x0338
    331c:	b0 91 39 03 	lds	r27, 0x0339
    3320:	10 97       	sbiw	r26, 0x00	; 0
    3322:	09 f1       	breq	.+66     	; 0x3366 <free+0x60>
    3324:	40 e0       	ldi	r20, 0x00	; 0
    3326:	50 e0       	ldi	r21, 0x00	; 0
    3328:	ac 17       	cp	r26, r28
    332a:	bd 07       	cpc	r27, r29
    332c:	08 f1       	brcs	.+66     	; 0x3370 <free+0x6a>
    332e:	bb 83       	std	Y+3, r27	; 0x03
    3330:	aa 83       	std	Y+2, r26	; 0x02
    3332:	fe 01       	movw	r30, r28
    3334:	21 91       	ld	r18, Z+
    3336:	31 91       	ld	r19, Z+
    3338:	e2 0f       	add	r30, r18
    333a:	f3 1f       	adc	r31, r19
    333c:	ae 17       	cp	r26, r30
    333e:	bf 07       	cpc	r27, r31
    3340:	79 f4       	brne	.+30     	; 0x3360 <free+0x5a>
    3342:	8d 91       	ld	r24, X+
    3344:	9c 91       	ld	r25, X
    3346:	11 97       	sbiw	r26, 0x01	; 1
    3348:	28 0f       	add	r18, r24
    334a:	39 1f       	adc	r19, r25
    334c:	2e 5f       	subi	r18, 0xFE	; 254
    334e:	3f 4f       	sbci	r19, 0xFF	; 255
    3350:	39 83       	std	Y+1, r19	; 0x01
    3352:	28 83       	st	Y, r18
    3354:	12 96       	adiw	r26, 0x02	; 2
    3356:	8d 91       	ld	r24, X+
    3358:	9c 91       	ld	r25, X
    335a:	13 97       	sbiw	r26, 0x03	; 3
    335c:	9b 83       	std	Y+3, r25	; 0x03
    335e:	8a 83       	std	Y+2, r24	; 0x02
    3360:	41 15       	cp	r20, r1
    3362:	51 05       	cpc	r21, r1
    3364:	71 f4       	brne	.+28     	; 0x3382 <free+0x7c>
    3366:	d0 93 39 03 	sts	0x0339, r29
    336a:	c0 93 38 03 	sts	0x0338, r28
    336e:	20 c0       	rjmp	.+64     	; 0x33b0 <free+0xaa>
    3370:	12 96       	adiw	r26, 0x02	; 2
    3372:	8d 91       	ld	r24, X+
    3374:	9c 91       	ld	r25, X
    3376:	13 97       	sbiw	r26, 0x03	; 3
    3378:	ad 01       	movw	r20, r26
    337a:	00 97       	sbiw	r24, 0x00	; 0
    337c:	11 f0       	breq	.+4      	; 0x3382 <free+0x7c>
    337e:	dc 01       	movw	r26, r24
    3380:	d3 cf       	rjmp	.-90     	; 0x3328 <free+0x22>
    3382:	fa 01       	movw	r30, r20
    3384:	d3 83       	std	Z+3, r29	; 0x03
    3386:	c2 83       	std	Z+2, r28	; 0x02
    3388:	21 91       	ld	r18, Z+
    338a:	31 91       	ld	r19, Z+
    338c:	e2 0f       	add	r30, r18
    338e:	f3 1f       	adc	r31, r19
    3390:	ce 17       	cp	r28, r30
    3392:	df 07       	cpc	r29, r31
    3394:	69 f4       	brne	.+26     	; 0x33b0 <free+0xaa>
    3396:	88 81       	ld	r24, Y
    3398:	99 81       	ldd	r25, Y+1	; 0x01
    339a:	28 0f       	add	r18, r24
    339c:	39 1f       	adc	r19, r25
    339e:	2e 5f       	subi	r18, 0xFE	; 254
    33a0:	3f 4f       	sbci	r19, 0xFF	; 255
    33a2:	fa 01       	movw	r30, r20
    33a4:	31 83       	std	Z+1, r19	; 0x01
    33a6:	20 83       	st	Z, r18
    33a8:	8a 81       	ldd	r24, Y+2	; 0x02
    33aa:	9b 81       	ldd	r25, Y+3	; 0x03
    33ac:	93 83       	std	Z+3, r25	; 0x03
    33ae:	82 83       	std	Z+2, r24	; 0x02
    33b0:	df 91       	pop	r29
    33b2:	cf 91       	pop	r28
    33b4:	08 95       	ret

000033b6 <isgraph>:
    33b6:	80 32       	cpi	r24, 0x20	; 32
    33b8:	09 f0       	breq	.+2      	; 0x33bc <isprint+0x2>

000033ba <isprint>:
    33ba:	91 11       	cpse	r25, r1
    33bc:	20 c3       	rjmp	.+1600   	; 0x39fe <__ctype_isfalse>
    33be:	80 52       	subi	r24, 0x20	; 32
    33c0:	8f 55       	subi	r24, 0x5F	; 95
    33c2:	e0 f7       	brcc	.-8      	; 0x33bc <isprint+0x2>
    33c4:	08 95       	ret

000033c6 <tolower>:
    33c6:	91 11       	cpse	r25, r1
    33c8:	08 95       	ret
    33ca:	81 54       	subi	r24, 0x41	; 65
    33cc:	8a 51       	subi	r24, 0x1A	; 26
    33ce:	08 f4       	brcc	.+2      	; 0x33d2 <tolower+0xc>
    33d0:	80 5e       	subi	r24, 0xE0	; 224
    33d2:	85 5a       	subi	r24, 0xA5	; 165
    33d4:	08 95       	ret

000033d6 <strcasecmp>:
    33d6:	fb 01       	movw	r30, r22
    33d8:	dc 01       	movw	r26, r24
    33da:	8d 91       	ld	r24, X+
    33dc:	81 34       	cpi	r24, 0x41	; 65
    33de:	1c f0       	brlt	.+6      	; 0x33e6 <strcasecmp+0x10>
    33e0:	8b 35       	cpi	r24, 0x5B	; 91
    33e2:	0c f4       	brge	.+2      	; 0x33e6 <strcasecmp+0x10>
    33e4:	80 5e       	subi	r24, 0xE0	; 224
    33e6:	61 91       	ld	r22, Z+
    33e8:	61 34       	cpi	r22, 0x41	; 65
    33ea:	1c f0       	brlt	.+6      	; 0x33f2 <strcasecmp+0x1c>
    33ec:	6b 35       	cpi	r22, 0x5B	; 91
    33ee:	0c f4       	brge	.+2      	; 0x33f2 <strcasecmp+0x1c>
    33f0:	60 5e       	subi	r22, 0xE0	; 224
    33f2:	86 1b       	sub	r24, r22
    33f4:	61 11       	cpse	r22, r1
    33f6:	89 f3       	breq	.-30     	; 0x33da <strcasecmp+0x4>
    33f8:	99 0b       	sbc	r25, r25
    33fa:	08 95       	ret

000033fc <strcpy>:
    33fc:	fb 01       	movw	r30, r22
    33fe:	dc 01       	movw	r26, r24
    3400:	01 90       	ld	r0, Z+
    3402:	0d 92       	st	X+, r0
    3404:	00 20       	and	r0, r0
    3406:	e1 f7       	brne	.-8      	; 0x3400 <strcpy+0x4>
    3408:	08 95       	ret

0000340a <fdevopen>:
    340a:	0f 93       	push	r16
    340c:	1f 93       	push	r17
    340e:	cf 93       	push	r28
    3410:	df 93       	push	r29
    3412:	8c 01       	movw	r16, r24
    3414:	eb 01       	movw	r28, r22
    3416:	00 97       	sbiw	r24, 0x00	; 0
    3418:	31 f4       	brne	.+12     	; 0x3426 <fdevopen+0x1c>
    341a:	61 15       	cp	r22, r1
    341c:	71 05       	cpc	r23, r1
    341e:	19 f4       	brne	.+6      	; 0x3426 <fdevopen+0x1c>
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	38 c0       	rjmp	.+112    	; 0x3496 <fdevopen+0x8c>
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	6e e0       	ldi	r22, 0x0E	; 14
    342c:	70 e0       	ldi	r23, 0x00	; 0
    342e:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <calloc>
    3432:	fc 01       	movw	r30, r24
    3434:	9c 01       	movw	r18, r24
    3436:	00 97       	sbiw	r24, 0x00	; 0
    3438:	71 f1       	breq	.+92     	; 0x3496 <fdevopen+0x8c>
    343a:	80 e8       	ldi	r24, 0x80	; 128
    343c:	83 83       	std	Z+3, r24	; 0x03
    343e:	20 97       	sbiw	r28, 0x00	; 0
    3440:	71 f0       	breq	.+28     	; 0x345e <fdevopen+0x54>
    3442:	d3 87       	std	Z+11, r29	; 0x0b
    3444:	c2 87       	std	Z+10, r28	; 0x0a
    3446:	81 e8       	ldi	r24, 0x81	; 129
    3448:	83 83       	std	Z+3, r24	; 0x03
    344a:	80 91 3a 03 	lds	r24, 0x033A
    344e:	90 91 3b 03 	lds	r25, 0x033B
    3452:	89 2b       	or	r24, r25
    3454:	21 f4       	brne	.+8      	; 0x345e <fdevopen+0x54>
    3456:	f0 93 3b 03 	sts	0x033B, r31
    345a:	e0 93 3a 03 	sts	0x033A, r30
    345e:	01 15       	cp	r16, r1
    3460:	11 05       	cpc	r17, r1
    3462:	c9 f0       	breq	.+50     	; 0x3496 <fdevopen+0x8c>
    3464:	11 87       	std	Z+9, r17	; 0x09
    3466:	00 87       	std	Z+8, r16	; 0x08
    3468:	83 81       	ldd	r24, Z+3	; 0x03
    346a:	82 60       	ori	r24, 0x02	; 2
    346c:	83 83       	std	Z+3, r24	; 0x03
    346e:	80 91 3c 03 	lds	r24, 0x033C
    3472:	90 91 3d 03 	lds	r25, 0x033D
    3476:	89 2b       	or	r24, r25
    3478:	71 f4       	brne	.+28     	; 0x3496 <fdevopen+0x8c>
    347a:	f0 93 3d 03 	sts	0x033D, r31
    347e:	e0 93 3c 03 	sts	0x033C, r30
    3482:	80 91 3e 03 	lds	r24, 0x033E
    3486:	90 91 3f 03 	lds	r25, 0x033F
    348a:	89 2b       	or	r24, r25
    348c:	21 f4       	brne	.+8      	; 0x3496 <fdevopen+0x8c>
    348e:	f0 93 3f 03 	sts	0x033F, r31
    3492:	e0 93 3e 03 	sts	0x033E, r30
    3496:	c9 01       	movw	r24, r18
    3498:	df 91       	pop	r29
    349a:	cf 91       	pop	r28
    349c:	1f 91       	pop	r17
    349e:	0f 91       	pop	r16
    34a0:	08 95       	ret

000034a2 <fgetc>:
    34a2:	cf 93       	push	r28
    34a4:	df 93       	push	r29
    34a6:	ec 01       	movw	r28, r24
    34a8:	4b 81       	ldd	r20, Y+3	; 0x03
    34aa:	40 ff       	sbrs	r20, 0
    34ac:	1a c0       	rjmp	.+52     	; 0x34e2 <fgetc+0x40>
    34ae:	46 ff       	sbrs	r20, 6
    34b0:	0a c0       	rjmp	.+20     	; 0x34c6 <fgetc+0x24>
    34b2:	4f 7b       	andi	r20, 0xBF	; 191
    34b4:	4b 83       	std	Y+3, r20	; 0x03
    34b6:	8e 81       	ldd	r24, Y+6	; 0x06
    34b8:	9f 81       	ldd	r25, Y+7	; 0x07
    34ba:	01 96       	adiw	r24, 0x01	; 1
    34bc:	9f 83       	std	Y+7, r25	; 0x07
    34be:	8e 83       	std	Y+6, r24	; 0x06
    34c0:	8a 81       	ldd	r24, Y+2	; 0x02
    34c2:	28 2f       	mov	r18, r24
    34c4:	2b c0       	rjmp	.+86     	; 0x351c <fgetc+0x7a>
    34c6:	42 ff       	sbrs	r20, 2
    34c8:	13 c0       	rjmp	.+38     	; 0x34f0 <fgetc+0x4e>
    34ca:	e8 81       	ld	r30, Y
    34cc:	f9 81       	ldd	r31, Y+1	; 0x01
    34ce:	80 81       	ld	r24, Z
    34d0:	28 2f       	mov	r18, r24
    34d2:	33 27       	eor	r19, r19
    34d4:	27 fd       	sbrc	r18, 7
    34d6:	30 95       	com	r19
    34d8:	21 15       	cp	r18, r1
    34da:	31 05       	cpc	r19, r1
    34dc:	29 f4       	brne	.+10     	; 0x34e8 <fgetc+0x46>
    34de:	40 62       	ori	r20, 0x20	; 32
    34e0:	4b 83       	std	Y+3, r20	; 0x03
    34e2:	2f ef       	ldi	r18, 0xFF	; 255
    34e4:	3f ef       	ldi	r19, 0xFF	; 255
    34e6:	1b c0       	rjmp	.+54     	; 0x351e <fgetc+0x7c>
    34e8:	31 96       	adiw	r30, 0x01	; 1
    34ea:	f9 83       	std	Y+1, r31	; 0x01
    34ec:	e8 83       	st	Y, r30
    34ee:	11 c0       	rjmp	.+34     	; 0x3512 <fgetc+0x70>
    34f0:	ea 85       	ldd	r30, Y+10	; 0x0a
    34f2:	fb 85       	ldd	r31, Y+11	; 0x0b
    34f4:	ce 01       	movw	r24, r28
    34f6:	09 95       	icall
    34f8:	9c 01       	movw	r18, r24
    34fa:	97 ff       	sbrs	r25, 7
    34fc:	0a c0       	rjmp	.+20     	; 0x3512 <fgetc+0x70>
    34fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3500:	2f 5f       	subi	r18, 0xFF	; 255
    3502:	3f 4f       	sbci	r19, 0xFF	; 255
    3504:	11 f0       	breq	.+4      	; 0x350a <fgetc+0x68>
    3506:	80 e2       	ldi	r24, 0x20	; 32
    3508:	01 c0       	rjmp	.+2      	; 0x350c <fgetc+0x6a>
    350a:	80 e1       	ldi	r24, 0x10	; 16
    350c:	89 2b       	or	r24, r25
    350e:	8b 83       	std	Y+3, r24	; 0x03
    3510:	e8 cf       	rjmp	.-48     	; 0x34e2 <fgetc+0x40>
    3512:	8e 81       	ldd	r24, Y+6	; 0x06
    3514:	9f 81       	ldd	r25, Y+7	; 0x07
    3516:	01 96       	adiw	r24, 0x01	; 1
    3518:	9f 83       	std	Y+7, r25	; 0x07
    351a:	8e 83       	std	Y+6, r24	; 0x06
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	c9 01       	movw	r24, r18
    3520:	df 91       	pop	r29
    3522:	cf 91       	pop	r28
    3524:	08 95       	ret

00003526 <fputs>:
    3526:	ef 92       	push	r14
    3528:	ff 92       	push	r15
    352a:	0f 93       	push	r16
    352c:	1f 93       	push	r17
    352e:	cf 93       	push	r28
    3530:	df 93       	push	r29
    3532:	7c 01       	movw	r14, r24
    3534:	8b 01       	movw	r16, r22
    3536:	db 01       	movw	r26, r22
    3538:	13 96       	adiw	r26, 0x03	; 3
    353a:	8c 91       	ld	r24, X
    353c:	81 fd       	sbrc	r24, 1
    353e:	03 c0       	rjmp	.+6      	; 0x3546 <fputs+0x20>
    3540:	cf ef       	ldi	r28, 0xFF	; 255
    3542:	df ef       	ldi	r29, 0xFF	; 255
    3544:	13 c0       	rjmp	.+38     	; 0x356c <fputs+0x46>
    3546:	c0 e0       	ldi	r28, 0x00	; 0
    3548:	d0 e0       	ldi	r29, 0x00	; 0
    354a:	0b c0       	rjmp	.+22     	; 0x3562 <fputs+0x3c>
    354c:	d8 01       	movw	r26, r16
    354e:	18 96       	adiw	r26, 0x08	; 8
    3550:	ed 91       	ld	r30, X+
    3552:	fc 91       	ld	r31, X
    3554:	19 97       	sbiw	r26, 0x09	; 9
    3556:	b8 01       	movw	r22, r16
    3558:	09 95       	icall
    355a:	89 2b       	or	r24, r25
    355c:	11 f0       	breq	.+4      	; 0x3562 <fputs+0x3c>
    355e:	cf ef       	ldi	r28, 0xFF	; 255
    3560:	df ef       	ldi	r29, 0xFF	; 255
    3562:	f7 01       	movw	r30, r14
    3564:	81 91       	ld	r24, Z+
    3566:	7f 01       	movw	r14, r30
    3568:	88 23       	and	r24, r24
    356a:	81 f7       	brne	.-32     	; 0x354c <fputs+0x26>
    356c:	ce 01       	movw	r24, r28
    356e:	cd b7       	in	r28, 0x3d	; 61
    3570:	de b7       	in	r29, 0x3e	; 62
    3572:	e6 e0       	ldi	r30, 0x06	; 6
    3574:	0c 94 d1 1d 	jmp	0x3ba2	; 0x3ba2 <__epilogue_restores__+0x18>

00003578 <printf>:
    3578:	a0 e0       	ldi	r26, 0x00	; 0
    357a:	b0 e0       	ldi	r27, 0x00	; 0
    357c:	e2 ec       	ldi	r30, 0xC2	; 194
    357e:	fa e1       	ldi	r31, 0x1A	; 26
    3580:	0c 94 b9 1d 	jmp	0x3b72	; 0x3b72 <__prologue_saves__+0x20>
    3584:	fe 01       	movw	r30, r28
    3586:	35 96       	adiw	r30, 0x05	; 5
    3588:	61 91       	ld	r22, Z+
    358a:	71 91       	ld	r23, Z+
    358c:	80 91 3c 03 	lds	r24, 0x033C
    3590:	90 91 3d 03 	lds	r25, 0x033D
    3594:	af 01       	movw	r20, r30
    3596:	0e 94 06 1b 	call	0x360c	; 0x360c <vfprintf>
    359a:	20 96       	adiw	r28, 0x00	; 0
    359c:	e2 e0       	ldi	r30, 0x02	; 2
    359e:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <__epilogue_restores__+0x20>

000035a2 <puts>:
    35a2:	0f 93       	push	r16
    35a4:	1f 93       	push	r17
    35a6:	cf 93       	push	r28
    35a8:	df 93       	push	r29
    35aa:	8c 01       	movw	r16, r24
    35ac:	e0 91 3c 03 	lds	r30, 0x033C
    35b0:	f0 91 3d 03 	lds	r31, 0x033D
    35b4:	83 81       	ldd	r24, Z+3	; 0x03
    35b6:	81 ff       	sbrs	r24, 1
    35b8:	21 c0       	rjmp	.+66     	; 0x35fc <puts+0x5a>
    35ba:	c0 e0       	ldi	r28, 0x00	; 0
    35bc:	d0 e0       	ldi	r29, 0x00	; 0
    35be:	0d c0       	rjmp	.+26     	; 0x35da <puts+0x38>
    35c0:	e0 91 3c 03 	lds	r30, 0x033C
    35c4:	f0 91 3d 03 	lds	r31, 0x033D
    35c8:	20 85       	ldd	r18, Z+8	; 0x08
    35ca:	31 85       	ldd	r19, Z+9	; 0x09
    35cc:	bf 01       	movw	r22, r30
    35ce:	f9 01       	movw	r30, r18
    35d0:	09 95       	icall
    35d2:	89 2b       	or	r24, r25
    35d4:	11 f0       	breq	.+4      	; 0x35da <puts+0x38>
    35d6:	cf ef       	ldi	r28, 0xFF	; 255
    35d8:	df ef       	ldi	r29, 0xFF	; 255
    35da:	f8 01       	movw	r30, r16
    35dc:	81 91       	ld	r24, Z+
    35de:	8f 01       	movw	r16, r30
    35e0:	88 23       	and	r24, r24
    35e2:	71 f7       	brne	.-36     	; 0x35c0 <puts+0x1e>
    35e4:	e0 91 3c 03 	lds	r30, 0x033C
    35e8:	f0 91 3d 03 	lds	r31, 0x033D
    35ec:	20 85       	ldd	r18, Z+8	; 0x08
    35ee:	31 85       	ldd	r19, Z+9	; 0x09
    35f0:	8a e0       	ldi	r24, 0x0A	; 10
    35f2:	bf 01       	movw	r22, r30
    35f4:	f9 01       	movw	r30, r18
    35f6:	09 95       	icall
    35f8:	89 2b       	or	r24, r25
    35fa:	11 f0       	breq	.+4      	; 0x3600 <puts+0x5e>
    35fc:	cf ef       	ldi	r28, 0xFF	; 255
    35fe:	df ef       	ldi	r29, 0xFF	; 255
    3600:	ce 01       	movw	r24, r28
    3602:	df 91       	pop	r29
    3604:	cf 91       	pop	r28
    3606:	1f 91       	pop	r17
    3608:	0f 91       	pop	r16
    360a:	08 95       	ret

0000360c <vfprintf>:
    360c:	ab e0       	ldi	r26, 0x0B	; 11
    360e:	b0 e0       	ldi	r27, 0x00	; 0
    3610:	ec e0       	ldi	r30, 0x0C	; 12
    3612:	fb e1       	ldi	r31, 0x1B	; 27
    3614:	0c 94 a9 1d 	jmp	0x3b52	; 0x3b52 <__prologue_saves__>
    3618:	3c 01       	movw	r6, r24
    361a:	2b 01       	movw	r4, r22
    361c:	5a 01       	movw	r10, r20
    361e:	fc 01       	movw	r30, r24
    3620:	17 82       	std	Z+7, r1	; 0x07
    3622:	16 82       	std	Z+6, r1	; 0x06
    3624:	83 81       	ldd	r24, Z+3	; 0x03
    3626:	81 fd       	sbrc	r24, 1
    3628:	03 c0       	rjmp	.+6      	; 0x3630 <vfprintf+0x24>
    362a:	6f ef       	ldi	r22, 0xFF	; 255
    362c:	7f ef       	ldi	r23, 0xFF	; 255
    362e:	c6 c1       	rjmp	.+908    	; 0x39bc <vfprintf+0x3b0>
    3630:	9a e0       	ldi	r25, 0x0A	; 10
    3632:	89 2e       	mov	r8, r25
    3634:	1e 01       	movw	r2, r28
    3636:	08 94       	sec
    3638:	21 1c       	adc	r2, r1
    363a:	31 1c       	adc	r3, r1
    363c:	f3 01       	movw	r30, r6
    363e:	23 81       	ldd	r18, Z+3	; 0x03
    3640:	f2 01       	movw	r30, r4
    3642:	23 fd       	sbrc	r18, 3
    3644:	85 91       	lpm	r24, Z+
    3646:	23 ff       	sbrs	r18, 3
    3648:	81 91       	ld	r24, Z+
    364a:	2f 01       	movw	r4, r30
    364c:	88 23       	and	r24, r24
    364e:	09 f4       	brne	.+2      	; 0x3652 <vfprintf+0x46>
    3650:	b2 c1       	rjmp	.+868    	; 0x39b6 <vfprintf+0x3aa>
    3652:	85 32       	cpi	r24, 0x25	; 37
    3654:	39 f4       	brne	.+14     	; 0x3664 <vfprintf+0x58>
    3656:	23 fd       	sbrc	r18, 3
    3658:	85 91       	lpm	r24, Z+
    365a:	23 ff       	sbrs	r18, 3
    365c:	81 91       	ld	r24, Z+
    365e:	2f 01       	movw	r4, r30
    3660:	85 32       	cpi	r24, 0x25	; 37
    3662:	29 f4       	brne	.+10     	; 0x366e <vfprintf+0x62>
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	b3 01       	movw	r22, r6
    3668:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <fputc>
    366c:	e7 cf       	rjmp	.-50     	; 0x363c <vfprintf+0x30>
    366e:	98 2f       	mov	r25, r24
    3670:	ff 24       	eor	r15, r15
    3672:	ee 24       	eor	r14, r14
    3674:	99 24       	eor	r9, r9
    3676:	ff e1       	ldi	r31, 0x1F	; 31
    3678:	ff 15       	cp	r31, r15
    367a:	d0 f0       	brcs	.+52     	; 0x36b0 <vfprintf+0xa4>
    367c:	9b 32       	cpi	r25, 0x2B	; 43
    367e:	69 f0       	breq	.+26     	; 0x369a <vfprintf+0x8e>
    3680:	9c 32       	cpi	r25, 0x2C	; 44
    3682:	28 f4       	brcc	.+10     	; 0x368e <vfprintf+0x82>
    3684:	90 32       	cpi	r25, 0x20	; 32
    3686:	59 f0       	breq	.+22     	; 0x369e <vfprintf+0x92>
    3688:	93 32       	cpi	r25, 0x23	; 35
    368a:	91 f4       	brne	.+36     	; 0x36b0 <vfprintf+0xa4>
    368c:	0e c0       	rjmp	.+28     	; 0x36aa <vfprintf+0x9e>
    368e:	9d 32       	cpi	r25, 0x2D	; 45
    3690:	49 f0       	breq	.+18     	; 0x36a4 <vfprintf+0x98>
    3692:	90 33       	cpi	r25, 0x30	; 48
    3694:	69 f4       	brne	.+26     	; 0x36b0 <vfprintf+0xa4>
    3696:	41 e0       	ldi	r20, 0x01	; 1
    3698:	24 c0       	rjmp	.+72     	; 0x36e2 <vfprintf+0xd6>
    369a:	52 e0       	ldi	r21, 0x02	; 2
    369c:	f5 2a       	or	r15, r21
    369e:	84 e0       	ldi	r24, 0x04	; 4
    36a0:	f8 2a       	or	r15, r24
    36a2:	28 c0       	rjmp	.+80     	; 0x36f4 <vfprintf+0xe8>
    36a4:	98 e0       	ldi	r25, 0x08	; 8
    36a6:	f9 2a       	or	r15, r25
    36a8:	25 c0       	rjmp	.+74     	; 0x36f4 <vfprintf+0xe8>
    36aa:	e0 e1       	ldi	r30, 0x10	; 16
    36ac:	fe 2a       	or	r15, r30
    36ae:	22 c0       	rjmp	.+68     	; 0x36f4 <vfprintf+0xe8>
    36b0:	f7 fc       	sbrc	r15, 7
    36b2:	29 c0       	rjmp	.+82     	; 0x3706 <vfprintf+0xfa>
    36b4:	89 2f       	mov	r24, r25
    36b6:	80 53       	subi	r24, 0x30	; 48
    36b8:	8a 30       	cpi	r24, 0x0A	; 10
    36ba:	70 f4       	brcc	.+28     	; 0x36d8 <vfprintf+0xcc>
    36bc:	f6 fe       	sbrs	r15, 6
    36be:	05 c0       	rjmp	.+10     	; 0x36ca <vfprintf+0xbe>
    36c0:	98 9c       	mul	r9, r8
    36c2:	90 2c       	mov	r9, r0
    36c4:	11 24       	eor	r1, r1
    36c6:	98 0e       	add	r9, r24
    36c8:	15 c0       	rjmp	.+42     	; 0x36f4 <vfprintf+0xe8>
    36ca:	e8 9c       	mul	r14, r8
    36cc:	e0 2c       	mov	r14, r0
    36ce:	11 24       	eor	r1, r1
    36d0:	e8 0e       	add	r14, r24
    36d2:	f0 e2       	ldi	r31, 0x20	; 32
    36d4:	ff 2a       	or	r15, r31
    36d6:	0e c0       	rjmp	.+28     	; 0x36f4 <vfprintf+0xe8>
    36d8:	9e 32       	cpi	r25, 0x2E	; 46
    36da:	29 f4       	brne	.+10     	; 0x36e6 <vfprintf+0xda>
    36dc:	f6 fc       	sbrc	r15, 6
    36de:	6b c1       	rjmp	.+726    	; 0x39b6 <vfprintf+0x3aa>
    36e0:	40 e4       	ldi	r20, 0x40	; 64
    36e2:	f4 2a       	or	r15, r20
    36e4:	07 c0       	rjmp	.+14     	; 0x36f4 <vfprintf+0xe8>
    36e6:	9c 36       	cpi	r25, 0x6C	; 108
    36e8:	19 f4       	brne	.+6      	; 0x36f0 <vfprintf+0xe4>
    36ea:	50 e8       	ldi	r21, 0x80	; 128
    36ec:	f5 2a       	or	r15, r21
    36ee:	02 c0       	rjmp	.+4      	; 0x36f4 <vfprintf+0xe8>
    36f0:	98 36       	cpi	r25, 0x68	; 104
    36f2:	49 f4       	brne	.+18     	; 0x3706 <vfprintf+0xfa>
    36f4:	f2 01       	movw	r30, r4
    36f6:	23 fd       	sbrc	r18, 3
    36f8:	95 91       	lpm	r25, Z+
    36fa:	23 ff       	sbrs	r18, 3
    36fc:	91 91       	ld	r25, Z+
    36fe:	2f 01       	movw	r4, r30
    3700:	99 23       	and	r25, r25
    3702:	09 f0       	breq	.+2      	; 0x3706 <vfprintf+0xfa>
    3704:	b8 cf       	rjmp	.-144    	; 0x3676 <vfprintf+0x6a>
    3706:	89 2f       	mov	r24, r25
    3708:	85 54       	subi	r24, 0x45	; 69
    370a:	83 30       	cpi	r24, 0x03	; 3
    370c:	18 f0       	brcs	.+6      	; 0x3714 <vfprintf+0x108>
    370e:	80 52       	subi	r24, 0x20	; 32
    3710:	83 30       	cpi	r24, 0x03	; 3
    3712:	38 f4       	brcc	.+14     	; 0x3722 <vfprintf+0x116>
    3714:	44 e0       	ldi	r20, 0x04	; 4
    3716:	50 e0       	ldi	r21, 0x00	; 0
    3718:	a4 0e       	add	r10, r20
    371a:	b5 1e       	adc	r11, r21
    371c:	5f e3       	ldi	r21, 0x3F	; 63
    371e:	59 83       	std	Y+1, r21	; 0x01
    3720:	0f c0       	rjmp	.+30     	; 0x3740 <vfprintf+0x134>
    3722:	93 36       	cpi	r25, 0x63	; 99
    3724:	31 f0       	breq	.+12     	; 0x3732 <vfprintf+0x126>
    3726:	93 37       	cpi	r25, 0x73	; 115
    3728:	79 f0       	breq	.+30     	; 0x3748 <vfprintf+0x13c>
    372a:	93 35       	cpi	r25, 0x53	; 83
    372c:	09 f0       	breq	.+2      	; 0x3730 <vfprintf+0x124>
    372e:	56 c0       	rjmp	.+172    	; 0x37dc <vfprintf+0x1d0>
    3730:	20 c0       	rjmp	.+64     	; 0x3772 <vfprintf+0x166>
    3732:	f5 01       	movw	r30, r10
    3734:	80 81       	ld	r24, Z
    3736:	89 83       	std	Y+1, r24	; 0x01
    3738:	42 e0       	ldi	r20, 0x02	; 2
    373a:	50 e0       	ldi	r21, 0x00	; 0
    373c:	a4 0e       	add	r10, r20
    373e:	b5 1e       	adc	r11, r21
    3740:	61 01       	movw	r12, r2
    3742:	01 e0       	ldi	r16, 0x01	; 1
    3744:	10 e0       	ldi	r17, 0x00	; 0
    3746:	12 c0       	rjmp	.+36     	; 0x376c <vfprintf+0x160>
    3748:	f5 01       	movw	r30, r10
    374a:	c0 80       	ld	r12, Z
    374c:	d1 80       	ldd	r13, Z+1	; 0x01
    374e:	f6 fc       	sbrc	r15, 6
    3750:	03 c0       	rjmp	.+6      	; 0x3758 <vfprintf+0x14c>
    3752:	6f ef       	ldi	r22, 0xFF	; 255
    3754:	7f ef       	ldi	r23, 0xFF	; 255
    3756:	02 c0       	rjmp	.+4      	; 0x375c <vfprintf+0x150>
    3758:	69 2d       	mov	r22, r9
    375a:	70 e0       	ldi	r23, 0x00	; 0
    375c:	42 e0       	ldi	r20, 0x02	; 2
    375e:	50 e0       	ldi	r21, 0x00	; 0
    3760:	a4 0e       	add	r10, r20
    3762:	b5 1e       	adc	r11, r21
    3764:	c6 01       	movw	r24, r12
    3766:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <strnlen>
    376a:	8c 01       	movw	r16, r24
    376c:	5f e7       	ldi	r21, 0x7F	; 127
    376e:	f5 22       	and	r15, r21
    3770:	14 c0       	rjmp	.+40     	; 0x379a <vfprintf+0x18e>
    3772:	f5 01       	movw	r30, r10
    3774:	c0 80       	ld	r12, Z
    3776:	d1 80       	ldd	r13, Z+1	; 0x01
    3778:	f6 fc       	sbrc	r15, 6
    377a:	03 c0       	rjmp	.+6      	; 0x3782 <vfprintf+0x176>
    377c:	6f ef       	ldi	r22, 0xFF	; 255
    377e:	7f ef       	ldi	r23, 0xFF	; 255
    3780:	02 c0       	rjmp	.+4      	; 0x3786 <vfprintf+0x17a>
    3782:	69 2d       	mov	r22, r9
    3784:	70 e0       	ldi	r23, 0x00	; 0
    3786:	42 e0       	ldi	r20, 0x02	; 2
    3788:	50 e0       	ldi	r21, 0x00	; 0
    378a:	a4 0e       	add	r10, r20
    378c:	b5 1e       	adc	r11, r21
    378e:	c6 01       	movw	r24, r12
    3790:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <strnlen_P>
    3794:	8c 01       	movw	r16, r24
    3796:	50 e8       	ldi	r21, 0x80	; 128
    3798:	f5 2a       	or	r15, r21
    379a:	f3 fe       	sbrs	r15, 3
    379c:	07 c0       	rjmp	.+14     	; 0x37ac <vfprintf+0x1a0>
    379e:	1a c0       	rjmp	.+52     	; 0x37d4 <vfprintf+0x1c8>
    37a0:	80 e2       	ldi	r24, 0x20	; 32
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	b3 01       	movw	r22, r6
    37a6:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <fputc>
    37aa:	ea 94       	dec	r14
    37ac:	8e 2d       	mov	r24, r14
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	08 17       	cp	r16, r24
    37b2:	19 07       	cpc	r17, r25
    37b4:	a8 f3       	brcs	.-22     	; 0x37a0 <vfprintf+0x194>
    37b6:	0e c0       	rjmp	.+28     	; 0x37d4 <vfprintf+0x1c8>
    37b8:	f6 01       	movw	r30, r12
    37ba:	f7 fc       	sbrc	r15, 7
    37bc:	85 91       	lpm	r24, Z+
    37be:	f7 fe       	sbrs	r15, 7
    37c0:	81 91       	ld	r24, Z+
    37c2:	6f 01       	movw	r12, r30
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	b3 01       	movw	r22, r6
    37c8:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <fputc>
    37cc:	e1 10       	cpse	r14, r1
    37ce:	ea 94       	dec	r14
    37d0:	01 50       	subi	r16, 0x01	; 1
    37d2:	10 40       	sbci	r17, 0x00	; 0
    37d4:	01 15       	cp	r16, r1
    37d6:	11 05       	cpc	r17, r1
    37d8:	79 f7       	brne	.-34     	; 0x37b8 <vfprintf+0x1ac>
    37da:	ea c0       	rjmp	.+468    	; 0x39b0 <vfprintf+0x3a4>
    37dc:	94 36       	cpi	r25, 0x64	; 100
    37de:	11 f0       	breq	.+4      	; 0x37e4 <vfprintf+0x1d8>
    37e0:	99 36       	cpi	r25, 0x69	; 105
    37e2:	69 f5       	brne	.+90     	; 0x383e <vfprintf+0x232>
    37e4:	f7 fe       	sbrs	r15, 7
    37e6:	08 c0       	rjmp	.+16     	; 0x37f8 <vfprintf+0x1ec>
    37e8:	f5 01       	movw	r30, r10
    37ea:	20 81       	ld	r18, Z
    37ec:	31 81       	ldd	r19, Z+1	; 0x01
    37ee:	42 81       	ldd	r20, Z+2	; 0x02
    37f0:	53 81       	ldd	r21, Z+3	; 0x03
    37f2:	84 e0       	ldi	r24, 0x04	; 4
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	0a c0       	rjmp	.+20     	; 0x380c <vfprintf+0x200>
    37f8:	f5 01       	movw	r30, r10
    37fa:	80 81       	ld	r24, Z
    37fc:	91 81       	ldd	r25, Z+1	; 0x01
    37fe:	9c 01       	movw	r18, r24
    3800:	44 27       	eor	r20, r20
    3802:	37 fd       	sbrc	r19, 7
    3804:	40 95       	com	r20
    3806:	54 2f       	mov	r21, r20
    3808:	82 e0       	ldi	r24, 0x02	; 2
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	a8 0e       	add	r10, r24
    380e:	b9 1e       	adc	r11, r25
    3810:	9f e6       	ldi	r25, 0x6F	; 111
    3812:	f9 22       	and	r15, r25
    3814:	57 ff       	sbrs	r21, 7
    3816:	09 c0       	rjmp	.+18     	; 0x382a <vfprintf+0x21e>
    3818:	50 95       	com	r21
    381a:	40 95       	com	r20
    381c:	30 95       	com	r19
    381e:	21 95       	neg	r18
    3820:	3f 4f       	sbci	r19, 0xFF	; 255
    3822:	4f 4f       	sbci	r20, 0xFF	; 255
    3824:	5f 4f       	sbci	r21, 0xFF	; 255
    3826:	e0 e8       	ldi	r30, 0x80	; 128
    3828:	fe 2a       	or	r15, r30
    382a:	ca 01       	movw	r24, r20
    382c:	b9 01       	movw	r22, r18
    382e:	a1 01       	movw	r20, r2
    3830:	2a e0       	ldi	r18, 0x0A	; 10
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <__ultoa_invert>
    3838:	d8 2e       	mov	r13, r24
    383a:	d2 18       	sub	r13, r2
    383c:	40 c0       	rjmp	.+128    	; 0x38be <vfprintf+0x2b2>
    383e:	95 37       	cpi	r25, 0x75	; 117
    3840:	29 f4       	brne	.+10     	; 0x384c <vfprintf+0x240>
    3842:	1f 2d       	mov	r17, r15
    3844:	1f 7e       	andi	r17, 0xEF	; 239
    3846:	2a e0       	ldi	r18, 0x0A	; 10
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	1d c0       	rjmp	.+58     	; 0x3886 <vfprintf+0x27a>
    384c:	1f 2d       	mov	r17, r15
    384e:	19 7f       	andi	r17, 0xF9	; 249
    3850:	9f 36       	cpi	r25, 0x6F	; 111
    3852:	61 f0       	breq	.+24     	; 0x386c <vfprintf+0x260>
    3854:	90 37       	cpi	r25, 0x70	; 112
    3856:	20 f4       	brcc	.+8      	; 0x3860 <vfprintf+0x254>
    3858:	98 35       	cpi	r25, 0x58	; 88
    385a:	09 f0       	breq	.+2      	; 0x385e <vfprintf+0x252>
    385c:	ac c0       	rjmp	.+344    	; 0x39b6 <vfprintf+0x3aa>
    385e:	0f c0       	rjmp	.+30     	; 0x387e <vfprintf+0x272>
    3860:	90 37       	cpi	r25, 0x70	; 112
    3862:	39 f0       	breq	.+14     	; 0x3872 <vfprintf+0x266>
    3864:	98 37       	cpi	r25, 0x78	; 120
    3866:	09 f0       	breq	.+2      	; 0x386a <vfprintf+0x25e>
    3868:	a6 c0       	rjmp	.+332    	; 0x39b6 <vfprintf+0x3aa>
    386a:	04 c0       	rjmp	.+8      	; 0x3874 <vfprintf+0x268>
    386c:	28 e0       	ldi	r18, 0x08	; 8
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	0a c0       	rjmp	.+20     	; 0x3886 <vfprintf+0x27a>
    3872:	10 61       	ori	r17, 0x10	; 16
    3874:	14 fd       	sbrc	r17, 4
    3876:	14 60       	ori	r17, 0x04	; 4
    3878:	20 e1       	ldi	r18, 0x10	; 16
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	04 c0       	rjmp	.+8      	; 0x3886 <vfprintf+0x27a>
    387e:	14 fd       	sbrc	r17, 4
    3880:	16 60       	ori	r17, 0x06	; 6
    3882:	20 e1       	ldi	r18, 0x10	; 16
    3884:	32 e0       	ldi	r19, 0x02	; 2
    3886:	17 ff       	sbrs	r17, 7
    3888:	08 c0       	rjmp	.+16     	; 0x389a <vfprintf+0x28e>
    388a:	f5 01       	movw	r30, r10
    388c:	60 81       	ld	r22, Z
    388e:	71 81       	ldd	r23, Z+1	; 0x01
    3890:	82 81       	ldd	r24, Z+2	; 0x02
    3892:	93 81       	ldd	r25, Z+3	; 0x03
    3894:	44 e0       	ldi	r20, 0x04	; 4
    3896:	50 e0       	ldi	r21, 0x00	; 0
    3898:	08 c0       	rjmp	.+16     	; 0x38aa <vfprintf+0x29e>
    389a:	f5 01       	movw	r30, r10
    389c:	80 81       	ld	r24, Z
    389e:	91 81       	ldd	r25, Z+1	; 0x01
    38a0:	bc 01       	movw	r22, r24
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	42 e0       	ldi	r20, 0x02	; 2
    38a8:	50 e0       	ldi	r21, 0x00	; 0
    38aa:	a4 0e       	add	r10, r20
    38ac:	b5 1e       	adc	r11, r21
    38ae:	a1 01       	movw	r20, r2
    38b0:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <__ultoa_invert>
    38b4:	d8 2e       	mov	r13, r24
    38b6:	d2 18       	sub	r13, r2
    38b8:	8f e7       	ldi	r24, 0x7F	; 127
    38ba:	f8 2e       	mov	r15, r24
    38bc:	f1 22       	and	r15, r17
    38be:	f6 fe       	sbrs	r15, 6
    38c0:	0b c0       	rjmp	.+22     	; 0x38d8 <vfprintf+0x2cc>
    38c2:	5e ef       	ldi	r21, 0xFE	; 254
    38c4:	f5 22       	and	r15, r21
    38c6:	d9 14       	cp	r13, r9
    38c8:	38 f4       	brcc	.+14     	; 0x38d8 <vfprintf+0x2cc>
    38ca:	f4 fe       	sbrs	r15, 4
    38cc:	07 c0       	rjmp	.+14     	; 0x38dc <vfprintf+0x2d0>
    38ce:	f2 fc       	sbrc	r15, 2
    38d0:	05 c0       	rjmp	.+10     	; 0x38dc <vfprintf+0x2d0>
    38d2:	8f ee       	ldi	r24, 0xEF	; 239
    38d4:	f8 22       	and	r15, r24
    38d6:	02 c0       	rjmp	.+4      	; 0x38dc <vfprintf+0x2d0>
    38d8:	1d 2d       	mov	r17, r13
    38da:	01 c0       	rjmp	.+2      	; 0x38de <vfprintf+0x2d2>
    38dc:	19 2d       	mov	r17, r9
    38de:	f4 fe       	sbrs	r15, 4
    38e0:	0d c0       	rjmp	.+26     	; 0x38fc <vfprintf+0x2f0>
    38e2:	fe 01       	movw	r30, r28
    38e4:	ed 0d       	add	r30, r13
    38e6:	f1 1d       	adc	r31, r1
    38e8:	80 81       	ld	r24, Z
    38ea:	80 33       	cpi	r24, 0x30	; 48
    38ec:	19 f4       	brne	.+6      	; 0x38f4 <vfprintf+0x2e8>
    38ee:	99 ee       	ldi	r25, 0xE9	; 233
    38f0:	f9 22       	and	r15, r25
    38f2:	08 c0       	rjmp	.+16     	; 0x3904 <vfprintf+0x2f8>
    38f4:	1f 5f       	subi	r17, 0xFF	; 255
    38f6:	f2 fe       	sbrs	r15, 2
    38f8:	05 c0       	rjmp	.+10     	; 0x3904 <vfprintf+0x2f8>
    38fa:	03 c0       	rjmp	.+6      	; 0x3902 <vfprintf+0x2f6>
    38fc:	8f 2d       	mov	r24, r15
    38fe:	86 78       	andi	r24, 0x86	; 134
    3900:	09 f0       	breq	.+2      	; 0x3904 <vfprintf+0x2f8>
    3902:	1f 5f       	subi	r17, 0xFF	; 255
    3904:	0f 2d       	mov	r16, r15
    3906:	f3 fc       	sbrc	r15, 3
    3908:	14 c0       	rjmp	.+40     	; 0x3932 <vfprintf+0x326>
    390a:	f0 fe       	sbrs	r15, 0
    390c:	0f c0       	rjmp	.+30     	; 0x392c <vfprintf+0x320>
    390e:	1e 15       	cp	r17, r14
    3910:	10 f0       	brcs	.+4      	; 0x3916 <vfprintf+0x30a>
    3912:	9d 2c       	mov	r9, r13
    3914:	0b c0       	rjmp	.+22     	; 0x392c <vfprintf+0x320>
    3916:	9d 2c       	mov	r9, r13
    3918:	9e 0c       	add	r9, r14
    391a:	91 1a       	sub	r9, r17
    391c:	1e 2d       	mov	r17, r14
    391e:	06 c0       	rjmp	.+12     	; 0x392c <vfprintf+0x320>
    3920:	80 e2       	ldi	r24, 0x20	; 32
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	b3 01       	movw	r22, r6
    3926:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <fputc>
    392a:	1f 5f       	subi	r17, 0xFF	; 255
    392c:	1e 15       	cp	r17, r14
    392e:	c0 f3       	brcs	.-16     	; 0x3920 <vfprintf+0x314>
    3930:	04 c0       	rjmp	.+8      	; 0x393a <vfprintf+0x32e>
    3932:	1e 15       	cp	r17, r14
    3934:	10 f4       	brcc	.+4      	; 0x393a <vfprintf+0x32e>
    3936:	e1 1a       	sub	r14, r17
    3938:	01 c0       	rjmp	.+2      	; 0x393c <vfprintf+0x330>
    393a:	ee 24       	eor	r14, r14
    393c:	04 ff       	sbrs	r16, 4
    393e:	0f c0       	rjmp	.+30     	; 0x395e <vfprintf+0x352>
    3940:	80 e3       	ldi	r24, 0x30	; 48
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	b3 01       	movw	r22, r6
    3946:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <fputc>
    394a:	02 ff       	sbrs	r16, 2
    394c:	1d c0       	rjmp	.+58     	; 0x3988 <vfprintf+0x37c>
    394e:	01 fd       	sbrc	r16, 1
    3950:	03 c0       	rjmp	.+6      	; 0x3958 <vfprintf+0x34c>
    3952:	88 e7       	ldi	r24, 0x78	; 120
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	0e c0       	rjmp	.+28     	; 0x3974 <vfprintf+0x368>
    3958:	88 e5       	ldi	r24, 0x58	; 88
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	0b c0       	rjmp	.+22     	; 0x3974 <vfprintf+0x368>
    395e:	80 2f       	mov	r24, r16
    3960:	86 78       	andi	r24, 0x86	; 134
    3962:	91 f0       	breq	.+36     	; 0x3988 <vfprintf+0x37c>
    3964:	01 ff       	sbrs	r16, 1
    3966:	02 c0       	rjmp	.+4      	; 0x396c <vfprintf+0x360>
    3968:	8b e2       	ldi	r24, 0x2B	; 43
    396a:	01 c0       	rjmp	.+2      	; 0x396e <vfprintf+0x362>
    396c:	80 e2       	ldi	r24, 0x20	; 32
    396e:	f7 fc       	sbrc	r15, 7
    3970:	8d e2       	ldi	r24, 0x2D	; 45
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	b3 01       	movw	r22, r6
    3976:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <fputc>
    397a:	06 c0       	rjmp	.+12     	; 0x3988 <vfprintf+0x37c>
    397c:	80 e3       	ldi	r24, 0x30	; 48
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	b3 01       	movw	r22, r6
    3982:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <fputc>
    3986:	9a 94       	dec	r9
    3988:	d9 14       	cp	r13, r9
    398a:	c0 f3       	brcs	.-16     	; 0x397c <vfprintf+0x370>
    398c:	da 94       	dec	r13
    398e:	f1 01       	movw	r30, r2
    3990:	ed 0d       	add	r30, r13
    3992:	f1 1d       	adc	r31, r1
    3994:	80 81       	ld	r24, Z
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	b3 01       	movw	r22, r6
    399a:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <fputc>
    399e:	dd 20       	and	r13, r13
    39a0:	a9 f7       	brne	.-22     	; 0x398c <vfprintf+0x380>
    39a2:	06 c0       	rjmp	.+12     	; 0x39b0 <vfprintf+0x3a4>
    39a4:	80 e2       	ldi	r24, 0x20	; 32
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	b3 01       	movw	r22, r6
    39aa:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <fputc>
    39ae:	ea 94       	dec	r14
    39b0:	ee 20       	and	r14, r14
    39b2:	c1 f7       	brne	.-16     	; 0x39a4 <vfprintf+0x398>
    39b4:	43 ce       	rjmp	.-890    	; 0x363c <vfprintf+0x30>
    39b6:	f3 01       	movw	r30, r6
    39b8:	66 81       	ldd	r22, Z+6	; 0x06
    39ba:	77 81       	ldd	r23, Z+7	; 0x07
    39bc:	cb 01       	movw	r24, r22
    39be:	2b 96       	adiw	r28, 0x0b	; 11
    39c0:	e2 e1       	ldi	r30, 0x12	; 18
    39c2:	0c 94 c5 1d 	jmp	0x3b8a	; 0x3b8a <__epilogue_restores__>

000039c6 <calloc>:
    39c6:	0f 93       	push	r16
    39c8:	1f 93       	push	r17
    39ca:	cf 93       	push	r28
    39cc:	df 93       	push	r29
    39ce:	68 9f       	mul	r22, r24
    39d0:	80 01       	movw	r16, r0
    39d2:	69 9f       	mul	r22, r25
    39d4:	10 0d       	add	r17, r0
    39d6:	78 9f       	mul	r23, r24
    39d8:	10 0d       	add	r17, r0
    39da:	11 24       	eor	r1, r1
    39dc:	c8 01       	movw	r24, r16
    39de:	0e 94 d6 18 	call	0x31ac	; 0x31ac <malloc>
    39e2:	ec 01       	movw	r28, r24
    39e4:	00 97       	sbiw	r24, 0x00	; 0
    39e6:	29 f0       	breq	.+10     	; 0x39f2 <calloc+0x2c>
    39e8:	60 e0       	ldi	r22, 0x00	; 0
    39ea:	70 e0       	ldi	r23, 0x00	; 0
    39ec:	a8 01       	movw	r20, r16
    39ee:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <memset>
    39f2:	ce 01       	movw	r24, r28
    39f4:	df 91       	pop	r29
    39f6:	cf 91       	pop	r28
    39f8:	1f 91       	pop	r17
    39fa:	0f 91       	pop	r16
    39fc:	08 95       	ret

000039fe <__ctype_isfalse>:
    39fe:	99 27       	eor	r25, r25
    3a00:	88 27       	eor	r24, r24

00003a02 <__ctype_istrue>:
    3a02:	08 95       	ret

00003a04 <strnlen_P>:
    3a04:	fc 01       	movw	r30, r24
    3a06:	05 90       	lpm	r0, Z+
    3a08:	61 50       	subi	r22, 0x01	; 1
    3a0a:	70 40       	sbci	r23, 0x00	; 0
    3a0c:	01 10       	cpse	r0, r1
    3a0e:	d8 f7       	brcc	.-10     	; 0x3a06 <strnlen_P+0x2>
    3a10:	80 95       	com	r24
    3a12:	90 95       	com	r25
    3a14:	8e 0f       	add	r24, r30
    3a16:	9f 1f       	adc	r25, r31
    3a18:	08 95       	ret

00003a1a <memset>:
    3a1a:	dc 01       	movw	r26, r24
    3a1c:	01 c0       	rjmp	.+2      	; 0x3a20 <memset+0x6>
    3a1e:	6d 93       	st	X+, r22
    3a20:	41 50       	subi	r20, 0x01	; 1
    3a22:	50 40       	sbci	r21, 0x00	; 0
    3a24:	e0 f7       	brcc	.-8      	; 0x3a1e <memset+0x4>
    3a26:	08 95       	ret

00003a28 <strnlen>:
    3a28:	fc 01       	movw	r30, r24
    3a2a:	61 50       	subi	r22, 0x01	; 1
    3a2c:	70 40       	sbci	r23, 0x00	; 0
    3a2e:	01 90       	ld	r0, Z+
    3a30:	01 10       	cpse	r0, r1
    3a32:	d8 f7       	brcc	.-10     	; 0x3a2a <strnlen+0x2>
    3a34:	80 95       	com	r24
    3a36:	90 95       	com	r25
    3a38:	8e 0f       	add	r24, r30
    3a3a:	9f 1f       	adc	r25, r31
    3a3c:	08 95       	ret

00003a3e <fputc>:
    3a3e:	0f 93       	push	r16
    3a40:	1f 93       	push	r17
    3a42:	cf 93       	push	r28
    3a44:	df 93       	push	r29
    3a46:	8c 01       	movw	r16, r24
    3a48:	eb 01       	movw	r28, r22
    3a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4c:	81 ff       	sbrs	r24, 1
    3a4e:	1b c0       	rjmp	.+54     	; 0x3a86 <fputc+0x48>
    3a50:	82 ff       	sbrs	r24, 2
    3a52:	0d c0       	rjmp	.+26     	; 0x3a6e <fputc+0x30>
    3a54:	2e 81       	ldd	r18, Y+6	; 0x06
    3a56:	3f 81       	ldd	r19, Y+7	; 0x07
    3a58:	8c 81       	ldd	r24, Y+4	; 0x04
    3a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    3a5c:	28 17       	cp	r18, r24
    3a5e:	39 07       	cpc	r19, r25
    3a60:	64 f4       	brge	.+24     	; 0x3a7a <fputc+0x3c>
    3a62:	e8 81       	ld	r30, Y
    3a64:	f9 81       	ldd	r31, Y+1	; 0x01
    3a66:	01 93       	st	Z+, r16
    3a68:	f9 83       	std	Y+1, r31	; 0x01
    3a6a:	e8 83       	st	Y, r30
    3a6c:	06 c0       	rjmp	.+12     	; 0x3a7a <fputc+0x3c>
    3a6e:	e8 85       	ldd	r30, Y+8	; 0x08
    3a70:	f9 85       	ldd	r31, Y+9	; 0x09
    3a72:	80 2f       	mov	r24, r16
    3a74:	09 95       	icall
    3a76:	89 2b       	or	r24, r25
    3a78:	31 f4       	brne	.+12     	; 0x3a86 <fputc+0x48>
    3a7a:	8e 81       	ldd	r24, Y+6	; 0x06
    3a7c:	9f 81       	ldd	r25, Y+7	; 0x07
    3a7e:	01 96       	adiw	r24, 0x01	; 1
    3a80:	9f 83       	std	Y+7, r25	; 0x07
    3a82:	8e 83       	std	Y+6, r24	; 0x06
    3a84:	02 c0       	rjmp	.+4      	; 0x3a8a <fputc+0x4c>
    3a86:	0f ef       	ldi	r16, 0xFF	; 255
    3a88:	1f ef       	ldi	r17, 0xFF	; 255
    3a8a:	c8 01       	movw	r24, r16
    3a8c:	df 91       	pop	r29
    3a8e:	cf 91       	pop	r28
    3a90:	1f 91       	pop	r17
    3a92:	0f 91       	pop	r16
    3a94:	08 95       	ret

00003a96 <__ultoa_invert>:
    3a96:	fa 01       	movw	r30, r20
    3a98:	aa 27       	eor	r26, r26
    3a9a:	28 30       	cpi	r18, 0x08	; 8
    3a9c:	51 f1       	breq	.+84     	; 0x3af2 <__ultoa_invert+0x5c>
    3a9e:	20 31       	cpi	r18, 0x10	; 16
    3aa0:	81 f1       	breq	.+96     	; 0x3b02 <__ultoa_invert+0x6c>
    3aa2:	e8 94       	clt
    3aa4:	6f 93       	push	r22
    3aa6:	6e 7f       	andi	r22, 0xFE	; 254
    3aa8:	6e 5f       	subi	r22, 0xFE	; 254
    3aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    3aac:	8f 4f       	sbci	r24, 0xFF	; 255
    3aae:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab0:	af 4f       	sbci	r26, 0xFF	; 255
    3ab2:	b1 e0       	ldi	r27, 0x01	; 1
    3ab4:	3e d0       	rcall	.+124    	; 0x3b32 <__ultoa_invert+0x9c>
    3ab6:	b4 e0       	ldi	r27, 0x04	; 4
    3ab8:	3c d0       	rcall	.+120    	; 0x3b32 <__ultoa_invert+0x9c>
    3aba:	67 0f       	add	r22, r23
    3abc:	78 1f       	adc	r23, r24
    3abe:	89 1f       	adc	r24, r25
    3ac0:	9a 1f       	adc	r25, r26
    3ac2:	a1 1d       	adc	r26, r1
    3ac4:	68 0f       	add	r22, r24
    3ac6:	79 1f       	adc	r23, r25
    3ac8:	8a 1f       	adc	r24, r26
    3aca:	91 1d       	adc	r25, r1
    3acc:	a1 1d       	adc	r26, r1
    3ace:	6a 0f       	add	r22, r26
    3ad0:	71 1d       	adc	r23, r1
    3ad2:	81 1d       	adc	r24, r1
    3ad4:	91 1d       	adc	r25, r1
    3ad6:	a1 1d       	adc	r26, r1
    3ad8:	20 d0       	rcall	.+64     	; 0x3b1a <__ultoa_invert+0x84>
    3ada:	09 f4       	brne	.+2      	; 0x3ade <__ultoa_invert+0x48>
    3adc:	68 94       	set
    3ade:	3f 91       	pop	r19
    3ae0:	2a e0       	ldi	r18, 0x0A	; 10
    3ae2:	26 9f       	mul	r18, r22
    3ae4:	11 24       	eor	r1, r1
    3ae6:	30 19       	sub	r19, r0
    3ae8:	30 5d       	subi	r19, 0xD0	; 208
    3aea:	31 93       	st	Z+, r19
    3aec:	de f6       	brtc	.-74     	; 0x3aa4 <__ultoa_invert+0xe>
    3aee:	cf 01       	movw	r24, r30
    3af0:	08 95       	ret
    3af2:	46 2f       	mov	r20, r22
    3af4:	47 70       	andi	r20, 0x07	; 7
    3af6:	40 5d       	subi	r20, 0xD0	; 208
    3af8:	41 93       	st	Z+, r20
    3afa:	b3 e0       	ldi	r27, 0x03	; 3
    3afc:	0f d0       	rcall	.+30     	; 0x3b1c <__ultoa_invert+0x86>
    3afe:	c9 f7       	brne	.-14     	; 0x3af2 <__ultoa_invert+0x5c>
    3b00:	f6 cf       	rjmp	.-20     	; 0x3aee <__ultoa_invert+0x58>
    3b02:	46 2f       	mov	r20, r22
    3b04:	4f 70       	andi	r20, 0x0F	; 15
    3b06:	40 5d       	subi	r20, 0xD0	; 208
    3b08:	4a 33       	cpi	r20, 0x3A	; 58
    3b0a:	18 f0       	brcs	.+6      	; 0x3b12 <__ultoa_invert+0x7c>
    3b0c:	49 5d       	subi	r20, 0xD9	; 217
    3b0e:	31 fd       	sbrc	r19, 1
    3b10:	40 52       	subi	r20, 0x20	; 32
    3b12:	41 93       	st	Z+, r20
    3b14:	02 d0       	rcall	.+4      	; 0x3b1a <__ultoa_invert+0x84>
    3b16:	a9 f7       	brne	.-22     	; 0x3b02 <__ultoa_invert+0x6c>
    3b18:	ea cf       	rjmp	.-44     	; 0x3aee <__ultoa_invert+0x58>
    3b1a:	b4 e0       	ldi	r27, 0x04	; 4
    3b1c:	a6 95       	lsr	r26
    3b1e:	97 95       	ror	r25
    3b20:	87 95       	ror	r24
    3b22:	77 95       	ror	r23
    3b24:	67 95       	ror	r22
    3b26:	ba 95       	dec	r27
    3b28:	c9 f7       	brne	.-14     	; 0x3b1c <__ultoa_invert+0x86>
    3b2a:	00 97       	sbiw	r24, 0x00	; 0
    3b2c:	61 05       	cpc	r22, r1
    3b2e:	71 05       	cpc	r23, r1
    3b30:	08 95       	ret
    3b32:	9b 01       	movw	r18, r22
    3b34:	ac 01       	movw	r20, r24
    3b36:	0a 2e       	mov	r0, r26
    3b38:	06 94       	lsr	r0
    3b3a:	57 95       	ror	r21
    3b3c:	47 95       	ror	r20
    3b3e:	37 95       	ror	r19
    3b40:	27 95       	ror	r18
    3b42:	ba 95       	dec	r27
    3b44:	c9 f7       	brne	.-14     	; 0x3b38 <__ultoa_invert+0xa2>
    3b46:	62 0f       	add	r22, r18
    3b48:	73 1f       	adc	r23, r19
    3b4a:	84 1f       	adc	r24, r20
    3b4c:	95 1f       	adc	r25, r21
    3b4e:	a0 1d       	adc	r26, r0
    3b50:	08 95       	ret

00003b52 <__prologue_saves__>:
    3b52:	2f 92       	push	r2
    3b54:	3f 92       	push	r3
    3b56:	4f 92       	push	r4
    3b58:	5f 92       	push	r5
    3b5a:	6f 92       	push	r6
    3b5c:	7f 92       	push	r7
    3b5e:	8f 92       	push	r8
    3b60:	9f 92       	push	r9
    3b62:	af 92       	push	r10
    3b64:	bf 92       	push	r11
    3b66:	cf 92       	push	r12
    3b68:	df 92       	push	r13
    3b6a:	ef 92       	push	r14
    3b6c:	ff 92       	push	r15
    3b6e:	0f 93       	push	r16
    3b70:	1f 93       	push	r17
    3b72:	cf 93       	push	r28
    3b74:	df 93       	push	r29
    3b76:	cd b7       	in	r28, 0x3d	; 61
    3b78:	de b7       	in	r29, 0x3e	; 62
    3b7a:	ca 1b       	sub	r28, r26
    3b7c:	db 0b       	sbc	r29, r27
    3b7e:	0f b6       	in	r0, 0x3f	; 63
    3b80:	f8 94       	cli
    3b82:	de bf       	out	0x3e, r29	; 62
    3b84:	0f be       	out	0x3f, r0	; 63
    3b86:	cd bf       	out	0x3d, r28	; 61
    3b88:	09 94       	ijmp

00003b8a <__epilogue_restores__>:
    3b8a:	2a 88       	ldd	r2, Y+18	; 0x12
    3b8c:	39 88       	ldd	r3, Y+17	; 0x11
    3b8e:	48 88       	ldd	r4, Y+16	; 0x10
    3b90:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b92:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b94:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b96:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b98:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b9c:	b9 84       	ldd	r11, Y+9	; 0x09
    3b9e:	c8 84       	ldd	r12, Y+8	; 0x08
    3ba0:	df 80       	ldd	r13, Y+7	; 0x07
    3ba2:	ee 80       	ldd	r14, Y+6	; 0x06
    3ba4:	fd 80       	ldd	r15, Y+5	; 0x05
    3ba6:	0c 81       	ldd	r16, Y+4	; 0x04
    3ba8:	1b 81       	ldd	r17, Y+3	; 0x03
    3baa:	aa 81       	ldd	r26, Y+2	; 0x02
    3bac:	b9 81       	ldd	r27, Y+1	; 0x01
    3bae:	ce 0f       	add	r28, r30
    3bb0:	d1 1d       	adc	r29, r1
    3bb2:	0f b6       	in	r0, 0x3f	; 63
    3bb4:	f8 94       	cli
    3bb6:	de bf       	out	0x3e, r29	; 62
    3bb8:	0f be       	out	0x3f, r0	; 63
    3bba:	cd bf       	out	0x3d, r28	; 61
    3bbc:	ed 01       	movw	r28, r26
    3bbe:	08 95       	ret

00003bc0 <_exit>:
    3bc0:	f8 94       	cli

00003bc2 <__stop_program>:
    3bc2:	ff cf       	rjmp	.-2      	; 0x3bc2 <__stop_program>
